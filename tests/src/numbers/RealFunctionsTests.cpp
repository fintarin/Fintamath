#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include "fintamath/numbers/Rational.hpp"
#include "fintamath/numbers/RealFunctions.hpp"

#include "fintamath/exceptions/UndefinedException.hpp"
#include "fintamath/numbers/IntegerFunctions.hpp"

using namespace fintamath;

namespace {

// TODO: set precision to 100
constexpr unsigned precision = 500;

const Real &getBottom() {
  static const Real res = pow(Rational("9.99"), precision);
  return res;
}

const Real &getTop() {
  static const Real res = pow(Rational("10.01"), precision);
  return res;
}

const Real &getLogBottom() {
  static const Real res = pow(precision - 1, getE());
  return res;
}

const Real &getLogTop() {
  static const Real res = pow(precision + 1, getE());
  return res;
}

}

TEST(RealFunctionsTests, floorTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(floor(Real("-1000.8")).toString(), "-1001");
  EXPECT_EQ(floor(Real("-1000.1")).toString(), "-1001");
  EXPECT_EQ(floor(Real("-1000")).toString(), "-1000");
  EXPECT_EQ(floor(Real("-1.9")).toString(), "-2");
  EXPECT_EQ(floor(Real("-1.5")).toString(), "-2");
  EXPECT_EQ(floor(Real("-1.3")).toString(), "-2");
  EXPECT_EQ(floor(Real("-1")).toString(), "-1");
  EXPECT_EQ(floor(Real("-0.9")).toString(), "-1");
  EXPECT_EQ(floor(Real("-0.3")).toString(), "-1");
  EXPECT_EQ(floor(Real("-0")).toString(), "-1");
  EXPECT_EQ(floor(Real("0")).toString(), "0");
  EXPECT_EQ(floor(Real("0.3")).toString(), "0");
  EXPECT_EQ(floor(Real("0.9")).toString(), "0");
  EXPECT_EQ(floor(Real("1")).toString(), "1");
  EXPECT_EQ(floor(Real("1.9")).toString(), "1");
  EXPECT_EQ(floor(Real("1.5")).toString(), "1");
  EXPECT_EQ(floor(Real("1.3")).toString(), "1");
  EXPECT_EQ(floor(Real("1000")).toString(), "1000");
  EXPECT_EQ(floor(Real("1000.1")).toString(), "1000");
  EXPECT_EQ(floor(Real("1000.8")).toString(), "1000");

  EXPECT_EQ(floor(getBottom()).toString(), "60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633532");
  EXPECT_EQ(floor(-getBottom()).toString(), "-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533");
  EXPECT_EQ(floor(1 / getBottom()).toString(), "0");
  EXPECT_EQ(floor(-1 / getBottom()).toString(), "-1");
  EXPECT_EQ(floor(1 + 1 / getBottom()).toString(), "1");
  EXPECT_EQ(floor(1 - 1 / getBottom()).toString(), "0");
  EXPECT_EQ(floor(-1 + 1 / getBottom()).toString(), "-1");
  EXPECT_EQ(floor(-1 - 1 / getBottom()).toString(), "-2");

  EXPECT_THAT(
    [] { floor(getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("floor(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument overflow)")
    )
  );
  EXPECT_THAT(
    [] { floor(-getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("floor(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument overflow)")
    )
  );
  EXPECT_EQ(floor(1 / getTop()).toString(), "0");
  EXPECT_EQ(floor(-1 / getTop()).toString(), "-1");
  EXPECT_EQ(floor(1 + 1 / getTop()).toString(), "1");
  EXPECT_EQ(floor(1 - 1 / getTop()).toString(), "0");
  EXPECT_EQ(floor(-1 + 1 / getTop()).toString(), "-1");
  EXPECT_EQ(floor(-1 - 1 / getTop()).toString(), "-2");
}

TEST(RealFunctionsTests, ceilTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(ceil(Real("-1000.8")).toString(), "-1000");
  EXPECT_EQ(ceil(Real("-1000.1")).toString(), "-1000");
  EXPECT_EQ(ceil(Real("-1000")).toString(), "-1000");
  EXPECT_EQ(ceil(Real("-1.9")).toString(), "-1");
  EXPECT_EQ(ceil(Real("-1.5")).toString(), "-1");
  EXPECT_EQ(ceil(Real("-1.3")).toString(), "-1");
  EXPECT_EQ(ceil(Real("-1")).toString(), "-1");
  EXPECT_EQ(ceil(Real("-0.9")).toString(), "0");
  EXPECT_EQ(ceil(Real("-0.3")).toString(), "0");
  EXPECT_EQ(ceil(Real("-0")).toString(), "0");
  EXPECT_EQ(ceil(Real("0")).toString(), "0");
  EXPECT_EQ(ceil(Real("0.3")).toString(), "1");
  EXPECT_EQ(ceil(Real("0.9")).toString(), "1");
  EXPECT_EQ(ceil(Real("1")).toString(), "1");
  EXPECT_EQ(ceil(Real("1.9")).toString(), "2");
  EXPECT_EQ(ceil(Real("1.5")).toString(), "2");
  EXPECT_EQ(ceil(Real("1.3")).toString(), "2");
  EXPECT_EQ(ceil(Real("1000")).toString(), "1000");
  EXPECT_EQ(ceil(Real("1000.1")).toString(), "1001");
  EXPECT_EQ(ceil(Real("1000.8")).toString(), "1001");

  EXPECT_EQ(ceil(getBottom()).toString(), "60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533");
  EXPECT_EQ(ceil(-getBottom()).toString(), "-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633532");
  EXPECT_EQ(ceil(1 / getBottom()).toString(), "1");
  EXPECT_EQ(ceil(-1 / getBottom()).toString(), "0");
  EXPECT_EQ(ceil(1 + 1 / getBottom()).toString(), "2");
  EXPECT_EQ(ceil(1 - 1 / getBottom()).toString(), "1");
  EXPECT_EQ(ceil(-1 + 1 / getBottom()).toString(), "0");
  EXPECT_EQ(ceil(-1 - 1 / getBottom()).toString(), "-1");

  EXPECT_THAT(
    [] { ceil(getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("ceil(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument overflow)")
    )
  );
  EXPECT_THAT(
    [] { ceil(-getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("ceil(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument overflow)")
    )
  );
  EXPECT_EQ(ceil(1 / getTop()).toString(), "1");
  EXPECT_EQ(ceil(-1 / getTop()).toString(), "0");
  EXPECT_EQ(ceil(1 + 1 / getTop()).toString(), "2");
  EXPECT_EQ(ceil(1 - 1 / getTop()).toString(), "1");
  EXPECT_EQ(ceil(-1 + 1 / getTop()).toString(), "0");
  EXPECT_EQ(ceil(-1 - 1 / getTop()).toString(), "-1");
}

TEST(RealFunctionsTests, absTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(abs(Real("0")).toString(), "0.0");
  EXPECT_EQ(abs(Real("-0")).toString(), "0.0");
  EXPECT_EQ(abs(Real("1")).toString(), "1.0");
  EXPECT_EQ(abs(Real("-1")).toString(), "1.0");
  EXPECT_EQ(abs(Real("8465132.321651651")).toString(), "8465132.321651651");
  EXPECT_EQ(abs(Real("-98465136846516354684651.351")).toString(), "98465136846516354684651.351");

  EXPECT_EQ(abs(getBottom()).toString(), "60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0");
  EXPECT_EQ(abs(-getBottom()).toString(), "60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0");
  EXPECT_EQ(abs(1 / getBottom()).toString(), "1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500");
  EXPECT_EQ(abs(-1 / getBottom()).toString(), "1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500");
  EXPECT_EQ(abs(1 + 1 / getBottom()).toString(), "1.0");
  EXPECT_EQ(abs(1 - 1 / getBottom()).toString
  EXPECT_EQ(abs(-1 + 1 / getBottom()).toString
  EXPECT_EQ(abs(-1 - 1 / getBottom()).toString(), "1.0");

  EXPECT_EQ(abs(getTop()).toString(), "1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500");
  EXPECT_EQ(abs(-getTop()).toString(), "1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500");
  EXPECT_EQ(abs(1 / getTop()).toString(), "6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501");
  EXPECT_EQ(abs(-1 / getTop()).toString(), "6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501");
  EXPECT_EQ(abs(1 + 1 / getTop()).toString(), "1.0");
  EXPECT_EQ(abs(1 - 1 / getTop()).toString
  EXPECT_EQ(abs(-1 + 1 / getTop()).toString
  EXPECT_EQ(abs(-1 - 1 / getTop()).toString(), "1.0");
}

TEST(RealFunctionsTests, sqrtTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(sqrt(Real(0)).toString(), "0.0");
  EXPECT_EQ(sqrt(Real(1)).toString(), "1.0");
  EXPECT_EQ(sqrt(Real(2)).toString(), "1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727350138462309122970249248360558507372126441214970999358314132226659275055927557999505011527820605714701095599716059702745345968620147285174186408891986095523292304843087143214508397626036279952514079896872533965463318088296406206152583523950547457502877599617298355752203375318570113543746034084988471603868999706990048150305440277903164542478230684929369186215805784631115966687130130156185689872372");
  EXPECT_EQ(sqrt(Real(3)).toString(), "1.7320508075688772935274463415058723669428052538103806280558069794519330169088000370811461867572485756756261414154067030299699450949989524788116555120943736485280932319023055820679748201010846749232650153123432669033228866506722546689218379712270471316603678615880190499865373798593894676503475065760507566183481296061009476021871903250831458295239598329977898245082887144638329173472241639845878553976679580638183536661108431737808943783161020883055249016700235207111442886959909563657970871684980729");
  EXPECT_EQ(sqrt(Real(4)).toString(), "2.0");
  EXPECT_EQ(sqrt(Real(144)).toString(), "12.0");
  EXPECT_EQ(sqrt(Real(13274)).toString(), "115.21284650593439790572652382777691656117309945220258699979613263506905239760151704907444527831691562590160722956868739995810831106018229199767066691880297989649444558827475898610288233585194686396936463566845788538210419045585889382699974121670227377612938399307044834938222554290753004264359544978929244759855334569257960433493015078664603877200766988106619062028004375821258844691477035970273539205497260395698511065593781421896623229723378998585892590250139253387664052892480355774660010289906899");
  EXPECT_EQ(sqrt(Real("1000000000000000000")).toString(), "1000000000.0");
  EXPECT_EQ(sqrt(Real("1.44")).toString(), "1.2");
  EXPECT_EQ(sqrt(Real("44.3556")).toString(), "6.66");
  EXPECT_EQ(sqrt(Real("23525.32323")).toString(), "153.3796701978459725492204121512750781434647796772676747984731910025774620380353585873562153282468402449005481841073883419559395475898767906139439557306692737624706612235430876655932097400345746485358772717813443198131631030112210968228863289213224144876095410020617778466774885899344482470787465483347525492641579485905056875560330297592329863862879918845030254813451236241418098342383111584169389597987963419936486843277917396618643781613363643398613256282148482430926660270155657970283248756900848");

  EXPECT_THAT(
    [] { sqrt(Real("-0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sqrt(-0.0) is undefined (expected argument >= 0)")
    )
  );
  EXPECT_THAT(
    [] { sqrt(Real(-1)); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sqrt(-1.0) is undefined (expected argument >= 0)")
    )
  );
  EXPECT_THAT(
    [] { sqrt(Real(-10)); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sqrt(-10.0) is undefined (expected argument >= 0)")
    )
  );

  EXPECT_EQ(sqrt(getBottom()).toString(), "7787033741169900729251715815485773693572833921585377451230548885066769607873479007659071982456633322947892066185977166857642583972097125178340595060116728563374256202600009698063524254105227036090331595060371028923930614245952174706617222746879926470.8510897821851530612877059206724864583284715928797081352754008253316368153779308877986149769954082553680155667453706957387521573664658902203158531980680861391512633677953799840216307772389412518628573193107066033055571314455053475570689817047532784603");
  EXPECT_THAT(
    [] { sqrt(-getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sqrt(-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (expected argument >= 0)")
    )
  );
  EXPECT_EQ(sqrt(1 / getBottom()).toString(), "1.2841860369925185169195865952383508057123821807667332113965732899333735192964417864608252585218328774917153021280599859509786581786949635487347411625376722695975048418146219841266294120347267333021747448367685684705244150436777244265866727495790653942061720429576784243367046100069815963928689537008542761364333764862880204579607209976819485622074126185896863972614464760124406252414731669354556859013861276802795992857774887556800764918992498834454139271858853705219677109320158415550275924857185617*10^-250");
  EXPECT_THAT(
    [] { sqrt(-1 / getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sqrt(-1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500) is undefined (expected argument >= 0)")
    )
  );
  EXPECT_EQ(sqrt(1 + 1 / getBottom()).toString(), "1.0");
  EXPECT_EQ(sqrt(1 - 1 / getBottom()).toString
  EXPECT_THAT(
    [] { sqrt(-1 + 1 / getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sqrtis undefined (expected argument >= 0)")
    )
  );
  EXPECT_THAT(
    [] { sqrt(-1 - 1 / getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sqrt(-1.0) is undefined (expected argument >= 0)")
    )
  );

  EXPECT_EQ(sqrt(getTop()).toString(), "12838650304502567820342847439865633074310503792406078718470723550586214728557638663815746712937333587127496004640597516330302267248830820742443565086264610567153748278274474007832355643130116977702031439768479199109529814956630304548763269465384389756.52053975223085046502607341722170036312711000508017122016275623179708765814713563176019216943962531158532833134883846404994409109602478985370587448336374563571387052781900218402134345188878655222048458591611141484862841724667172384676656109304785616");
  EXPECT_THAT(
    [] { sqrt(-getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sqrt(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (expected argument >= 0)")
    )
  );
  EXPECT_EQ(sqrt(1 / getTop()).toString(), "7.7889807439439008591929713981619621881971392435573811385088347637072345211810942977255979201531668508482901835644432798800170069487225436142800834442509986034840508694607108858414951348906886898011055367223021346068786307215243194670694502011075788038186003443520210828144735797247891719537311773034898064286211749687166104322818682124309519595250930225768952588266953614018071794569009012215771558628143915625887558527587041384073595362951663610913990606444790659372759934196101320638736883335585609*10^-251");
  EXPECT_THAT(
    [] { sqrt(-1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sqrt(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (expected argument >= 0)")
    )
  );
  EXPECT_EQ(sqrt(1 + 1 / getTop()).toString(), "1.0");
  EXPECT_EQ(sqrt(1 - 1 / getTop()).toString(), "1.0");
  EXPECT_THAT(
    [] { sqrt(-1 + 1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sqrtis undefined (expected argument >= 0)")
    )
  );
  EXPECT_THAT(
    [] { sqrt(-1 - 1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sqrt(-1.0) is undefined (expected argument >= 0)")
    )
  );
}

TEST(RealFunctionsTests, powTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(pow(Real("0"), Real("1")).toString(), "0.0");
  EXPECT_EQ(pow(Real("1"), Real("0")).toString(), "1.0");
  EXPECT_EQ(pow(Real("1"), Real("1")).toString(), "1.0");
  EXPECT_EQ(pow(Real("-1"), Real("0")).toString(), "1.0");
  EXPECT_EQ(pow(Real("-1"), Real("-1")).toString(), "-1.0");
  EXPECT_EQ(pow(Real("0"), Real("10")).toString(), "0.0");
  EXPECT_EQ(pow(Real("-0"), Real("10")).toString(), "0.0");
  EXPECT_EQ(pow(Real("10"), Real("0")).toString(), "1.0");
  EXPECT_EQ(pow(Real("10"), Real("-0")).toString(), "1.0");
  EXPECT_EQ(pow(Real("0"), Real("11")).toString(), "0.0");
  EXPECT_EQ(pow(Real("-0"), Real("11")).toString(), "-0.0");
  EXPECT_EQ(pow(Real("11"), Real("0")).toString(), "1.0");
  EXPECT_EQ(pow(Real("11"), Real("-0")).toString(), "1.0");
  EXPECT_EQ(pow(Real("-10"), Real("3")).toString(), "-1000.0");
  EXPECT_EQ(pow(Real("1"), Real("25")).toString(), "1.0");
  EXPECT_EQ(pow(Real("2.2"), Real("5")).toString(), "51.53632");
  EXPECT_EQ(pow(Real("10"), Real("10000")).toString(), "1.0*10^10000");
  EXPECT_EQ(pow(Real("20"), Real("10000")).toString(), "1.9950631168807583848837421626835850838234968318861924548520089498529438830221946631919961684036194597899331129423209124271556491349413781117593785932096323957855730046793794526765246551266059895520550086918193311542508608460618104685509074866089624888090489894838009253941633257850621568309473902556912388065225096643874441046759871626985453222868538161694315775629640762836880760732228535091641476183956381458969463899410840960536267821064621427333394036525565649530603142680234969400335934316651459*10^13010");
  EXPECT_EQ(pow(Real("10"), Real("-10000")).toString(), "1.0*10^-10000");
  EXPECT_EQ(pow(Real("-10"), Real("-3")).toString(), "-0.001");
  EXPECT_EQ(pow(Real("-1"), Real("-25")).toString(), "-1.0");
  EXPECT_EQ(pow(Real("-2.2"), Real("-5")).toString(), "-0.019403791345598599201495178545926445660070412478034908196782385703907457886011263512800293074864483921242339383176757673035249703510068239253404201153671818243910314124097335626602753165146444294043501747893524411521816070685683417054225059142756021384530366157304207983806371894617233050400183792711625509931636562331187015293292186946991946650439922757387411441096298687993244376005116391702007438637450248678989885191647366362208244593327579462406318495383449963055181277980267120353180048556047463");
  EXPECT_EQ(pow(Real("-10"), Real("-10000")).toString(), "1.0*10^-10000");
  EXPECT_EQ(pow(Real("-20"), Real("-10000")).toString(), "5.0123727492064520092975559337429777493215677813384258394214290422792395309507840401891106962484224133615218492862058372081327443176891273016482168954795781185874209111160612289384877840210668133773552608102495789572162971239408991402272898479042193487906171309477254859220910820260373325729016674503082447394244693204052866594230899522151692248580978679514873159608242138078045415083878886701652303992237313103864199817534633842287720605482756450323537116934243653732537194326201888943493999035280474*10^-13011");

  EXPECT_EQ(pow(Real("10"), 1 / Real("3")).toString(), "2.1544346900318837217592935665193504952593449421921085824892355063464111066483408001854415035432432761012612204917809204465575051000832749571206753778093319327305836534892638281254969314038783827968633151615752725693778372934970683568763101881668266147059903345049436171293525496169098347413979669736925921971249146750614140234563308859377534574613645942142167294898249398279542094759454708927976303942406819672696899552050824405187389377726818687403613497196972899233926818975913959138450835966645393");
  EXPECT_EQ(pow(Real("1"), 2 / Real("25")).toString(), "1.0");
  EXPECT_EQ(pow(Real("2.2"), 3 / Real("5")).toString(), "1.6049208106703467949297944976671869862588600862104906533562863998657540927533321624904764579547362230505387098441046854305877722316266370346896459910074651102193672501375747398518448711167896745429713628564578245699292015721075742499801869083145396809801350266283491791266667942193540839834301508230912488598653668927471360968700369852654261857303896750633092662814608593818224480784698226206380714896093466853924800849562171364280480604383370430342725648335480486646741093642331808843875651011680266");
  EXPECT_EQ(pow(Real("1.61051"), Real("0.2")).toString(), "1.1");
  EXPECT_EQ(pow(Real("10"), Real("12527") / Real("10000")).toString(), "17.893693744453038568478697708497956474073628495270698073113162233836287079137705360230072413246614308524145362637351363955006625872119162760602692969734753424142055610408967601060899898572824230558075304078857524854558638123610917041671546495972827640077385810008474194104978036019740502339099007731549045368579937074573859406347658325799189041094332354043976275489363375372191776492600853619273404590371361870976855336367405592931186423576460346681858145852904563107541788720985949166759003737504923");
  EXPECT_EQ(pow(Real("3208912742835798256297875237432984"), Real("2873872") / Real("32864198276498721360325792813562983746832458643")).toString(), "1.0000000000000000000000000000000000000067466361790784533917899279259257770642939000988278729038268266049673088117026115809762408403688986636865522629582349229597508643227256257231850374836217686719315025745758053622255582922189977830918548005234207224907736735025354706598258554727480106991557453527822132281506686575542683708158238228060057796811236095102568230822757267340795278272226617796718933682252377631231447285112542037382374229043327586830097275116124395396833879278205860383633617016360025");
  EXPECT_EQ(pow(Real("20"), Real("123.123")).toString(), "15371496698710127538049660207002996251046701240373832293320415676548540249323541328683199199947267490554116434553064075939129183501326770706172585764242164485464.382515100297609740421028072198093722181254540828236428826926831536068839199271795753450337852736384882680205506109908810878550824071221279469619651916696019345196584525823429494097076982849497142377625248218568977811684777567647327971777533839116116665290885441998570014176213283558962536330908764178072262409449011453242722257699813917631");
  EXPECT_EQ(pow(Real("10"), 1 / Real("-10000")).toString(), "0.99976976799815658635141604638981297541396466984477711459083930684685186989697929041213306336963649014516445226715342205456445791603567419530668529333352385821493766355725683790126843515237328825664519963335505490416683633603244426616970444670188624455993900745976147392132159517393443913064196380170053772066058092785778167974295533857824628460101843381416143605938274800210123785374166454561558791202253353388499943904479146244325732868900825077422806602517570895866818404904976261773431671253269019");

  EXPECT_THAT(
    [] { pow(Real("0"), Real("0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("pow(0.0, 0.0) is undefined (zero to the power of zero)")
    )
  );
  EXPECT_THAT(
    [] { pow(Real("0"), Real("-0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("pow(0.0, -0.0) is undefined (zero to the power of zero)")
    )
  );
  EXPECT_THAT(
    [] { pow(Real("-0"), Real("0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("pow(-0.0, 0.0) is undefined (zero to the power of zero)")
    )
  );
  EXPECT_THAT(
    [] { pow(Real("-0"), Real("-0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("pow(-0.0, -0.0) is undefined (zero to the power of zero)")
    )
  );
  EXPECT_THAT(
    [] { pow(Real("0"), Real("-10")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("pow(0.0, -10.0) is undefined (result overflow)")
    )
  );
  EXPECT_THAT(
    [] { pow(Real("-10"), Real("1.5")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("pow(-10.0, 1.5) is undefined (argument out of range)")
    )
  );
  EXPECT_THAT(
    [] { pow(Real("-0"), Real("1.5")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("pow(-0.0, 1.5) is undefined (pow(-1.0, 1.5) is undefined (argument out of range))")
    )
  );
  EXPECT_THAT(
    [] { pow(Real("10"), Real("100000000000000000000")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("pow(10.0, 100000000000000000000.0) is undefined (result overflow)")
    )
  );

  EXPECT_THAT(
    [] { pow(2, getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("pow(2.0, 60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (result overflow)")
    )
  );
  EXPECT_EQ(pow(2, -getBottom()).toString(), "0.0");
  EXPECT_EQ(pow(2, 1 / getBottom()).toString(), "1.0");
  EXPECT_EQ(pow(2, -1 / getBottom()).toString
  EXPECT_EQ(pow(2, 1 + 1 / getBottom()).toString(), "2.0");
  EXPECT_EQ(pow(2, 1 - 1 / getBottom()).toString(), "2.0");
  EXPECT_EQ(pow(2, -1 + 1 / getBottom()).toString
  EXPECT_EQ(pow(2, -1 - 1 / getBottom()).toString

  EXPECT_THAT(
    [] { pow(2, getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("pow(2.0, 1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (result overflow)")
    )
  );
  EXPECT_EQ(pow(2, -getTop()).toString(), "0.0");
  EXPECT_EQ(pow(2, 1 / getTop()).toString(), "1.0");
  EXPECT_EQ(pow(2, -1 / getTop()).toString(), "1.0");
  EXPECT_EQ(pow(2, 1 + 1 / getTop()).toString(), "2.0");
  EXPECT_EQ(pow(2, 1 - 1 / getTop()).toString(), "2.0");
  EXPECT_EQ(pow(2, -1 + 1 / getTop()).toString(), "0.5");
  EXPECT_EQ(pow(2, -1 - 1 / getTop()).toString(), "0.5");
}

TEST(RealFunctionsTests, expTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(exp(Real("0")).toString(), "1.0");
  EXPECT_EQ(exp(Real("-0")).toString(), "1.0");
  EXPECT_EQ(exp(Real("1")).toString(), "2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274274663919320030599218174135966290435729003342952605956307381323286279434907632338298807531952510190115738341879307021540891499348841675092447614606680822648001684774118537423454424371075390777449920695517027618386062613313845830007520449338265602976067371132007093287091274437470472306969772093101416928368190255151086574637721112523897844250569536967707854499699679468644549059879316368892300987931");
  EXPECT_EQ(exp(Real("-1")).toString(), "0.36787944117144232159552377016146086744581113103176783450783680169746149574489980335714727434591964374662732527684399520824697579279012900862665358949409878309219436737733811504863899112514561634498771997868447595793974730254989249545323936620796481051464752061229422308916492656660036507457728370553285373838810680478761195682989345449735073931859921661743300356993720820710227751802158499423378169071566767176233660823037612291562375720947000704050973342567757625252803037688616515709365379954274064");
  EXPECT_EQ(exp(Real("0.5")).toString(), "1.6487212707001281468486507878141635716537761007101480115750793116406610211942156086327765200563666430028666377563077970046711669752196091598409714524900597969294226590984039147199484646594892448968689053364184657208410666568598000889249812117122873752149721955119716090340911156197998698399606426550917545746263044830751947582587826254399319557126900765453228814761009577397884861814432652082034241701047183385915106301256614755338082520260614009728919590840501489150294406956331137767638009584808933");
  EXPECT_EQ(exp(Real("10")).toString(), "22026.465794806716516957900645284244366353512618556781074235426355225202818570792575199120968164525895451555501092457836652423291606522895166222480137728972873485577837847275195480610095881417055888657927317236168401192698035170264925041101757502556764762696107543817931960834044404934236682455357614946828619042431465132389556031319229262768101604495197503774167204806526056321203478848798442802530300736913501270054483832852034221081438619616965319660145104983081899378508779549154525301991890605635");
  EXPECT_EQ(exp(Real("-0.5")).toString(), "0.6065306597126334236037995349911804534419181354871869556828921587350565194137484239986476115079894560264237897940395251765378080855629465333411798229476774247075812465168479412725158988479005552443885718507531384868441993187156845315753208901075976526891171627344906525598579744052145098224995153853317132728425381311889784012562413987629395987670629281648622926075508458525481494580844614877927321357050562862180016899819853574321791741172013015245321858502440442587753042160269949404650924021711362");
  EXPECT_EQ(exp(Real("-10")).toString(), "4.5399929762484851535591515560550610237918088866564969259071305650999421614302281652525004545947782321708055089686028492945199117244520388837183347709414567560990909217007363970181059501783900762968517787030908824365171548448722293652332416020501168264360305604941570107729975354408079403994232932138270780520042710498960354486166066837009201707573208836344679390514026888603880832944976776162030390901503245487645114316303309520493125377657667740067564548767381252875056905722753776283821712841436637*10^-5");

  EXPECT_THAT(
    [] { exp(getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("exp(60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (result overflow)")
    )
  );
  EXPECT_EQ(exp(-getBottom()).toString(), "0.0");
  EXPECT_EQ(exp(1 / getBottom()).toString(), "1.0");
  EXPECT_EQ(exp(-1 / getBottom()).toString
  EXPECT_EQ(exp(1 + 1 / getBottom()).toString(), "2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274274663919320030599218174135966290435729003342952605956307381323286279434907632338298807531952510190115738341879307021540891499348841675092447614606680822648001684774118537423454424371075390777449920695517027618386062613313845830007520449338265602976067371132007093287091274437470472306969772093101416928368190255151086574637721112523897844250569536967707854499699679468644549059879316368892300987932");
  EXPECT_EQ(exp(1 - 1 / getBottom()).toString(), "2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274274663919320030599218174135966290435729003342952605956307381323286279434907632338298807531952510190115738341879307021540891499348841675092447614606680822648001684774118537423454424371075390777449920695517027618386062613313845830007520449338265602976067371132007093287091274437470472306969772093101416928368190255151086574637721112523897844250569536967707854499699679468644549059879316368892300987931");
  EXPECT_EQ(exp(-1 + 1 / getBottom()).toString(), "0.36787944117144232159552377016146086744581113103176783450783680169746149574489980335714727434591964374662732527684399520824697579279012900862665358949409878309219436737733811504863899112514561634498771997868447595793974730254989249545323936620796481051464752061229422308916492656660036507457728370553285373838810680478761195682989345449735073931859921661743300356993720820710227751802158499423378169071566767176233660823037612291562375720947000704050973342567757625252803037688616515709365379954274064");
  EXPECT_EQ(exp(-1 - 1 / getBottom()).toString(), "0.36787944117144232159552377016146086744581113103176783450783680169746149574489980335714727434591964374662732527684399520824697579279012900862665358949409878309219436737733811504863899112514561634498771997868447595793974730254989249545323936620796481051464752061229422308916492656660036507457728370553285373838810680478761195682989345449735073931859921661743300356993720820710227751802158499423378169071566767176233660823037612291562375720947000704050973342567757625252803037688616515709365379954274063");

  EXPECT_THAT(
    [] { exp(getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("exp(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (result overflow)")
    )
  );
  EXPECT_EQ(exp(-getTop()).toString(), "0.0");
  EXPECT_EQ(exp(1 / getTop()).toString(), "1.0");
  EXPECT_EQ(exp(-1 / getTop()).toString
  EXPECT_EQ(exp(1 + 1 / getTop()).toString(), "2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274274663919320030599218174135966290435729003342952605956307381323286279434907632338298807531952510190115738341879307021540891499348841675092447614606680822648001684774118537423454424371075390777449920695517027618386062613313845830007520449338265602976067371132007093287091274437470472306969772093101416928368190255151086574637721112523897844250569536967707854499699679468644549059879316368892300987931");
  EXPECT_EQ(exp(1 - 1 / getTop()).toString(), "2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274274663919320030599218174135966290435729003342952605956307381323286279434907632338298807531952510190115738341879307021540891499348841675092447614606680822648001684774118537423454424371075390777449920695517027618386062613313845830007520449338265602976067371132007093287091274437470472306969772093101416928368190255151086574637721112523897844250569536967707854499699679468644549059879316368892300987931");
  EXPECT_EQ(exp(-1 + 1 / getTop()).toString(), "0.36787944117144232159552377016146086744581113103176783450783680169746149574489980335714727434591964374662732527684399520824697579279012900862665358949409878309219436737733811504863899112514561634498771997868447595793974730254989249545323936620796481051464752061229422308916492656660036507457728370553285373838810680478761195682989345449735073931859921661743300356993720820710227751802158499423378169071566767176233660823037612291562375720947000704050973342567757625252803037688616515709365379954274064");
  EXPECT_EQ(exp(-1 - 1 / getTop()).toString(), "0.36787944117144232159552377016146086744581113103176783450783680169746149574489980335714727434591964374662732527684399520824697579279012900862665358949409878309219436737733811504863899112514561634498771997868447595793974730254989249545323936620796481051464752061229422308916492656660036507457728370553285373838810680478761195682989345449735073931859921661743300356993720820710227751802158499423378169071566767176233660823037612291562375720947000704050973342567757625252803037688616515709365379954274063");
}

TEST(RealFunctionsTests, logTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(log(Real("2"), Real("2")).toString(), "1.0");
  EXPECT_EQ(log(Real("2"), Real("1")).toString(), "0.0");
  EXPECT_EQ(log(Real("2"), Real("32")).toString(), "5.0");
  EXPECT_EQ(log(Real("32"), Real("2")).toString(), "0.2");
  EXPECT_EQ(log(Real("2"), Real("0.25")).toString(), "-2.0");
  EXPECT_EQ(log(Real("0.25"), Real("2")).toString(), "-0.5");
  EXPECT_EQ(log(Real("6.6"), Real("1897.4736")).toString(), "4.0");
  EXPECT_EQ(log(Real("25625423589"), Real("1")).toString(), "0.0");
  EXPECT_EQ(log(Real("234"), Real("456")).toString(), "1.1222974193541929914091049820966032951869292388423209325537371341751861248725024294684039810737754191127025139990642530554677237392120213955638850860455713858838987038771896556260193792802570202807764685294937127092370332053395439112921888063631815226555045250111525592217887826436890820769352432015778884182694477709693745627040317414295717765434267492587111295054311044734933231300297230475501668009960166527523370142599693595381986766847446850611323401985907606701536577492557408647073586015029771");
  EXPECT_EQ(log(Real("123"), Real("3")).toString(), "0.22829804669507253420091742121566627185908792299090405968939796763433454285159041676588419998482757839371689346209379517730339372034840376022238927088693047570332903372921561266443571597810069961390797964879364638498081426258029876122767504975758494814081188814340960403206499543320426822963504013066560962927311557433263064930185243997692687207514006816563297664993832759900838947365031162508017932846183275954763828289733740568447254640580419264754070732897967792535760921586753187990583142842967943");
  EXPECT_EQ(log(Real("75247"), Real("0.68435")).toString(), "-0.033778753934460266831123720169941041787759355941411136734454955533886146484127898493184980237813739244448454243420392936502045016674569962209814275727352836919949049415559421679410308159709256959797454498420094107815528460322967551865627348653354984850194104469047553556465014670960743737140450043288149004099600827249690082455702273163639153216810229377163903235783240133675673398267510771264572190077916049497194915157768086200964726532820721368267150719459928030950998912391748956424034001304734526");
  EXPECT_EQ(log(Real("11"), Real("0.00000684")).toString(), "-4.9596506408100445306058667311608947616694473401420987552975540951574705545668156244555578347027261930172804465709772764580440664073234543077966933164288342955868125420174089966348870945823695705564221333938415208587768655712571156624527831275002399039875389541512605180425872940404498139900307297532732851584897387439882234374306241935267297499115355828711046374777413582523954386270708493063557040368385641048408015177476717560251797888258558661298144676992768810920939335155666218508897241314595805");
  EXPECT_EQ(log(Real("0.2435"), Real("0.00000684")).toString(), "8.4188022648009447163225799145503253101352002864631415297742615181622921460652203893252135022820887001341319601850770875520110928757753272796499436866770185110234096367992828394100601687613288221555097697261899842957945949684413331136056597578143523418528905203613881861131482071992287714071407638448773005224414092163126495683427152060080881159486144871539822246244096502129174394529727345020839956353246490469480019902233480738616934001479599668640841126968042303450589052841035577354726797101205172");

  EXPECT_THAT(
    [] { log(Real("0"), Real("0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("log(0.0, 0.0) is undefined (ln(0.0) is undefined (expected argument > 0))")
    )
  );
  EXPECT_THAT(
    [] { log(Real("0"), Real("-0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("log(0.0, -0.0) is undefined (ln(-0.0) is undefined (expected argument > 0))")
    )
  );
  EXPECT_THAT(
    [] { log(Real("-0"), Real("0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("log(-0.0, 0.0) is undefined (ln(0.0) is undefined (expected argument > 0))")
    )
  );
  EXPECT_THAT(
    [] { log(Real("-0"), Real("-0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("log(-0.0, -0.0) is undefined (ln(-0.0) is undefined (expected argument > 0))")
    )
  );
  EXPECT_THAT(
    [] { log(Real("1"), Real("66")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq(R"(log(1.0, 66.0) is undefined (div(4.1896547420264255448744209363458315725446975461204218810739420522614615391015403955545337898127855677446872359746665499983090936202844377734407750132034614375855322466924278989591414054061908800439205842378476964717818785535562556221481423253679976493420852339317987961870493593040854711141491246445359358373722644761959819863963576390829124879365541233265787258798046029241557202934580563944417723930344537189078848697331335312087479189786893021895715688916117667659732380841091142872749455090483267, 0.0) is undefined (division by zero)))")
    )
  );
  EXPECT_THAT(
    [] { log(Real("-1"), Real("66")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("log(-1.0, 66.0) is undefined (ln(-1.0) is undefined (expected argument > 0))")
    )
  );
  EXPECT_THAT(
    [] { log(Real("10"), Real("-10")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("log(10.0, -10.0) is undefined (ln(-10.0) is undefined (expected argument > 0))")
    )
  );
  EXPECT_THAT(
    [] { log(Real("-10"), Real("10")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("log(-10.0, 10.0) is undefined (ln(-10.0) is undefined (expected argument > 0))")
    )
  );

  EXPECT_EQ(log(getBottom(), 2).toString(), "0.00060232170720148787335668247421703824233401793451907250732522916773385188954022906541837983996988431059094169862536414811557500495692329813203780906742857930168615297869764675322448206577626017712119000549151745205989997178535528834383829035005402069701450414530378257833776070969021526094444364816945235600935174058268565904524492686376745284448718663559682349198279109942125716899713858375086069625495195599080433207462875895090264590143184205942381892712807641877394970943778378340993960349468596485");
  EXPECT_THAT(
    [] { log(-getBottom(), 2); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("log(-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0, 2.0) is undefined (ln(-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (expected argument > 0))")
    )
  );
  EXPECT_EQ(log(1 / getBottom(), 2).toString(), "-0.00060232170720148787335668247421703824233401793451907250732522916773385188954022906541837983996988431059094169862536414811557500495692329813203780906742857930168615297869764675322448206577626017712119000549151745205989997178535528834383829035005402069701450414530378257833776070969021526094444364816945235600935174058268565904524492686376745284448718663559682349198279109942125716899713858375086069625495195599080433207462875895090264590143184205942381892712807641877394970943778378340993960349468596485");
  EXPECT_THAT(
    [] { log(-1 / getLogBottom(), 2); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("log(-4.6323601345201596018892061878515982072135831913249124781529208042454982648628465614696965797869913935218743054602457514560352600611367565988156773585831181676105118387409178234955221855226522640059595453273231846250397399603305435813330352021875683288112345526026061717289260710753809598698926817624586782722790513301811167863309206547634992590757301423109964415721605819870015175274724048567213280419565180687263903467748207131797819760367684284003119646692958657736086146342387980911982181017842413*10^-8, 2.0) is undefined (ln(-4.6323601345201596018892061878515982072135831913249124781529208042454982648628465614696965797869913935218743054602457514560352600611367565988156773585831181676105118387409178234955221855226522640059595453273231846250397399603305435813330352021875683288112345526026061717289260710753809598698926817624586782722790513301811167863309206547634992590757301423109964415721605819870015175274724048567213280419565180687263903467748207131797819760367684284003119646692958657736086146342387980911982181017842413*10^-8) is undefined (expected argument > 0))")
    )
  );
  EXPECT_EQ(log(1 + 1 / getLogBottom(), 2).toString(), "14963154.342193243093712422680699151218039448432193587925035209260728038442025299193161011575994641480733267603410795076728690433584657628985768067584936488667559367158689971672050622879383900097405635209428211341951760557078825755420138867544380597591843358031587606341538450740374340818539759287918718630178509911678830554597975722879609294487135551363296720303098811247554495036254205298081533919450324265477298924474830320510074612511552543256262421158570339037070105389548400264147722652605567058");
  EXPECT_EQ(log(1 - 1 / getLogBottom(), 2).toString(), "-14963153.649046062533766989312806358204380132571285775672422334025760220766251209439677029312401130838446029433818113410281395034922507978017975984060675629138377197348662974614554022611743937520407130897559671111307912059737145360364966233212630661876029704672607678956857740095364811145206406331320973952493609990097452764896860389596820154454690636445526725151914481416015887811174583083122205222815129307965002439358242471444513582333540499948851074193241291292412608104867497408832830908537979595");
  EXPECT_THAT(
    [] { log(-1 + 1 / getLogBottom(), 2); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("log(-0.99999995367639865479840398110793812148401792786416808675087521847079195754501735137153438530303420213008606478125694539754248543964739938863243401184322641416881832389488161259082176504477814477347735994040454672676815374960260039669456418666964797812431671188765447397393828271073928924619040130107318237541321727720948669818883213669079345236500740924269857689003558427839418012998482472527595143278671958043481931273609653225179286820218023963231571599688035330704134226391385365761201908801781898, 2.0) is undefined (ln(-0.99999995367639865479840398110793812148401792786416808675087521847079195754501735137153438530303420213008606478125694539754248543964739938863243401184322641416881832389488161259082176504477814477347735994040454672676815374960260039669456418666964797812431671188765447397393828271073928924619040130107318237541321727720948669818883213669079345236500740924269857689003558427839418012998482472527595143278671958043481931273609653225179286820218023963231571599688035330704134226391385365761201908801781898) is undefined (expected argument > 0))")
    )
  );
  EXPECT_THAT(
    [] { log(-1 - 1 / getLogBottom(), 2); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("log(-1.000000046323601345201596018892061878515982072135831913249124781529208042454982648628465614696965797869913935218743054602457514560352600611367565988156773585831181676105118387409178234955221855226522640059595453273231846250397399603305435813330352021875683288112345526026061717289260710753809598698926817624586782722790513301811167863309206547634992590757301423109964415721605819870015175274724048567213280419565180687263903467748207131797819760367684284003119646692958657736086146342387980911982181, 2.0) is undefined (ln(-1.000000046323601345201596018892061878515982072135831913249124781529208042454982648628465614696965797869913935218743054602457514560352600611367565988156773585831181676105118387409178234955221855226522640059595453273231846250397399603305435813330352021875683288112345526026061717289260710753809598698926817624586782722790513301811167863309206547634992590757301423109964415721605819870015175274724048567213280419565180687263903467748207131797819760367684284003119646692958657736086146342387980911982181) is undefined (expected argument > 0))")
    )
  );

  EXPECT_EQ(log(getTop(), 2).toString(), "0.00060179876403741195722267317028855276394958413863600696746297947633334990788320974726870323010323169588434938957603948500307384601018276229818373404501474310740195421987299739513709619111109837324557071587494251284044564219729803312816295558386812381034330050678075348580043519249230961108398858937009744461829681015882625617053962800932198087109777009790513513968156196421213763732007888196867038077809114726287574264983420066015703482789580169600344172129477299815596840195855948016245613690226508255");
  EXPECT_THAT(
    [] { log(-getTop(), 2); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("log(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500, 2.0) is undefined (ln(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (expected argument > 0))")
    )
  );
  EXPECT_EQ(log(1 / getTop(), 2).toString(), "-0.00060179876403741195722267317028855276394958413863600696746297947633334990788320974726870323010323169588434938957603948500307384601018276229818373404501474310740195421987299739513709619111109837324557071587494251284044564219729803312816295558386812381034330050678075348580043519249230961108398858937009744461829681015882625617053962800932198087109777009790513513968156196421213763732007888196867038077809114726287574264983420066015703482789580169600344172129477299815596840195855948016245613690226508255");
  EXPECT_THAT(
    [] { log(-1 / getLogTop(), 2); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("log(-4.5822646669622353709415408815898613765500353488264329323981919894425661334116853160738377638812261039732488498179824808352307447037898815525088532201374542092087564131091649058686865266222802076280363781214227501353870885297793500222131220890604473034380135820026326994006573795446534715804326943101207383563304855543660722772426251348416116578063065414910124850654381467307135951988430881088189721519153561219474933104692686102960898037082027031205071853361790551077182238717428066382127027048317145*10^-8, 2.0) is undefined (ln(-4.5822646669622353709415408815898613765500353488264329323981919894425661334116853160738377638812261039732488498179824808352307447037898815525088532201374542092087564131091649058686865266222802076280363781214227501353870885297793500222131220890604473034380135820026326994006573795446534715804326943101207383563304855543660722772426251348416116578063065414910124850654381467307135951988430881088189721519153561219474933104692686102960898037082027031205071853361790551077182238717428066382127027048317145*10^-8) is undefined (expected argument > 0))")
    )
  );
  EXPECT_THAT(
    [] { log(1 + 1 / getLogTop(), 2); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("log(1.000000045822646669622353709415408815898613765500353488264329323981919894425661334116853160738377638812261039732488498179824808352307447037898815525088532201374542092087564131091649058686865266222802076280363781214227501353870885297793500222131220890604473034380135820026326994006573795446534715804326943101207383563304855543660722772426251348416116578063065414910124850654381467307135951988430881088189721519153561219474933104692686102960898037082027031205071853361790551077182238717428066382127027, 2.0) is undefined (ln(1.000000045822646669622353709415408815898613765500353488264329323981919894425661334116853160738377638812261039732488498179824808352307447037898815525088532201374542092087564131091649058686865266222802076280363781214227501353870885297793500222131220890604473034380135820026326994006573795446534715804326943101207383563304855543660722772426251348416116578063065414910124850654381467307135951988430881088189721519153561219474933104692686102960898037082027031205071853361790551077182238717428066382127027) is undefined (underflow))")
    )
  );
  EXPECT_THAT(
    [] { log(1 - 1 / getLogTop(), 2); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("log(0.99999995417735333037764629058459118410138623449964651173567067601808010557433866588314683926162236118773896026751150182017519164769255296210118447491146779862545790791243586890835094131313473377719792371963621878577249864612911470220649977786877910939552696561986417997367300599342620455346528419567305689879261643669514445633927722757374865158388342193693458508987514934561853269286404801156911891181027848084643878052506689530731389703910196291797296879492814663820944892281776128257193361787297295, 2.0) is undefined (ln(0.99999995417735333037764629058459118410138623449964651173567067601808010557433866588314683926162236118773896026751150182017519164769255296210118447491146779862545790791243586890835094131313473377719792371963621878577249864612911470220649977786877910939552696561986417997367300599342620455346528419567305689879261643669514445633927722757374865158388342193693458508987514934561853269286404801156911891181027848084643878052506689530731389703910196291797296879492814663820944892281776128257193361787297295) is undefined (underflow))")
    )
  );
  EXPECT_THAT(
    [] { log(-1 + 1 / getLogTop(), 2); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("log(-0.99999995417735333037764629058459118410138623449964651173567067601808010557433866588314683926162236118773896026751150182017519164769255296210118447491146779862545790791243586890835094131313473377719792371963621878577249864612911470220649977786877910939552696561986417997367300599342620455346528419567305689879261643669514445633927722757374865158388342193693458508987514934561853269286404801156911891181027848084643878052506689530731389703910196291797296879492814663820944892281776128257193361787297295, 2.0) is undefined (ln(-0.99999995417735333037764629058459118410138623449964651173567067601808010557433866588314683926162236118773896026751150182017519164769255296210118447491146779862545790791243586890835094131313473377719792371963621878577249864612911470220649977786877910939552696561986417997367300599342620455346528419567305689879261643669514445633927722757374865158388342193693458508987514934561853269286404801156911891181027848084643878052506689530731389703910196291797296879492814663820944892281776128257193361787297295) is undefined (expected argument > 0))")
    )
  );
  EXPECT_THAT(
    [] { log(-1 - 1 / getLogTop(), 2); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("log(-1.000000045822646669622353709415408815898613765500353488264329323981919894425661334116853160738377638812261039732488498179824808352307447037898815525088532201374542092087564131091649058686865266222802076280363781214227501353870885297793500222131220890604473034380135820026326994006573795446534715804326943101207383563304855543660722772426251348416116578063065414910124850654381467307135951988430881088189721519153561219474933104692686102960898037082027031205071853361790551077182238717428066382127027, 2.0) is undefined (ln(-1.000000045822646669622353709415408815898613765500353488264329323981919894425661334116853160738377638812261039732488498179824808352307447037898815525088532201374542092087564131091649058686865266222802076280363781214227501353870885297793500222131220890604473034380135820026326994006573795446534715804326943101207383563304855543660722772426251348416116578063065414910124850654381467307135951988430881088189721519153561219474933104692686102960898037082027031205071853361790551077182238717428066382127027) is undefined (expected argument > 0))")
    )
  );
}

TEST(RealFunctionsTests, lnTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(ln(Real("1")).toString(), "0.0");
  EXPECT_EQ(ln(Real("66")).toString(), "4.1896547420264255448744209363458315725446975461204218810739420522614615391015403955545337898127855677446872359746665499983090936202844377734407750132034614375855322466924278989591414054061908800439205842378476964717818785535562556221481423253679976493420852339317987961870493593040854711141491246445359358373722644761959819863963576390829124879365541233265787258798046029241557202934580563944417723930344537189078848697331335312087479189786893021895715688916117667659732380841091142872749455090483267");

  EXPECT_THAT(
    [] { ln(Real("0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("ln(0.0) is undefined (expected argument > 0)")
    )
  );
  EXPECT_THAT(
    [] { ln(Real("-0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("ln(-0.0) is undefined (expected argument > 0)")
    )
  );
  EXPECT_THAT(
    [] { ln(Real("-1")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("ln(-1.0) is undefined (expected argument > 0)")
    )
  );

  EXPECT_EQ(ln(getBottom()).toString(), "1150.7922963302310752589242362151479313201731416891692833911699400851637036457415027739371939670841652308917357020983836730332705230349503481680214714976474839209077565316325602764151150216708300128886161589992601482604232651461734619835153032025914096909878125883457082637067939111344489500238615160009909178260268499686021249686533307312007952386375303998821252181168668959796267869490105263893896521620725067223980718367681264027500730584855433248242010154290038201336903273791780223593743126300917");
  EXPECT_THAT(
    [] { ln(-getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("ln(-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (expected argument > 0)")
    )
  );
  EXPECT_EQ(ln(1 / getBottom()).toString(), "-1150.7922963302310752589242362151479313201731416891692833911699400851637036457415027739371939670841652308917357020983836730332705230349503481680214714976474839209077565316325602764151150216708300128886161589992601482604232651461734619835153032025914096909878125883457082637067939111344489500238615160009909178260268499686021249686533307312007952386375303998821252181168668959796267869490105263893896521620725067223980718367681264027500730584855433248242010154290038201336903273791780223593743126300917");
  EXPECT_THAT(
    [] { ln(-1 / getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("ln(-1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500) is undefined (expected argument > 0)")
    )
  );
  EXPECT_EQ(ln(1 + 1 / getLogBottom()).toString(), "4.6323600272263608359211448156691072758876883168532246396075018549197775864381748298765365178030226248931374034769820083630251670816629519619538771280826564142288757639085979249471768209927217584931411470222413930228246265766896137048119643681987110433036930098119342190809014298077854480927710521960607704530573579776137719257059197071981057875303104096646125993974912722187860475512221757680333935876388355834671077676526614466116968774936860874832197537416426668522106100035121945103848322706376739*10^-8");
  EXPECT_EQ(ln(1 - 1 / getLogBottom()).toString(), "-4.6323602418139649948376866797514572995752197210491058307576641336724719216383352361062914663674587656808848656687346701431219655465277394329551348639843630422542096702434001605272127288895929327215751563898813796074182163877372714057313772012933040704156169358608742070625510148804860304660664175014151072551726215293399858991624334681638597053383486705746061983545762472894857379243882709348125599832720555810145898279618567784920213785469969120637225339355267781491799812225999918525565812072662816*10^-8");
  EXPECT_THAT(
    [] { ln(-1 + 1 / getLogBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("ln(-0.99999995367639865479840398110793812148401792786416808675087521847079195754501735137153438530303420213008606478125694539754248543964739938863243401184322641416881832389488161259082176504477814477347735994040454672676815374960260039669456418666964797812431671188765447397393828271073928924619040130107318237541321727720948669818883213669079345236500740924269857689003558427839418012998482472527595143278671958043481931273609653225179286820218023963231571599688035330704134226391385365761201908801781898) is undefined (expected argument > 0)")
    )
  );
  EXPECT_THAT(
    [] { ln(-1 - 1 / getLogBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("ln(-1.000000046323601345201596018892061878515982072135831913249124781529208042454982648628465614696965797869913935218743054602457514560352600611367565988156773585831181676105118387409178234955221855226522640059595453273231846250397399603305435813330352021875683288112345526026061717289260710753809598698926817624586782722790513301811167863309206547634992590757301423109964415721605819870015175274724048567213280419565180687263903467748207131797819760367684284003119646692958657736086146342387980911982181) is undefined (expected argument > 0)")
    )
  );

  EXPECT_EQ(ln(getTop()).toString(), "1151.7922966635646085924004268024496095309282755109697640151737838982364673175055998951467299258996052465500220510896818993462124890472738694984769323698716068886745193057012811943430642366646091837561108162687936796823299767705815255181578427768061307290354919840683949388317852313255500361482131430137488582877970196536516803839211139492790968508269095773231100312182466822895779683752382008537434837173083611909767545379191434734806361489542919224380933936036537329432840742844554171617404889632642");
  EXPECT_THAT(
    [] { ln(-getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("ln(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (expected argument > 0)")
    )
  );
  EXPECT_EQ(ln(1 / getTop()).toString(), "-1151.7922966635646085924004268024496095309282755109697640151737838982364673175055998951467299258996052465500220510896818993462124890472738694984769323698716068886745193057012811943430642366646091837561108162687936796823299767705815255181578427768061307290354919840683949388317852313255500361482131430137488582877970196536516803839211139492790968508269095773231100312182466822895779683752382008537434837173083611909767545379191434734806361489542919224380933936036537329432840742844554171617404889632642");
  EXPECT_THAT(
    [] { ln(-1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("ln(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (expected argument > 0)")
    )
  );
  EXPECT_THAT(
    [] { ln(1 + 1 / getLogTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("ln(1.000000045822646669622353709415408815898613765500353488264329323981919894425661334116853160738377638812261039732488498179824808352307447037898815525088532201374542092087564131091649058686865266222802076280363781214227501353870885297793500222131220890604473034380135820026326994006573795446534715804326943101207383563304855543660722772426251348416116578063065414910124850654381467307135951988430881088189721519153561219474933104692686102960898037082027031205071853361790551077182238717428066382127027) is undefined (underflow)")
    )
  );
  EXPECT_THAT(
    [] { ln(1 - 1 / getLogTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("ln(0.99999995417735333037764629058459118410138623449964651173567067601808010557433866588314683926162236118773896026751150182017519164769255296210118447491146779862545790791243586890835094131313473377719792371963621878577249864612911470220649977786877910939552696561986417997367300599342620455346528419567305689879261643669514445633927722757374865158388342193693458508987514934561853269286404801156911891181027848084643878052506689530731389703910196291797296879492814663820944892281776128257193361787297295) is undefined (underflow)")
    )
  );
  EXPECT_THAT(
    [] { ln(-1 + 1 / getLogTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("ln(-0.99999995417735333037764629058459118410138623449964651173567067601808010557433866588314683926162236118773896026751150182017519164769255296210118447491146779862545790791243586890835094131313473377719792371963621878577249864612911470220649977786877910939552696561986417997367300599342620455346528419567305689879261643669514445633927722757374865158388342193693458508987514934561853269286404801156911891181027848084643878052506689530731389703910196291797296879492814663820944892281776128257193361787297295) is undefined (expected argument > 0)")
    )
  );
  EXPECT_THAT(
    [] { ln(-1 - 1 / getLogTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("ln(-1.000000045822646669622353709415408815898613765500353488264329323981919894425661334116853160738377638812261039732488498179824808352307447037898815525088532201374542092087564131091649058686865266222802076280363781214227501353870885297793500222131220890604473034380135820026326994006573795446534715804326943101207383563304855543660722772426251348416116578063065414910124850654381467307135951988430881088189721519153561219474933104692686102960898037082027031205071853361790551077182238717428066382127027) is undefined (expected argument > 0)")
    )
  );
}

TEST(RealFunctionsTests, lbTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(lb(Real("1")).toString(), "0.0");
  EXPECT_EQ(lb(Real("2")).toString(), "1.0");
  EXPECT_EQ(lb(Real("3")).toString(), "1.5849625007211561814537389439478165087598144076924810604557526545410982277943585625222804749180882420909806624750591673437175524410609248221420839506216982994936575922385852344415825363027476853069780516875995544737266834624612364248850047581810676961316404807130823233281262445248670633898014837234235783662478390118977006466312634223363341821270106098049177472541357330110499026268818251703576994712157113638912494135752192998699040767081539505404488360050368231275419147491001732578668989256977448");
  EXPECT_EQ(lb(Real("1024")).toString(), "10.0");

  EXPECT_THAT(
    [] { lb(Real("0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("lb(0.0) is undefined (ln(0.0) is undefined (expected argument > 0))")
    )
  );
  EXPECT_THAT(
    [] { lb(Real("-0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("lb(-0.0) is undefined (ln(-0.0) is undefined (expected argument > 0))")
    )
  );
  EXPECT_THAT(
    [] { lb(Real("-1")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("lb(-1.0) is undefined (ln(-1.0) is undefined (expected argument > 0))")
    )
  );

  EXPECT_EQ(lb(getBottom()).toString(), "1660.2423390088468152391910752389223371556027033502350030047043970665552604033557193348632239845183566271017417710501538215097901794377254202764363841871643747071564808438403849686328703846578940097114426960217287346753381210056644885659785581770910105170063280253795447247762538890216319599066790175392754544932873241866224231658503043157397318916028330680138739335892411716116576564640798839083902475693032164084479471776090955137972737315592315237578699070714960186770111882960267580469773996621113");
  EXPECT_THAT(
    [] { lb(-getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("lb(-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (ln(-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (expected argument > 0))")
    )
  );
  EXPECT_EQ(lb(1 / getBottom()).toString(), "-1660.2423390088468152391910752389223371556027033502350030047043970665552604033557193348632239845183566271017417710501538215097901794377254202764363841871643747071564808438403849686328703846578940097114426960217287346753381210056644885659785581770910105170063280253795447247762538890216319599066790175392754544932873241866224231658503043157397318916028330680138739335892411716116576564640798839083902475693032164084479471776090955137972737315592315237578699070714960186770111882960267580469773996621113");
  EXPECT_THAT(
    [] { lb(-1 / getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("lb(-1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500) is undefined (ln(-1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500) is undefined (expected argument > 0))")
    )
  );
  EXPECT_EQ(lb(1 + 1 / getLogBottom()).toString(), "6.6830828388917342891547486506847285272697011778553511348949644332867998614145798830938470048136194213017431224868715797761885633680790132044146091615119170196741798630401321276786841802843498968365743316373147452925462901218524916301183034992001817086023359871860301036108309491023873401867078175761078204601368178509939844185624097243114009597752846308861275905256459124059713686286528167411921428262024218955687308981115116829854695701605260995123094905260651631487252496425326512975747703200977325*10^-8");
  EXPECT_EQ(lb(1 - 1 / getLogBottom()).toString(), "-6.6830831484762066454675431422618825159987009233331409228534171430721783908516912969136729509928481419301908889301013133376453055787330828035242245174918370788506914927006846997402561569218574136561328101264573366071228147749489667517185452979226874060919022014009523263275164170543945098746986850351969607585674398333075312204333527471490256380337562966263984228239648580231885737336077106126682033590185973637834381756120060255959619721822463124707428302867531505814243457204894530719616210924893046*10^-8");
  EXPECT_THAT(
    [] { lb(-1 + 1 / getLogBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("lb(-0.99999995367639865479840398110793812148401792786416808675087521847079195754501735137153438530303420213008606478125694539754248543964739938863243401184322641416881832389488161259082176504477814477347735994040454672676815374960260039669456418666964797812431671188765447397393828271073928924619040130107318237541321727720948669818883213669079345236500740924269857689003558427839418012998482472527595143278671958043481931273609653225179286820218023963231571599688035330704134226391385365761201908801781898) is undefined (ln(-0.99999995367639865479840398110793812148401792786416808675087521847079195754501735137153438530303420213008606478125694539754248543964739938863243401184322641416881832389488161259082176504477814477347735994040454672676815374960260039669456418666964797812431671188765447397393828271073928924619040130107318237541321727720948669818883213669079345236500740924269857689003558427839418012998482472527595143278671958043481931273609653225179286820218023963231571599688035330704134226391385365761201908801781898) is undefined (expected argument > 0))")
    )
  );
  EXPECT_THAT(
    [] { lb(-1 - 1 / getLogBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("lb(-1.000000046323601345201596018892061878515982072135831913249124781529208042454982648628465614696965797869913935218743054602457514560352600611367565988156773585831181676105118387409178234955221855226522640059595453273231846250397399603305435813330352021875683288112345526026061717289260710753809598698926817624586782722790513301811167863309206547634992590757301423109964415721605819870015175274724048567213280419565180687263903467748207131797819760367684284003119646692958657736086146342387980911982181) is undefined (ln(-1.000000046323601345201596018892061878515982072135831913249124781529208042454982648628465614696965797869913935218743054602457514560352600611367565988156773585831181676105118387409178234955221855226522640059595453273231846250397399603305435813330352021875683288112345526026061717289260710753809598698926817624586782722790513301811167863309206547634992590757301423109964415721605819870015175274724048567213280419565180687263903467748207131797819760367684284003119646692958657736086146342387980911982181) is undefined (expected argument > 0))")
    )
  );

  EXPECT_EQ(lb(getTop()).toString(), "1661.6850345306344141487530796177690746215158836948925002095220520038185509989931038272246710097629299710429990443367317181033697520479130844014839956432996829364738082384471341579821245656450941161111418270425586144696676643091196292534437222731085099151401430686452988712060138169216117489101036905404477911088920929597538663365923888861719817611791774685691023049143284296171501716483628778816866896852353629726107200682703242297950283551340834724294269534579127490555479536375902006763171420106197");
  EXPECT_THAT(
    [] { lb(-getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("lb(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (ln(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (expected argument > 0))")
    )
  );
  EXPECT_EQ(lb(1 / getTop()).toString(), "-1661.6850345306344141487530796177690746215158836948925002095220520038185509989931038272246710097629299710429990443367317181033697520479130844014839956432996829364738082384471341579821245656450941161111418270425586144696676643091196292534437222731085099151401430686452988712060138169216117489101036905404477911088920929597538663365923888861719817611791774685691023049143284296171501716483628778816866896852353629726107200682703242297950283551340834724294269534579127490555479536375902006763171420106197");
  EXPECT_THAT(
    [] { lb(-1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("lb(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (ln(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (expected argument > 0))")
    )
  );
  EXPECT_THAT(
    [] { lb(1 + 1 / getLogTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("lb(1.000000045822646669622353709415408815898613765500353488264329323981919894425661334116853160738377638812261039732488498179824808352307447037898815525088532201374542092087564131091649058686865266222802076280363781214227501353870885297793500222131220890604473034380135820026326994006573795446534715804326943101207383563304855543660722772426251348416116578063065414910124850654381467307135951988430881088189721519153561219474933104692686102960898037082027031205071853361790551077182238717428066382127027) is undefined (ln(1.000000045822646669622353709415408815898613765500353488264329323981919894425661334116853160738377638812261039732488498179824808352307447037898815525088532201374542092087564131091649058686865266222802076280363781214227501353870885297793500222131220890604473034380135820026326994006573795446534715804326943101207383563304855543660722772426251348416116578063065414910124850654381467307135951988430881088189721519153561219474933104692686102960898037082027031205071853361790551077182238717428066382127027) is undefined (underflow))")
    )
  );
  EXPECT_THAT(
    [] { lb(1 - 1 / getLogTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("lb(0.99999995417735333037764629058459118410138623449964651173567067601808010557433866588314683926162236118773896026751150182017519164769255296210118447491146779862545790791243586890835094131313473377719792371963621878577249864612911470220649977786877910939552696561986417997367300599342620455346528419567305689879261643669514445633927722757374865158388342193693458508987514934561853269286404801156911891181027848084643878052506689530731389703910196291797296879492814663820944892281776128257193361787297295) is undefined (ln(0.99999995417735333037764629058459118410138623449964651173567067601808010557433866588314683926162236118773896026751150182017519164769255296210118447491146779862545790791243586890835094131313473377719792371963621878577249864612911470220649977786877910939552696561986417997367300599342620455346528419567305689879261643669514445633927722757374865158388342193693458508987514934561853269286404801156911891181027848084643878052506689530731389703910196291797296879492814663820944892281776128257193361787297295) is undefined (underflow))")
    )
  );
  EXPECT_THAT(
    [] { lb(-1 + 1 / getLogTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("lb(-0.99999995417735333037764629058459118410138623449964651173567067601808010557433866588314683926162236118773896026751150182017519164769255296210118447491146779862545790791243586890835094131313473377719792371963621878577249864612911470220649977786877910939552696561986417997367300599342620455346528419567305689879261643669514445633927722757374865158388342193693458508987514934561853269286404801156911891181027848084643878052506689530731389703910196291797296879492814663820944892281776128257193361787297295) is undefined (ln(-0.99999995417735333037764629058459118410138623449964651173567067601808010557433866588314683926162236118773896026751150182017519164769255296210118447491146779862545790791243586890835094131313473377719792371963621878577249864612911470220649977786877910939552696561986417997367300599342620455346528419567305689879261643669514445633927722757374865158388342193693458508987514934561853269286404801156911891181027848084643878052506689530731389703910196291797296879492814663820944892281776128257193361787297295) is undefined (expected argument > 0))")
    )
  );
  EXPECT_THAT(
    [] { lb(-1 - 1 / getLogTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("lb(-1.000000045822646669622353709415408815898613765500353488264329323981919894425661334116853160738377638812261039732488498179824808352307447037898815525088532201374542092087564131091649058686865266222802076280363781214227501353870885297793500222131220890604473034380135820026326994006573795446534715804326943101207383563304855543660722772426251348416116578063065414910124850654381467307135951988430881088189721519153561219474933104692686102960898037082027031205071853361790551077182238717428066382127027) is undefined (ln(-1.000000045822646669622353709415408815898613765500353488264329323981919894425661334116853160738377638812261039732488498179824808352307447037898815525088532201374542092087564131091649058686865266222802076280363781214227501353870885297793500222131220890604473034380135820026326994006573795446534715804326943101207383563304855543660722772426251348416116578063065414910124850654381467307135951988430881088189721519153561219474933104692686102960898037082027031205071853361790551077182238717428066382127027) is undefined (expected argument > 0))")
    )
  );
}

TEST(RealFunctionsTests, lgTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(lg(Real("1")).toString(), "0.0");
  EXPECT_EQ(lg(Real("0.001")).toString(), "-3.0");
  EXPECT_EQ(lg(Real("1000")).toString(), "3.0");
  EXPECT_EQ(lg(Real("25")).toString(), "1.3979400086720376095725222105510139464636202370757829173791450777457836214511509810261454957636276559186310456171380092418104642377329529880006153325906088498709940714916131946763605313767941129976321942036428347656911209362761419072922306009595213783007750749191994733748107570423083053634346546320353476069144129847373649032981457220701061644284621638984199848009038243690805708299360702447477550154183417636180970020056567602790446469998643589641748853427426633159991941589803258308555502090114049");

  EXPECT_THAT(
    [] { lg(Real("0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("lg(0.0) is undefined (ln(0.0) is undefined (expected argument > 0))")
    )
  );
  EXPECT_THAT(
    [] { lg(Real("-0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("lg(-0.0) is undefined (ln(-0.0) is undefined (expected argument > 0))")
    )
  );
  EXPECT_THAT(
    [] { lg(Real("-1")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("lg(-1.0) is undefined (ln(-1.0) is undefined (expected argument > 0))")
    )
  );

  EXPECT_EQ(lg(getBottom()).toString(), "499.78274411299115434676719965223768779167964136920007055363841585463644188622791943555370510164980964264750094313258593253768816086436746615232975204548281091270192678941451207329501545599209700116287734424296607709230395802024565114215533908757411944516763884090982261616328224420567778290181253387292750617933539643330552558518205798043923795251523923586037612283521406459121448490318126006960906308176149951008770475545170983614291254760922234519816329245038107624609046278865956610110296462324552");
  EXPECT_THAT(
    [] { lg(-getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("lg(-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (ln(-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (expected argument > 0))")
    )
  );
  EXPECT_EQ(lg(1 / getBottom()).toString(), "-499.78274411299115434676719965223768779167964136920007055363841585463644188622791943555370510164980964264750094313258593253768816086436746615232975204548281091270192678941451207329501545599209700116287734424296607709230395802024565114215533908757411944516763884090982261616328224420567778290181253387292750617933539643330552558518205798043923795251523923586037612283521406459121448490318126006960906308176149951008770475545170983614291254760922234519816329245038107624609046278865956610110296462324552");
  EXPECT_THAT(
    [] { lg(-1 / getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("lg(-1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500) is undefined (ln(-1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500) is undefined (expected argument > 0))")
    )
  );
  EXPECT_EQ(lg(1 + 1 / getLogBottom()).toString(), "2.0118083980136059096853434888142725109436709718011389861452655487998101335198937186475792783475983528667713471278999353571427318335463536665832676784887325437368177755415090648923706314921768803261907182208662223893200401867605259641745584319375168426834845475247780539274153193313255028313714813446321763442399999146370680777253992458317214084017722141404310604446853968438354712208344696034596216350581382476247785306793448540127788042183387871859234405690320319579913363050300456144355260913054575*10^-8");
  EXPECT_EQ(lg(1 - 1 / getLogBottom()).toString(), "-2.0118084912078182807420902078090487438954699922096761156253211468848051193024573881935808149245464415884943909535208439584744424064895057343999409001554072702232573612470198517753848891829489035460711247341029104077303724685445729129086771709504291590342477175777030466488750254387650200689200176200847160261425426622753483111550954791817472467095433096890416721603648181690701011424585813302233944898337824051565095996050613509755257069316927468635539620462707852017840963058700239856708772770957763*10^-8");
  EXPECT_THAT(
    [] { lg(-1 + 1 / getLogBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("lg(-0.99999995367639865479840398110793812148401792786416808675087521847079195754501735137153438530303420213008606478125694539754248543964739938863243401184322641416881832389488161259082176504477814477347735994040454672676815374960260039669456418666964797812431671188765447397393828271073928924619040130107318237541321727720948669818883213669079345236500740924269857689003558427839418012998482472527595143278671958043481931273609653225179286820218023963231571599688035330704134226391385365761201908801781898) is undefined (ln(-0.99999995367639865479840398110793812148401792786416808675087521847079195754501735137153438530303420213008606478125694539754248543964739938863243401184322641416881832389488161259082176504477814477347735994040454672676815374960260039669456418666964797812431671188765447397393828271073928924619040130107318237541321727720948669818883213669079345236500740924269857689003558427839418012998482472527595143278671958043481931273609653225179286820218023963231571599688035330704134226391385365761201908801781898) is undefined (expected argument > 0))")
    )
  );
  EXPECT_THAT(
    [] { lg(-1 - 1 / getLogBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("lg(-1.000000046323601345201596018892061878515982072135831913249124781529208042454982648628465614696965797869913935218743054602457514560352600611367565988156773585831181676105118387409178234955221855226522640059595453273231846250397399603305435813330352021875683288112345526026061717289260710753809598698926817624586782722790513301811167863309206547634992590757301423109964415721605819870015175274724048567213280419565180687263903467748207131797819760367684284003119646692958657736086146342387980911982181) is undefined (ln(-1.000000046323601345201596018892061878515982072135831913249124781529208042454982648628465614696965797869913935218743054602457514560352600611367565988156773585831181676105118387409178234955221855226522640059595453273231846250397399603305435813330352021875683288112345526026061717289260710753809598698926817624586782722790513301811167863309206547634992590757301423109964415721605819870015175274724048567213280419565180687263903467748207131797819760367684284003119646692958657736086146342387980911982181) is undefined (expected argument > 0))")
    )
  );

  EXPECT_EQ(lg(getTop()).toString(), "500.21703873965932033446069388899443301000188758874338645068247369777978188276137722252688424605970600893853927714983535582557236730510225838524295217100484539293318342301289243646059775923458762067839867333175852316509178327044942829214965210822082429417197201185525689704910240757839537066890081621757756380437386048194814809511491445030505791198598921869543591521133770911428148229663487063107650428872664624111572569774068160311266584524855638648630118535214458717640520183965265359385275880778024");
  EXPECT_THAT(
    [] { lg(-getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("lg(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (ln(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (expected argument > 0))")
    )
  );
  EXPECT_EQ(lg(1 / getTop()).toString(), "-500.21703873965932033446069388899443301000188758874338645068247369777978188276137722252688424605970600893853927714983535582557236730510225838524295217100484539293318342301289243646059775923458762067839867333175852316509178327044942829214965210822082429417197201185525689704910240757839537066890081621757756380437386048194814809511491445030505791198598921869543591521133770911428148229663487063107650428872664624111572569774068160311266584524855638648630118535214458717640520183965265359385275880778024");
  EXPECT_THAT(
    [] { lg(-1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("lg(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (ln(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (expected argument > 0))")
    )
  );
  EXPECT_THAT(
    [] { lg(1 + 1 / getLogTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("lg(1.000000045822646669622353709415408815898613765500353488264329323981919894425661334116853160738377638812261039732488498179824808352307447037898815525088532201374542092087564131091649058686865266222802076280363781214227501353870885297793500222131220890604473034380135820026326994006573795446534715804326943101207383563304855543660722772426251348416116578063065414910124850654381467307135951988430881088189721519153561219474933104692686102960898037082027031205071853361790551077182238717428066382127027) is undefined (ln(1.000000045822646669622353709415408815898613765500353488264329323981919894425661334116853160738377638812261039732488498179824808352307447037898815525088532201374542092087564131091649058686865266222802076280363781214227501353870885297793500222131220890604473034380135820026326994006573795446534715804326943101207383563304855543660722772426251348416116578063065414910124850654381467307135951988430881088189721519153561219474933104692686102960898037082027031205071853361790551077182238717428066382127027) is undefined (underflow))")
    )
  );
  EXPECT_THAT(
    [] { lg(1 - 1 / getLogTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("lg(0.99999995417735333037764629058459118410138623449964651173567067601808010557433866588314683926162236118773896026751150182017519164769255296210118447491146779862545790791243586890835094131313473377719792371963621878577249864612911470220649977786877910939552696561986417997367300599342620455346528419567305689879261643669514445633927722757374865158388342193693458508987514934561853269286404801156911891181027848084643878052506689530731389703910196291797296879492814663820944892281776128257193361787297295) is undefined (ln(0.99999995417735333037764629058459118410138623449964651173567067601808010557433866588314683926162236118773896026751150182017519164769255296210118447491146779862545790791243586890835094131313473377719792371963621878577249864612911470220649977786877910939552696561986417997367300599342620455346528419567305689879261643669514445633927722757374865158388342193693458508987514934561853269286404801156911891181027848084643878052506689530731389703910196291797296879492814663820944892281776128257193361787297295) is undefined (underflow))")
    )
  );
  EXPECT_THAT(
    [] { lg(-1 + 1 / getLogTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("lg(-0.99999995417735333037764629058459118410138623449964651173567067601808010557433866588314683926162236118773896026751150182017519164769255296210118447491146779862545790791243586890835094131313473377719792371963621878577249864612911470220649977786877910939552696561986417997367300599342620455346528419567305689879261643669514445633927722757374865158388342193693458508987514934561853269286404801156911891181027848084643878052506689530731389703910196291797296879492814663820944892281776128257193361787297295) is undefined (ln(-0.99999995417735333037764629058459118410138623449964651173567067601808010557433866588314683926162236118773896026751150182017519164769255296210118447491146779862545790791243586890835094131313473377719792371963621878577249864612911470220649977786877910939552696561986417997367300599342620455346528419567305689879261643669514445633927722757374865158388342193693458508987514934561853269286404801156911891181027848084643878052506689530731389703910196291797296879492814663820944892281776128257193361787297295) is undefined (expected argument > 0))")
    )
  );
  EXPECT_THAT(
    [] { lg(-1 - 1 / getLogTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("lg(-1.000000045822646669622353709415408815898613765500353488264329323981919894425661334116853160738377638812261039732488498179824808352307447037898815525088532201374542092087564131091649058686865266222802076280363781214227501353870885297793500222131220890604473034380135820026326994006573795446534715804326943101207383563304855543660722772426251348416116578063065414910124850654381467307135951988430881088189721519153561219474933104692686102960898037082027031205071853361790551077182238717428066382127027) is undefined (ln(-1.000000045822646669622353709415408815898613765500353488264329323981919894425661334116853160738377638812261039732488498179824808352307447037898815525088532201374542092087564131091649058686865266222802076280363781214227501353870885297793500222131220890604473034380135820026326994006573795446534715804326943101207383563304855543660722772426251348416116578063065414910124850654381467307135951988430881088189721519153561219474933104692686102960898037082027031205071853361790551077182238717428066382127027) is undefined (expected argument > 0))")
    )
  );
}

TEST(RealFunctionsTests, sinTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(sin(Real("0")).toString(), "0.0");
  EXPECT_EQ(sin(Real("-0")).toString(), "-0.0");
  EXPECT_EQ(sin(Real("1")).toString(), "0.8414709848078965066525023216302989996225630607983710656727517099919104043912396689486397435430526958543490379079206742932591189209918988811934103277292124094807919558267666069999077640119784087827325663474848028702986561570179624553948935729246701270864862810533820305613772182038684496677616742662390133827533979567642555654779639897648243286902756964291206300583036515230312782552898532648513981934521359709559620621721148144417810576010756741366480550089167266058041400780623930703718779562612888");
  EXPECT_EQ(sin(Real("-1")).toString(), "-0.8414709848078965066525023216302989996225630607983710656727517099919104043912396689486397435430526958543490379079206742932591189209918988811934103277292124094807919558267666069999077640119784087827325663474848028702986561570179624553948935729246701270864862810533820305613772182038684496677616742662390133827533979567642555654779639897648243286902756964291206300583036515230312782552898532648513981934521359709559620621721148144417810576010756741366480550089167266058041400780623930703718779562612888");
  EXPECT_EQ(sin(Real("360")).toString(), "0.95891572341430650775887594775378440067396475320176419597230510239310187233155216762469333666238341968877803078186966928960032096690227561941454486085366726260909801244212617791982769634387261903781883823531474415994524980397676039997066747095237475703837143800063095336626267981859128776133587943412648564335693073303454697354580361100438284186802625914881351877222107015824075695678302538013095447706197595852901261436701189763894410700471281462208671109751813776339466816838916499612073892989487919");

  EXPECT_THAT(
    [] { sin(Real(2 * getPi())); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sin(6.2831853071795864769252867665590057683943387987502116419498891846156328125724179972560696506842341359642961730265646132941876892191011644634507188162569622349005682054038770422111192892458979098607639288576219513318668922569512964675735663305424038182912971338469206972209086532964267872145204982825474491740132126311763497630418419256585081834307287357851807200226610610976409330427682939038830232188661145407315191839061843722347638652235862102370961489247599254991347037715054497824558763660238983) is undefined (result underflow)")
    )
  );
  EXPECT_THAT(
    [] { sin(Real(-2 * getPi())); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sin(-6.2831853071795864769252867665590057683943387987502116419498891846156328125724179972560696506842341359642961730265646132941876892191011644634507188162569622349005682054038770422111192892458979098607639288576219513318668922569512964675735663305424038182912971338469206972209086532964267872145204982825474491740132126311763497630418419256585081834307287357851807200226610610976409330427682939038830232188661145407315191839061843722347638652235862102370961489247599254991347037715054497824558763660238983) is undefined (result underflow)")
    )
  );
  EXPECT_THAT(
    [] { sin(Real(getPi())); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sin(3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491) is undefined (result underflow)")
    )
  );
  EXPECT_THAT(
    [] { sin(Real(-getPi())); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sin(-3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491) is undefined (result underflow)")
    )
  );
  EXPECT_EQ(sin(Real(getPi() / 2)).toString(), "1.0");
  EXPECT_EQ(sin(Real(-getPi() / 2)).toString(), "-1.0");
  EXPECT_EQ(sin(Real(getPi() / 4)).toString(), "0.70710678118654752440084436210484903928483593768847403658833986899536623923105351942519376716382078636750692311545614851246241802792536860632206074854996791570661133296375279637789997525057639103028573505477998580298513726729843100736425870932044459930477616461524215435716072541988130181399762570399484362669827316590441482031030762917619752737287514387998086491778761016876592850567718730170424942358019344998534950240751527201389515822712391153424646845931079028923155579833435650650780928449361862");
  EXPECT_EQ(sin(Real(-getPi() / 4)).toString(), "-0.70710678118654752440084436210484903928483593768847403658833986899536623923105351942519376716382078636750692311545614851246241802792536860632206074854996791570661133296375279637789997525057639103028573505477998580298513726729843100736425870932044459930477616461524215435716072541988130181399762570399484362669827316590441482031030762917619752737287514387998086491778761016876592850567718730170424942358019344998534950240751527201389515822712391153424646845931079028923155579833435650650780928449361862");

  EXPECT_EQ(sin(getBottom()).toString(), "-0.98346869560902914062693555980250127530853789035666630941964154169814082834152103822955847548032315657788740242220954264252496013611890184217090501217407550546904780398084505101868282009740661708389019834794267475631391890239343293076379703900493697517424359285300058751616840343372688452565598267734289774019091766399087307968730200813762096382013163248558803477576627229107768823780068201793913943622856047279936459202691553762712831927884350588972037520019653237432848995971513618960476402769444879");
  EXPECT_EQ(sin(-getBottom()).toString(), "0.98346869560902914062693555980250127530853789035666630941964154169814082834152103822955847548032315657788740242220954264252496013611890184217090501217407550546904780398084505101868282009740661708389019834794267475631391890239343293076379703900493697517424359285300058751616840343372688452565598267734289774019091766399087307968730200813762096382013163248558803477576627229107768823780068201793913943622856047279936459202691553762712831927884350588972037520019653237432848995971513618960476402769444879");
  EXPECT_EQ(sin(1 / getBottom()).toString(), "1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500");
  EXPECT_EQ(sin(-1 / getBottom()).toString(), "-1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500");
  EXPECT_EQ(sin(1 + 1 / getBottom()).toString(), "0.84147098480789650665250232163029899962256306079837106567275170999191040439123966894863974354305269585434903790792067429325911892099189888119341032772921240948079195582676660699990776401197840878273256634748480287029865615701796245539489357292467012708648628105338203056137721820386844966776167426623901338275339795676425556547796398976482432869027569642912063005830365152303127825528985326485139819345213597095596206217211481444178105760107567413664805500891672660580414007806239307037187795626128881");
  EXPECT_EQ(sin(1 - 1 / getBottom()).toString(), "0.8414709848078965066525023216302989996225630607983710656727517099919104043912396689486397435430526958543490379079206742932591189209918988811934103277292124094807919558267666069999077640119784087827325663474848028702986561570179624553948935729246701270864862810533820305613772182038684496677616742662390133827533979567642555654779639897648243286902756964291206300583036515230312782552898532648513981934521359709559620621721148144417810576010756741366480550089167266058041400780623930703718779562612888");
  EXPECT_EQ(sin(-1 + 1 / getBottom()).toString(), "-0.8414709848078965066525023216302989996225630607983710656727517099919104043912396689486397435430526958543490379079206742932591189209918988811934103277292124094807919558267666069999077640119784087827325663474848028702986561570179624553948935729246701270864862810533820305613772182038684496677616742662390133827533979567642555654779639897648243286902756964291206300583036515230312782552898532648513981934521359709559620621721148144417810576010756741366480550089167266058041400780623930703718779562612888");
  EXPECT_EQ(sin(-1 - 1 / getBottom()).toString(), "-0.84147098480789650665250232163029899962256306079837106567275170999191040439123966894863974354305269585434903790792067429325911892099189888119341032772921240948079195582676660699990776401197840878273256634748480287029865615701796245539489357292467012708648628105338203056137721820386844966776167426623901338275339795676425556547796398976482432869027569642912063005830365152303127825528985326485139819345213597095596206217211481444178105760107567413664805500891672660580414007806239307037187795626128881");

  EXPECT_THAT(
    [] { sin(getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sin(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument overflow)")
    )
  );
  EXPECT_THAT(
    [] { sin(-getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sin(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument overflow)")
    )
  );
  EXPECT_THAT(
    [] { sin(1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sin(6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow)")
    )
  );
  EXPECT_THAT(
    [] { sin(-1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sin(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow)")
    )
  );
  EXPECT_EQ(sin(1 + 1 / getTop()).toString(), "0.84147098480789650665250232163029899962256306079837106567275170999191040439123966894863974354305269585434903790792067429325911892099189888119341032772921240948079195582676660699990776401197840878273256634748480287029865615701796245539489357292467012708648628105338203056137721820386844966776167426623901338275339795676425556547796398976482432869027569642912063005830365152303127825528985326485139819345213597095596206217211481444178105760107567413664805500891672660580414007806239307037187795626128881");
  EXPECT_EQ(sin(1 - 1 / getTop()).toString(), "0.8414709848078965066525023216302989996225630607983710656727517099919104043912396689486397435430526958543490379079206742932591189209918988811934103277292124094807919558267666069999077640119784087827325663474848028702986561570179624553948935729246701270864862810533820305613772182038684496677616742662390133827533979567642555654779639897648243286902756964291206300583036515230312782552898532648513981934521359709559620621721148144417810576010756741366480550089167266058041400780623930703718779562612888");
  EXPECT_EQ(sin(-1 + 1 / getTop()).toString(), "-0.8414709848078965066525023216302989996225630607983710656727517099919104043912396689486397435430526958543490379079206742932591189209918988811934103277292124094807919558267666069999077640119784087827325663474848028702986561570179624553948935729246701270864862810533820305613772182038684496677616742662390133827533979567642555654779639897648243286902756964291206300583036515230312782552898532648513981934521359709559620621721148144417810576010756741366480550089167266058041400780623930703718779562612888");
  EXPECT_EQ(sin(-1 - 1 / getTop()).toString(), "-0.84147098480789650665250232163029899962256306079837106567275170999191040439123966894863974354305269585434903790792067429325911892099189888119341032772921240948079195582676660699990776401197840878273256634748480287029865615701796245539489357292467012708648628105338203056137721820386844966776167426623901338275339795676425556547796398976482432869027569642912063005830365152303127825528985326485139819345213597095596206217211481444178105760107567413664805500891672660580414007806239307037187795626128881");
}

TEST(RealFunctionsTests, cosTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(cos(Real("0")).toString(), "1.0");
  EXPECT_EQ(cos(Real("-0")).toString(), "1.0");
  EXPECT_EQ(cos(Real("1")).toString(), "0.54030230586813971740093660744297660373231042061792222767009725538110039477447176451795185608718308934357173116003008909786063376002166345640651226541731858471797116447447949423311792455139325433594351775670289259637573615432754964175449177511513122273010063135707823223677140151746899593667873067422762024507763744067587498161784272021645585111563296889057108124272933169868524714568949043423754330944230240935962395831824547281736640780712434336217481003220271297578822917644683598726994264913443918");
  EXPECT_EQ(cos(Real("-1")).toString(), "0.54030230586813971740093660744297660373231042061792222767009725538110039477447176451795185608718308934357173116003008909786063376002166345640651226541731858471797116447447949423311792455139325433594351775670289259637573615432754964175449177511513122273010063135707823223677140151746899593667873067422762024507763744067587498161784272021645585111563296889057108124272933169868524714568949043423754330944230240935962395831824547281736640780712434336217481003220271297578822917644683598726994264913443918");
  EXPECT_EQ(cos(Real("125")).toString(), "0.78771451214423447462921467726566085443902399155278651945734350565151508650071466796046012998819530537913247408233058596748835815699856225018573130396740121910887953345238483506835226621728100197018195398650422386215489495273443848383144677431506778903258135280929055290871533015644884795860443216997870894673253673690210503795035903512795400064635918314237317783029884809120156764010545892718073460405049089393892131493855667255271056591535964817972992611733247628171649165107208037643806386267753876");

  EXPECT_EQ(cos(Real(2 * getPi())).toString(), "1.0");
  EXPECT_EQ(cos(Real(-2 * getPi())).toString(), "1.0");
  EXPECT_EQ(cos(Real(getPi())).toString(), "-1.0");
  EXPECT_EQ(cos(Real(-getPi())).toString(), "-1.0");
  EXPECT_THAT(
    [] { cos(Real(getPi() / 2)); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("cos(1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059746) is undefined (result underflow)")
    )
  );
  EXPECT_THAT(
    [] { cos(Real(-getPi() / 2)); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("cos(-1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059746) is undefined (result underflow)")
    )
  );
  EXPECT_EQ(cos(Real(getPi() / 4)).toString(), "0.70710678118654752440084436210484903928483593768847403658833986899536623923105351942519376716382078636750692311545614851246241802792536860632206074854996791570661133296375279637789997525057639103028573505477998580298513726729843100736425870932044459930477616461524215435716072541988130181399762570399484362669827316590441482031030762917619752737287514387998086491778761016876592850567718730170424942358019344998534950240751527201389515822712391153424646845931079028923155579833435650650780928449361862");
  EXPECT_EQ(cos(Real(-getPi() / 4)).toString(), "0.70710678118654752440084436210484903928483593768847403658833986899536623923105351942519376716382078636750692311545614851246241802792536860632206074854996791570661133296375279637789997525057639103028573505477998580298513726729843100736425870932044459930477616461524215435716072541988130181399762570399484362669827316590441482031030762917619752737287514387998086491778761016876592850567718730170424942358019344998534950240751527201389515822712391153424646845931079028923155579833435650650780928449361862");

  EXPECT_EQ(cos(getBottom()).toString(), "0.18107822828014080812607973994963809668022018011968409833373163784753628059485292302847692733882493201565592860971009452054722366667927461002984132146537414144521794805683267153319975296740790546732173708859161845231695829716519164490461156032970448655817132188042531338873192841891372222861405636027113743113787211291499008269618071877503842072971904820757006606986576614584311546515292403514735305130971875653866745656152313117710000358536699317727992252311639534399177421169797056773901970315909101");
  EXPECT_EQ(cos(-getBottom()).toString(), "0.18107822828014080812607973994963809668022018011968409833373163784753628059485292302847692733882493201565592860971009452054722366667927461002984132146537414144521794805683267153319975296740790546732173708859161845231695829716519164490461156032970448655817132188042531338873192841891372222861405636027113743113787211291499008269618071877503842072971904820757006606986576614584311546515292403514735305130971875653866745656152313117710000358536699317727992252311639534399177421169797056773901970315909101");
  EXPECT_EQ(cos(1 / getBottom()).toString(), "1.0");
  EXPECT_EQ(cos(-1 / getBottom()).toString(), "1.0");
  EXPECT_EQ(cos(1 + 1 / getBottom()).toString(), "0.54030230586813971740093660744297660373231042061792222767009725538110039477447176451795185608718308934357173116003008909786063376002166345640651226541731858471797116447447949423311792455139325433594351775670289259637573615432754964175449177511513122273010063135707823223677140151746899593667873067422762024507763744067587498161784272021645585111563296889057108124272933169868524714568949043423754330944230240935962395831824547281736640780712434336217481003220271297578822917644683598726994264913443917");
  EXPECT_EQ(cos(1 - 1 / getBottom()).toString(), "0.5403023058681397174009366074429766037323104206179222276700972553811003947744717645179518560871830893435717311600300890978606337600216634564065122654173185847179711644744794942331179245513932543359435177567028925963757361543275496417544917751151312227301006313570782322367714015174689959366787306742276202450776374406758749816178427202164558511156329688905710812427293316986852471456894904342375433094423024093596239583182454728173664078071243433621748100322027129757882291764468359872699426491344392");
  EXPECT_EQ(cos(-1 + 1 / getBottom()).toString(), "0.5403023058681397174009366074429766037323104206179222276700972553811003947744717645179518560871830893435717311600300890978606337600216634564065122654173185847179711644744794942331179245513932543359435177567028925963757361543275496417544917751151312227301006313570782322367714015174689959366787306742276202450776374406758749816178427202164558511156329688905710812427293316986852471456894904342375433094423024093596239583182454728173664078071243433621748100322027129757882291764468359872699426491344392");
  EXPECT_EQ(cos(-1 - 1 / getBottom()).toString(), "0.54030230586813971740093660744297660373231042061792222767009725538110039477447176451795185608718308934357173116003008909786063376002166345640651226541731858471797116447447949423311792455139325433594351775670289259637573615432754964175449177511513122273010063135707823223677140151746899593667873067422762024507763744067587498161784272021645585111563296889057108124272933169868524714568949043423754330944230240935962395831824547281736640780712434336217481003220271297578822917644683598726994264913443917");

  EXPECT_THAT(
    [] { cos(getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("cos(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument overflow)")
    )
  );
  EXPECT_THAT(
    [] { cos(-getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("cos(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument overflow)")
    )
  );
  EXPECT_EQ(cos(1 / getTop()).toString(), "1.0");
  EXPECT_EQ(cos(-1 / getTop()).toString(), "1.0");
  EXPECT_EQ(cos(1 + 1 / getTop()).toString(), "0.54030230586813971740093660744297660373231042061792222767009725538110039477447176451795185608718308934357173116003008909786063376002166345640651226541731858471797116447447949423311792455139325433594351775670289259637573615432754964175449177511513122273010063135707823223677140151746899593667873067422762024507763744067587498161784272021645585111563296889057108124272933169868524714568949043423754330944230240935962395831824547281736640780712434336217481003220271297578822917644683598726994264913443918");
  EXPECT_EQ(cos(1 - 1 / getTop()).toString(), "0.54030230586813971740093660744297660373231042061792222767009725538110039477447176451795185608718308934357173116003008909786063376002166345640651226541731858471797116447447949423311792455139325433594351775670289259637573615432754964175449177511513122273010063135707823223677140151746899593667873067422762024507763744067587498161784272021645585111563296889057108124272933169868524714568949043423754330944230240935962395831824547281736640780712434336217481003220271297578822917644683598726994264913443919");
  EXPECT_EQ(cos(-1 + 1 / getTop()).toString(), "0.54030230586813971740093660744297660373231042061792222767009725538110039477447176451795185608718308934357173116003008909786063376002166345640651226541731858471797116447447949423311792455139325433594351775670289259637573615432754964175449177511513122273010063135707823223677140151746899593667873067422762024507763744067587498161784272021645585111563296889057108124272933169868524714568949043423754330944230240935962395831824547281736640780712434336217481003220271297578822917644683598726994264913443919");
  EXPECT_EQ(cos(-1 - 1 / getTop()).toString(), "0.54030230586813971740093660744297660373231042061792222767009725538110039477447176451795185608718308934357173116003008909786063376002166345640651226541731858471797116447447949423311792455139325433594351775670289259637573615432754964175449177511513122273010063135707823223677140151746899593667873067422762024507763744067587498161784272021645585111563296889057108124272933169868524714568949043423754330944230240935962395831824547281736640780712434336217481003220271297578822917644683598726994264913443918");
}

TEST(RealFunctionsTests, tanTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(tan(Real("0")).toString(), "0.0");
  EXPECT_EQ(tan(Real("-0")).toString(), "-0.0");
  EXPECT_EQ(tan(Real("1")).toString(), "1.5574077246549022305069748074583601730872507723815200383839466056988613971517272895550999652022429838046338214117481666133235546181245589376060716845489044392935860431671479080368246132747069555973416406107755352473025067968505070413523851449176214816275700278860224507720140161857721306739416643223690166756717950962610882330224852131148350591629692587616111732650100459456348215643353850532597808631549824289061892210758848878924221385209053656104434472362861925446578778273514850773908880700372159");
  EXPECT_EQ(tan(Real("-1")).toString(), "-1.5574077246549022305069748074583601730872507723815200383839466056988613971517272895550999652022429838046338214117481666133235546181245589376060716845489044392935860431671479080368246132747069555973416406107755352473025067968505070413523851449176214816275700278860224507720140161857721306739416643223690166756717950962610882330224852131148350591629692587616111732650100459456348215643353850532597808631549824289061892210758848878924221385209053656104434472362861925446578778273514850773908880700372159");
  EXPECT_EQ(tan(Real("-10")).toString(), "-0.6483608274590866712591249330098086768168743429837249756336279673958556003746239008717172062971522861549649082745628323881247057768331995554482067466781684083012928476313833274987342947597860101498990855080324569905070116199321918608717812524808937688710576705226811315614415204550320168972347982491031856202182645398325093913761463643961876140274925792594521384137730587973600612277350961593186576249726202766060828898554007609573802669631814961066246743477343275986185253199041641032488778055939355");
  EXPECT_EQ(tan(Real("1.5")).toString(), "14.101419947171719387646083651987756445659543577235861866123267586089696270414155268648702926309442287045867838594565919691699004491669865025264248980039061351918594865941647830085172090316199132420462962006307262522713747887816074895835112885636990533301440984006371447953191752413056040636010883158885875789200937415934573118249197536454626507188777255849020779992691101711887207194991636234000277717211545383470167900668346883508414041371529451749917009685422130690021955751283209276658434501266213");

  EXPECT_THAT(
    [] { tan(Real(2 * getPi())); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("tan(6.2831853071795864769252867665590057683943387987502116419498891846156328125724179972560696506842341359642961730265646132941876892191011644634507188162569622349005682054038770422111192892458979098607639288576219513318668922569512964675735663305424038182912971338469206972209086532964267872145204982825474491740132126311763497630418419256585081834307287357851807200226610610976409330427682939038830232188661145407315191839061843722347638652235862102370961489247599254991347037715054497824558763660238983) is undefined (result underflow)")
    )
  );
  EXPECT_THAT(
    [] { tan(Real(-2 * getPi())); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("tan(-6.2831853071795864769252867665590057683943387987502116419498891846156328125724179972560696506842341359642961730265646132941876892191011644634507188162569622349005682054038770422111192892458979098607639288576219513318668922569512964675735663305424038182912971338469206972209086532964267872145204982825474491740132126311763497630418419256585081834307287357851807200226610610976409330427682939038830232188661145407315191839061843722347638652235862102370961489247599254991347037715054497824558763660238983) is undefined (result underflow)")
    )
  );
  EXPECT_THAT(
    [] { tan(Real(getPi())); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("tan(3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491) is undefined (result underflow)")
    )
  );
  EXPECT_THAT(
    [] { tan(Real(-getPi())); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("tan(-3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491) is undefined (result underflow)")
    )
  );
  EXPECT_THAT(
    [] { tan(Real(getPi() / 2)); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("tan(1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059746) is undefined (result overflow)")
    )
  );
  EXPECT_THAT(
    [] { tan(Real(-getPi() / 2)); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("tan(-1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059746) is undefined (result overflow)")
    )
  );
  EXPECT_EQ(tan(Real(getPi() / 4)).toString(), "1.0");
  EXPECT_EQ(tan(Real(-getPi() / 4)).toString(), "-1.0");

  EXPECT_EQ(tan(getBottom()).toString(), "-5.4311813460397547587447626770341529596318481084609222513383566349634405846754861155341663030985082767329410852819272956220065758125013239154998142654888199376669218829383175606254107298040562405258471241951475616978001604758520322879113716208185098017287396820886853793727895613451789889314372167107893444667693830431676291482786421428868633758769942810198298654383034764282104423943865423031730216183810899862386979444690387492101492614503609057506161758460060673155113790113421825914100376792659807");
  EXPECT_EQ(tan(-getBottom()).toString(), "5.4311813460397547587447626770341529596318481084609222513383566349634405846754861155341663030985082767329410852819272956220065758125013239154998142654888199376669218829383175606254107298040562405258471241951475616978001604758520322879113716208185098017287396820886853793727895613451789889314372167107893444667693830431676291482786421428868633758769942810198298654383034764282104423943865423031730216183810899862386979444690387492101492614503609057506161758460060673155113790113421825914100376792659807");
  EXPECT_EQ(tan(1 / getBottom()).toString(), "1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500");
  EXPECT_EQ(tan(-1 / getBottom()).toString(), "-1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500");
  EXPECT_EQ(tan(1 + 1 / getBottom()).toString(), "1.557407724654902230506974807458360173087250772381520038383946605698861397151727289555099965202242983804633821411748166613323554618124558937606071684548904439293586043167147908036824613274706955597341640610775535247302506796850507041352385144917621481627570027886022450772014016185772130673941664322369016675671795096261088233022485213114835059162969258761611173265010045945634821564335385053259780863154982428906189221075884887892422138520905365610443447236286192544657877827351485077390888070037216");
  EXPECT_EQ(tan(1 - 1 / getBottom()).toString(), "1.5574077246549022305069748074583601730872507723815200383839466056988613971517272895550999652022429838046338214117481666133235546181245589376060716845489044392935860431671479080368246132747069555973416406107755352473025067968505070413523851449176214816275700278860224507720140161857721306739416643223690166756717950962610882330224852131148350591629692587616111732650100459456348215643353850532597808631549824289061892210758848878924221385209053656104434472362861925446578778273514850773908880700372159");
  EXPECT_EQ(tan(-1 + 1 / getBottom()).toString(), "-1.5574077246549022305069748074583601730872507723815200383839466056988613971517272895550999652022429838046338214117481666133235546181245589376060716845489044392935860431671479080368246132747069555973416406107755352473025067968505070413523851449176214816275700278860224507720140161857721306739416643223690166756717950962610882330224852131148350591629692587616111732650100459456348215643353850532597808631549824289061892210758848878924221385209053656104434472362861925446578778273514850773908880700372159");
  EXPECT_EQ(tan(-1 - 1 / getBottom()).toString(), "-1.557407724654902230506974807458360173087250772381520038383946605698861397151727289555099965202242983804633821411748166613323554618124558937606071684548904439293586043167147908036824613274706955597341640610775535247302506796850507041352385144917621481627570027886022450772014016185772130673941664322369016675671795096261088233022485213114835059162969258761611173265010045945634821564335385053259780863154982428906189221075884887892422138520905365610443447236286192544657877827351485077390888070037216");

  EXPECT_THAT(
    [] { tan(getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("tan(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument overflow)")
    )
  );
  EXPECT_THAT(
    [] { tan(-getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("tan(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument overflow)")
    )
  );
  EXPECT_THAT(
    [] { tan(1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("tan(6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow)")
    )
  );
  EXPECT_THAT(
    [] { tan(-1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("tan(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow)")
    )
  );
  EXPECT_EQ(tan(1 + 1 / getTop()).toString(), "1.5574077246549022305069748074583601730872507723815200383839466056988613971517272895550999652022429838046338214117481666133235546181245589376060716845489044392935860431671479080368246132747069555973416406107755352473025067968505070413523851449176214816275700278860224507720140161857721306739416643223690166756717950962610882330224852131148350591629692587616111732650100459456348215643353850532597808631549824289061892210758848878924221385209053656104434472362861925446578778273514850773908880700372159");
  EXPECT_EQ(tan(1 - 1 / getTop()).toString(), "1.5574077246549022305069748074583601730872507723815200383839466056988613971517272895550999652022429838046338214117481666133235546181245589376060716845489044392935860431671479080368246132747069555973416406107755352473025067968505070413523851449176214816275700278860224507720140161857721306739416643223690166756717950962610882330224852131148350591629692587616111732650100459456348215643353850532597808631549824289061892210758848878924221385209053656104434472362861925446578778273514850773908880700372159");
  EXPECT_EQ(tan(-1 + 1 / getTop()).toString(), "-1.5574077246549022305069748074583601730872507723815200383839466056988613971517272895550999652022429838046338214117481666133235546181245589376060716845489044392935860431671479080368246132747069555973416406107755352473025067968505070413523851449176214816275700278860224507720140161857721306739416643223690166756717950962610882330224852131148350591629692587616111732650100459456348215643353850532597808631549824289061892210758848878924221385209053656104434472362861925446578778273514850773908880700372159");
  EXPECT_EQ(tan(-1 - 1 / getTop()).toString(), "-1.5574077246549022305069748074583601730872507723815200383839466056988613971517272895550999652022429838046338214117481666133235546181245589376060716845489044392935860431671479080368246132747069555973416406107755352473025067968505070413523851449176214816275700278860224507720140161857721306739416643223690166756717950962610882330224852131148350591629692587616111732650100459456348215643353850532597808631549824289061892210758848878924221385209053656104434472362861925446578778273514850773908880700372159");
}

TEST(RealFunctionsTests, cotTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(cot(Real("1")).toString(), "0.64209261593433070300641998659426562023027811391817137910116228042627685683916467219848291976019680465814306596047141573918356963493705933122378784310056202796590177952583993144431226921022120997092394574813060354777658685526661570956826754318872654659780710610492629489626709295081160952483427016354137699541561458952860701107858227259376088670827067970590687137491185081969260425814554198558997437568690607879275252280812126851999661677146531833095334863246223721746553979982097961711441872912451219");
  EXPECT_EQ(cot(Real("-1")).toString(), "-0.64209261593433070300641998659426562023027811391817137910116228042627685683916467219848291976019680465814306596047141573918356963493705933122378784310056202796590177952583993144431226921022120997092394574813060354777658685526661570956826754318872654659780710610492629489626709295081160952483427016354137699541561458952860701107858227259376088670827067970590687137491185081969260425814554198558997437568690607879275252280812126851999661677146531833095334863246223721746553979982097961711441872912451219");
  EXPECT_EQ(cot(Real("200")).toString(), "-0.55787150213477006971046091195634798429557648836442892718891989460860978240822024024667631450915451073774660263791236163592328009778534581106986084480350539383783137442829604976008950393385033137664222291196435800801798666975792079027585757253905954498091388828903280740148427025875009780214237562977529275111353591152602195933083396628582325080994878394128853394424914997962035967037148064659763141601517052421951131036455074413807404136589615370376036685512143765315739842723268204732900903332822869");
  EXPECT_EQ(cot(Real("0.001")).toString(), "999.99966666664444444232804211640209502431508213496869579304205077674381954644639520634408395164810974790187059748663056319413799052324462182627171056687766083031520368701013112433153015271276878401509116019338890857459742077956424095491422840422498363560795969002271508729354091645914312319141941002918853623649271992390238327218620139099559359347286220707598821816371457779702994485393706092219607511288539620817165843202653888983899420142454517047661478883062764207608764656613887179725266038933487");

  EXPECT_THAT(
    [] { cot(Real("0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("cot(0.0) is undefined (div(1.0, 0.0) is undefined (division by zero))")
    )
  );
  EXPECT_THAT(
    [] { cot(Real("-0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("cot(-0.0) is undefined (div(1.0, -0.0) is undefined (division by zero))")
    )
  );

  EXPECT_THAT(
    [] { cot(Real(2 * getPi())); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("cot(6.2831853071795864769252867665590057683943387987502116419498891846156328125724179972560696506842341359642961730265646132941876892191011644634507188162569622349005682054038770422111192892458979098607639288576219513318668922569512964675735663305424038182912971338469206972209086532964267872145204982825474491740132126311763497630418419256585081834307287357851807200226610610976409330427682939038830232188661145407315191839061843722347638652235862102370961489247599254991347037715054497824558763660238983) is undefined (tan(6.2831853071795864769252867665590057683943387987502116419498891846156328125724179972560696506842341359642961730265646132941876892191011644634507188162569622349005682054038770422111192892458979098607639288576219513318668922569512964675735663305424038182912971338469206972209086532964267872145204982825474491740132126311763497630418419256585081834307287357851807200226610610976409330427682939038830232188661145407315191839061843722347638652235862102370961489247599254991347037715054497824558763660238983) is undefined (result underflow))")
    )
  );
  EXPECT_THAT(
    [] { cot(Real(-2 * getPi())); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("cot(-6.2831853071795864769252867665590057683943387987502116419498891846156328125724179972560696506842341359642961730265646132941876892191011644634507188162569622349005682054038770422111192892458979098607639288576219513318668922569512964675735663305424038182912971338469206972209086532964267872145204982825474491740132126311763497630418419256585081834307287357851807200226610610976409330427682939038830232188661145407315191839061843722347638652235862102370961489247599254991347037715054497824558763660238983) is undefined (tan(-6.2831853071795864769252867665590057683943387987502116419498891846156328125724179972560696506842341359642961730265646132941876892191011644634507188162569622349005682054038770422111192892458979098607639288576219513318668922569512964675735663305424038182912971338469206972209086532964267872145204982825474491740132126311763497630418419256585081834307287357851807200226610610976409330427682939038830232188661145407315191839061843722347638652235862102370961489247599254991347037715054497824558763660238983) is undefined (result underflow))")
    )
  );
  EXPECT_THAT(
    [] { cot(Real(getPi())); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("cot(3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491) is undefined (tan(3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491) is undefined (result underflow))")
    )
  );
  EXPECT_THAT(
    [] { cot(Real(-getPi())); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("cot(-3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491) is undefined (tan(-3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491) is undefined (result underflow))")
    )
  );
  EXPECT_THAT(
    [] { cot(Real(getPi() / 2)); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("cot(1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059746) is undefined (tan(1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059746) is undefined (result overflow))")
    )
  );
  EXPECT_THAT(
    [] { cot(Real(-getPi() / 2)); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("cot(-1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059746) is undefined (tan(-1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059746) is undefined (result overflow))")
    )
  );
  EXPECT_EQ(cot(Real(getPi() / 4)).toString(), "1.0");
  EXPECT_EQ(cot(Real(-getPi() / 4)).toString(), "-1.0");

  EXPECT_EQ(cot(getBottom()).toString(), "-0.18412200519306325407016667669326355916639152669105496672481910174237578167454000191529188464337708129186521629316512830967379465496878179090856555761165685637252528026613210487863729027780010442269847000568542919990903149267916072258207027621895628215541812447287541118888490877686060026532959493627918857475027913676595229078710637701585879757478815591944506850808282759560215986868950156570451221542112525396565833442169756353657878534922198274092733651818614758864926560243915837935991441192773878");
  EXPECT_EQ(cot(-getBottom()).toString(), "0.18412200519306325407016667669326355916639152669105496672481910174237578167454000191529188464337708129186521629316512830967379465496878179090856555761165685637252528026613210487863729027780010442269847000568542919990903149267916072258207027621895628215541812447287541118888490877686060026532959493627918857475027913676595229078710637701585879757478815591944506850808282759560215986868950156570451221542112525396565833442169756353657878534922198274092733651818614758864926560243915837935991441192773878");
  EXPECT_EQ(cot(1 / getBottom()).toString(), "60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0");
  EXPECT_EQ(cot(-1 / getBottom()).toString(), "-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0");
  EXPECT_EQ(cot(1 + 1 / getBottom()).toString(), "0.64209261593433070300641998659426562023027811391817137910116228042627685683916467219848291976019680465814306596047141573918356963493705933122378784310056202796590177952583993144431226921022120997092394574813060354777658685526661570956826754318872654659780710610492629489626709295081160952483427016354137699541561458952860701107858227259376088670827067970590687137491185081969260425814554198558997437568690607879275252280812126851999661677146531833095334863246223721746553979982097961711441872912451217");
  EXPECT_EQ(cot(1 - 1 / getBottom()).toString(), "0.64209261593433070300641998659426562023027811391817137910116228042627685683916467219848291976019680465814306596047141573918356963493705933122378784310056202796590177952583993144431226921022120997092394574813060354777658685526661570956826754318872654659780710610492629489626709295081160952483427016354137699541561458952860701107858227259376088670827067970590687137491185081969260425814554198558997437568690607879275252280812126851999661677146531833095334863246223721746553979982097961711441872912451222");
  EXPECT_EQ(cot(-1 + 1 / getBottom()).toString(), "-0.64209261593433070300641998659426562023027811391817137910116228042627685683916467219848291976019680465814306596047141573918356963493705933122378784310056202796590177952583993144431226921022120997092394574813060354777658685526661570956826754318872654659780710610492629489626709295081160952483427016354137699541561458952860701107858227259376088670827067970590687137491185081969260425814554198558997437568690607879275252280812126851999661677146531833095334863246223721746553979982097961711441872912451222");
  EXPECT_EQ(cot(-1 - 1 / getBottom()).toString(), "-0.64209261593433070300641998659426562023027811391817137910116228042627685683916467219848291976019680465814306596047141573918356963493705933122378784310056202796590177952583993144431226921022120997092394574813060354777658685526661570956826754318872654659780710610492629489626709295081160952483427016354137699541561458952860701107858227259376088670827067970590687137491185081969260425814554198558997437568690607879275252280812126851999661677146531833095334863246223721746553979982097961711441872912451217");

  EXPECT_THAT(
    [] { cot(getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("cot(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (tan(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument overflow))")
    )
  );
  EXPECT_THAT(
    [] { cot(-getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("cot(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (tan(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument overflow))")
    )
  );
  EXPECT_THAT(
    [] { cot(1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("cot(6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (tan(6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow))")
    )
  );
  EXPECT_THAT(
    [] { cot(-1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("cot(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (tan(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow))")
    )
  );
  EXPECT_EQ(cot(1 + 1 / getTop()).toString(), "0.64209261593433070300641998659426562023027811391817137910116228042627685683916467219848291976019680465814306596047141573918356963493705933122378784310056202796590177952583993144431226921022120997092394574813060354777658685526661570956826754318872654659780710610492629489626709295081160952483427016354137699541561458952860701107858227259376088670827067970590687137491185081969260425814554198558997437568690607879275252280812126851999661677146531833095334863246223721746553979982097961711441872912451218");
  EXPECT_EQ(cot(1 - 1 / getTop()).toString(), "0.6420926159343307030064199865942656202302781139181713791011622804262768568391646721984829197601968046581430659604714157391835696349370593312237878431005620279659017795258399314443122692102212099709239457481306035477765868552666157095682675431887265465978071061049262948962670929508116095248342701635413769954156145895286070110785822725937608867082706797059068713749118508196926042581455419855899743756869060787927525228081212685199966167714653183309533486324622372174655397998209796171144187291245122");
  EXPECT_EQ(cot(-1 + 1 / getTop()).toString(), "-0.6420926159343307030064199865942656202302781139181713791011622804262768568391646721984829197601968046581430659604714157391835696349370593312237878431005620279659017795258399314443122692102212099709239457481306035477765868552666157095682675431887265465978071061049262948962670929508116095248342701635413769954156145895286070110785822725937608867082706797059068713749118508196926042581455419855899743756869060787927525228081212685199966167714653183309533486324622372174655397998209796171144187291245122");
  EXPECT_EQ(cot(-1 - 1 / getTop()).toString(), "-0.64209261593433070300641998659426562023027811391817137910116228042627685683916467219848291976019680465814306596047141573918356963493705933122378784310056202796590177952583993144431226921022120997092394574813060354777658685526661570956826754318872654659780710610492629489626709295081160952483427016354137699541561458952860701107858227259376088670827067970590687137491185081969260425814554198558997437568690607879275252280812126851999661677146531833095334863246223721746553979982097961711441872912451218");
}

TEST(RealFunctionsTests, secTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(sec(Real("0")).toString(), "1.0");
  EXPECT_EQ(sec(Real("-0")).toString(), "1.0");
  EXPECT_EQ(sec(Real("1")).toString(), "1.8508157176809256179117532413986501934703966550940092988351582778588154112615967059218414132873066711491035115807339528416408998731176774131560787241383862147409231241515235786388237571054049733204438514990354855937330333279994572038442605499267955577813651494388974489708121098698689024822929458998871134135427663188500839953123828815800381513006621410411846961570477808388478499442707545318664792285082946656651090325360041775536641555012184458039002171415610374409790953100073117119984608557958766");
  EXPECT_EQ(sec(Real("-1")).toString(), "1.8508157176809256179117532413986501934703966550940092988351582778588154112615967059218414132873066711491035115807339528416408998731176774131560787241383862147409231241515235786388237571054049733204438514990354855937330333279994572038442605499267955577813651494388974489708121098698689024822929458998871134135427663188500839953123828815800381513006621410411846961570477808388478499442707545318664792285082946656651090325360041775536641555012184458039002171415610374409790953100073117119984608557958766");
  EXPECT_EQ(sec(Real("1.6")).toString(), "-34.247135610018689205295461483291306219436082882081545055042205706353264742234616759766841076191473839409664538611734617925195701220366610832263260617917260666538563185430899075936508430636255904019861473560275218809871596204265030719512813134685457060746391560781480085081537225093306444179331910946860689431289023477284569340963085841852135429061810527466364052287322154566699315157860608492031102930268932110820811414857180989285521966142672614977651216298392520847891294180247230071394631737507323");
  EXPECT_EQ(sec(Real("125")).toString(), "1.2694954638805676703376706923632363680417203139865889801435769773818587224340106180842561778627398594296328675156647915025175388802644283560611677887547991438323525363695731878072183300046296268565249875778407154113058071105022718291605450833897545964022288687132708562009303297085706313043356191448387819176502699366292607471598837815123627568762349266196564992265112706988801993419761704140701407040679260548618434002889725490991259085916154432876282144381225020401674602917107148114699610840240977");

  EXPECT_EQ(sec(Real(2 * getPi())).toString(), "1.0");
  EXPECT_EQ(sec(Real(-2 * getPi())).toString(), "1.0");
  EXPECT_EQ(sec(Real(getPi())).toString(), "-1.0");
  EXPECT_EQ(sec(Real(-getPi())).toString(), "-1.0");
  EXPECT_THAT(
    [] { sec(Real(getPi() / 2)); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sec(1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059746) is undefined (cos(1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059746) is undefined (result underflow))")
    )
  );
  EXPECT_THAT(
    [] { sec(Real(-getPi() / 2)); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sec(-1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059746) is undefined (cos(-1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059746) is undefined (result underflow))")
    )
  );
  EXPECT_EQ(sec(Real(getPi() / 4)).toString(), "1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727350138462309122970249248360558507372126441214970999358314132226659275055927557999505011527820605714701095599716059702745345968620147285174186408891986095523292304843087143214508397626036279952514079896872533965463318088296406206152583523950547457502877599617298355752203375318570113543746034084988471603868999706990048150305440277903164542478230684929369186215805784631115966687130130156185689872372");
  EXPECT_EQ(sec(Real(-getPi() / 4)).toString(), "1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727350138462309122970249248360558507372126441214970999358314132226659275055927557999505011527820605714701095599716059702745345968620147285174186408891986095523292304843087143214508397626036279952514079896872533965463318088296406206152583523950547457502877599617298355752203375318570113543746034084988471603868999706990048150305440277903164542478230684929369186215805784631115966687130130156185689872372");

  EXPECT_EQ(sec(getBottom()).toString(), "5.5224750622859495465964662921146893135433520038993227250524960754335636816850909427543118213846078297629438197508143277558281878898204929639582661981607948956934846217838693173987993735096951003095464182896479996883696138243219483926647052470306989426491643011782181267644463988552115383650445030020964010481643621860143724117293706875692478335707778003337790738930966248644458916757094723063555531952328900856966235191908206293164456530597523283812670000850370381280570127286697753503335814392062378");
  EXPECT_EQ(sec(-getBottom()).toString(), "5.5224750622859495465964662921146893135433520038993227250524960754335636816850909427543118213846078297629438197508143277558281878898204929639582661981607948956934846217838693173987993735096951003095464182896479996883696138243219483926647052470306989426491643011782181267644463988552115383650445030020964010481643621860143724117293706875692478335707778003337790738930966248644458916757094723063555531952328900856966235191908206293164456530597523283812670000850370381280570127286697753503335814392062378");
  EXPECT_EQ(sec(1 / getBottom()).toString(), "1.0");
  EXPECT_EQ(sec(-1 / getBottom()).toString(), "1.0");
  EXPECT_EQ(sec(1 + 1 / getBottom()).toString(), "1.8508157176809256179117532413986501934703966550940092988351582778588154112615967059218414132873066711491035115807339528416408998731176774131560787241383862147409231241515235786388237571054049733204438514990354855937330333279994572038442605499267955577813651494388974489708121098698689024822929458998871134135427663188500839953123828815800381513006621410411846961570477808388478499442707545318664792285082946656651090325360041775536641555012184458039002171415610374409790953100073117119984608557958767");
  EXPECT_EQ(sec(1 - 1 / getBottom()).toString(), "1.8508157176809256179117532413986501934703966550940092988351582778588154112615967059218414132873066711491035115807339528416408998731176774131560787241383862147409231241515235786388237571054049733204438514990354855937330333279994572038442605499267955577813651494388974489708121098698689024822929458998871134135427663188500839953123828815800381513006621410411846961570477808388478499442707545318664792285082946656651090325360041775536641555012184458039002171415610374409790953100073117119984608557958766");
  EXPECT_EQ(sec(-1 + 1 / getBottom()).toString(), "1.8508157176809256179117532413986501934703966550940092988351582778588154112615967059218414132873066711491035115807339528416408998731176774131560787241383862147409231241515235786388237571054049733204438514990354855937330333279994572038442605499267955577813651494388974489708121098698689024822929458998871134135427663188500839953123828815800381513006621410411846961570477808388478499442707545318664792285082946656651090325360041775536641555012184458039002171415610374409790953100073117119984608557958766");
  EXPECT_EQ(sec(-1 - 1 / getBottom()).toString(), "1.8508157176809256179117532413986501934703966550940092988351582778588154112615967059218414132873066711491035115807339528416408998731176774131560787241383862147409231241515235786388237571054049733204438514990354855937330333279994572038442605499267955577813651494388974489708121098698689024822929458998871134135427663188500839953123828815800381513006621410411846961570477808388478499442707545318664792285082946656651090325360041775536641555012184458039002171415610374409790953100073117119984608557958767");

  EXPECT_THAT(
    [] { sec(getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sec(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (cos(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument overflow))")
    )
  );
  EXPECT_THAT(
    [] { sec(-getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sec(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (cos(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument overflow))")
    )
  );
  EXPECT_EQ(sec(1 / getTop()).toString(), "1.0");
  EXPECT_EQ(sec(-1 / getTop()).toString(), "1.0");
  EXPECT_EQ(sec(1 + 1 / getTop()).toString(), "1.8508157176809256179117532413986501934703966550940092988351582778588154112615967059218414132873066711491035115807339528416408998731176774131560787241383862147409231241515235786388237571054049733204438514990354855937330333279994572038442605499267955577813651494388974489708121098698689024822929458998871134135427663188500839953123828815800381513006621410411846961570477808388478499442707545318664792285082946656651090325360041775536641555012184458039002171415610374409790953100073117119984608557958766");
  EXPECT_EQ(sec(1 - 1 / getTop()).toString(), "1.8508157176809256179117532413986501934703966550940092988351582778588154112615967059218414132873066711491035115807339528416408998731176774131560787241383862147409231241515235786388237571054049733204438514990354855937330333279994572038442605499267955577813651494388974489708121098698689024822929458998871134135427663188500839953123828815800381513006621410411846961570477808388478499442707545318664792285082946656651090325360041775536641555012184458039002171415610374409790953100073117119984608557958766");
  EXPECT_EQ(sec(-1 + 1 / getTop()).toString(), "1.8508157176809256179117532413986501934703966550940092988351582778588154112615967059218414132873066711491035115807339528416408998731176774131560787241383862147409231241515235786388237571054049733204438514990354855937330333279994572038442605499267955577813651494388974489708121098698689024822929458998871134135427663188500839953123828815800381513006621410411846961570477808388478499442707545318664792285082946656651090325360041775536641555012184458039002171415610374409790953100073117119984608557958766");
  EXPECT_EQ(sec(-1 - 1 / getTop()).toString(), "1.8508157176809256179117532413986501934703966550940092988351582778588154112615967059218414132873066711491035115807339528416408998731176774131560787241383862147409231241515235786388237571054049733204438514990354855937330333279994572038442605499267955577813651494388974489708121098698689024822929458998871134135427663188500839953123828815800381513006621410411846961570477808388478499442707545318664792285082946656651090325360041775536641555012184458039002171415610374409790953100073117119984608557958766");
}

TEST(RealFunctionsTests, cscTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(csc(Real("1")).toString(), "1.1883951057781212162615994523745510035278298340979626252652536663591843673571904879136635680308530232472479285607355300046767997261054621744411787730114762446028425233143142004017226704681329668496699454726395217600143376991057765233165669093621429979755229705180663841364565078822602575834843221309765112529134018803701291196253064696269055657610587513727537585232559260303432589997118789357728292536966170276437169716491704026280178391400624291988181131298891953546837005862558906922729413477101737");
  EXPECT_EQ(csc(Real("-1")).toString(), "-1.1883951057781212162615994523745510035278298340979626252652536663591843673571904879136635680308530232472479285607355300046767997261054621744411787730114762446028425233143142004017226704681329668496699454726395217600143376991057765233165669093621429979755229705180663841364565078822602575834843221309765112529134018803701291196253064696269055657610587513727537585232559260303432589997118789357728292536966170276437169716491704026280178391400624291988181131298891953546837005862558906922729413477101737");
  EXPECT_EQ(csc(Real("3.2")).toString(), "-17.130872356878680929063816308707772644748981698069414677586948372772984323565408423483640507766628666148265681237511920086970258511680236062318076707749313521817695876380123831909508282966596093285835686395831410297351280914374490328653498778387071527682687131275496025461594734785879102960537054992570954747112214307178536824675515213310334523318434172386047053111498611835029969273057774864899638121645170459166882594313731446347965365139623182955223448213487647268143906769534762185923830892787334");
  EXPECT_EQ(csc(Real("360")).toString(), "1.0428445123825993746264366840754767090833603173462451344005105419339646525772188525630433129769205288221271874687459480283950885566962033314936632943542886378755570603246796014735776586481664170715810139367954138715715911811558417791760191438999416933570705650066613051160621833296545829520831260246352219360937624349461381007386246664520190341892795778721077472722878343691805161587106133391138153350352638091687284934165572172843784932994015464381320697611705861039314671188244542292789065000592844");
  EXPECT_EQ(csc(Real("-1")).toString(), "-1.1883951057781212162615994523745510035278298340979626252652536663591843673571904879136635680308530232472479285607355300046767997261054621744411787730114762446028425233143142004017226704681329668496699454726395217600143376991057765233165669093621429979755229705180663841364565078822602575834843221309765112529134018803701291196253064696269055657610587513727537585232559260303432589997118789357728292536966170276437169716491704026280178391400624291988181131298891953546837005862558906922729413477101737");

  EXPECT_THAT(
    [] { csc(Real("0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("csc(0.0) is undefined (div(1.0, 0.0) is undefined (division by zero))")
    )
  );
  EXPECT_THAT(
    [] { csc(Real("-0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("csc(-0.0) is undefined (div(1.0, -0.0) is undefined (division by zero))")
    )
  );

  EXPECT_THAT(
    [] { csc(Real(2 * getPi())); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("csc(6.2831853071795864769252867665590057683943387987502116419498891846156328125724179972560696506842341359642961730265646132941876892191011644634507188162569622349005682054038770422111192892458979098607639288576219513318668922569512964675735663305424038182912971338469206972209086532964267872145204982825474491740132126311763497630418419256585081834307287357851807200226610610976409330427682939038830232188661145407315191839061843722347638652235862102370961489247599254991347037715054497824558763660238983) is undefined (sin(6.2831853071795864769252867665590057683943387987502116419498891846156328125724179972560696506842341359642961730265646132941876892191011644634507188162569622349005682054038770422111192892458979098607639288576219513318668922569512964675735663305424038182912971338469206972209086532964267872145204982825474491740132126311763497630418419256585081834307287357851807200226610610976409330427682939038830232188661145407315191839061843722347638652235862102370961489247599254991347037715054497824558763660238983) is undefined (result underflow))")
    )
  );
  EXPECT_THAT(
    [] { csc(Real(-2 * getPi())); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("csc(-6.2831853071795864769252867665590057683943387987502116419498891846156328125724179972560696506842341359642961730265646132941876892191011644634507188162569622349005682054038770422111192892458979098607639288576219513318668922569512964675735663305424038182912971338469206972209086532964267872145204982825474491740132126311763497630418419256585081834307287357851807200226610610976409330427682939038830232188661145407315191839061843722347638652235862102370961489247599254991347037715054497824558763660238983) is undefined (sin(-6.2831853071795864769252867665590057683943387987502116419498891846156328125724179972560696506842341359642961730265646132941876892191011644634507188162569622349005682054038770422111192892458979098607639288576219513318668922569512964675735663305424038182912971338469206972209086532964267872145204982825474491740132126311763497630418419256585081834307287357851807200226610610976409330427682939038830232188661145407315191839061843722347638652235862102370961489247599254991347037715054497824558763660238983) is undefined (result underflow))")
    )
  );
  EXPECT_THAT(
    [] { csc(Real(getPi())); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("csc(3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491) is undefined (sin(3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491) is undefined (result underflow))")
    )
  );
  EXPECT_THAT(
    [] { csc(Real(-getPi())); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("csc(-3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491) is undefined (sin(-3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491) is undefined (result underflow))")
    )
  );
  EXPECT_EQ(csc(Real(getPi() / 2)).toString(), "1.0");
  EXPECT_EQ(csc(Real(-getPi() / 2)).toString(), "-1.0");
  EXPECT_EQ(csc(Real(getPi() / 4)).toString(), "1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727350138462309122970249248360558507372126441214970999358314132226659275055927557999505011527820605714701095599716059702745345968620147285174186408891986095523292304843087143214508397626036279952514079896872533965463318088296406206152583523950547457502877599617298355752203375318570113543746034084988471603868999706990048150305440277903164542478230684929369186215805784631115966687130130156185689872372");
  EXPECT_EQ(csc(Real(-getPi() / 4)).toString(), "-1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727350138462309122970249248360558507372126441214970999358314132226659275055927557999505011527820605714701095599716059702745345968620147285174186408891986095523292304843087143214508397626036279952514079896872533965463318088296406206152583523950547457502877599617298355752203375318570113543746034084988471603868999706990048150305440277903164542478230684929369186215805784631115966687130130156185689872372");

  EXPECT_EQ(csc(getBottom()).toString(), "-1.0168091820967759198944541198068394518950303536090902584418294758503608753456234988205651359665264123356739099356815935009084045098417114495501327359159176023372334374711086172695375589987360879117045055773051219478877680325646502640804858037502160335387035365989364135681834916084319232797202913202067377290588902193529234645997864148858978549775752319148779332193797461579373322968960363717661928066574046233039921433563022497177618261627922912652319553547089161758887141387706086744056070416794161");
  EXPECT_EQ(csc(-getBottom()).toString(), "1.0168091820967759198944541198068394518950303536090902584418294758503608753456234988205651359665264123356739099356815935009084045098417114495501327359159176023372334374711086172695375589987360879117045055773051219478877680325646502640804858037502160335387035365989364135681834916084319232797202913202067377290588902193529234645997864148858978549775752319148779332193797461579373322968960363717661928066574046233039921433563022497177618261627922912652319553547089161758887141387706086744056070416794161");
  EXPECT_EQ(csc(1 / getBottom()).toString(), "60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0");
  EXPECT_EQ(csc(-1 / getBottom()).toString(), "-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0");
  EXPECT_EQ(csc(1 + 1 / getBottom()).toString(), "1.1883951057781212162615994523745510035278298340979626252652536663591843673571904879136635680308530232472479285607355300046767997261054621744411787730114762446028425233143142004017226704681329668496699454726395217600143376991057765233165669093621429979755229705180663841364565078822602575834843221309765112529134018803701291196253064696269055657610587513727537585232559260303432589997118789357728292536966170276437169716491704026280178391400624291988181131298891953546837005862558906922729413477101736");
  EXPECT_EQ(csc(1 - 1 / getBottom()).toString(), "1.1883951057781212162615994523745510035278298340979626252652536663591843673571904879136635680308530232472479285607355300046767997261054621744411787730114762446028425233143142004017226704681329668496699454726395217600143376991057765233165669093621429979755229705180663841364565078822602575834843221309765112529134018803701291196253064696269055657610587513727537585232559260303432589997118789357728292536966170276437169716491704026280178391400624291988181131298891953546837005862558906922729413477101737");
  EXPECT_EQ(csc(-1 + 1 / getBottom()).toString(), "-1.1883951057781212162615994523745510035278298340979626252652536663591843673571904879136635680308530232472479285607355300046767997261054621744411787730114762446028425233143142004017226704681329668496699454726395217600143376991057765233165669093621429979755229705180663841364565078822602575834843221309765112529134018803701291196253064696269055657610587513727537585232559260303432589997118789357728292536966170276437169716491704026280178391400624291988181131298891953546837005862558906922729413477101737");
  EXPECT_EQ(csc(-1 - 1 / getBottom()).toString(), "-1.1883951057781212162615994523745510035278298340979626252652536663591843673571904879136635680308530232472479285607355300046767997261054621744411787730114762446028425233143142004017226704681329668496699454726395217600143376991057765233165669093621429979755229705180663841364565078822602575834843221309765112529134018803701291196253064696269055657610587513727537585232559260303432589997118789357728292536966170276437169716491704026280178391400624291988181131298891953546837005862558906922729413477101736");

  EXPECT_THAT(
    [] { csc(getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("csc(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (sin(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument overflow))")
    )
  );
  EXPECT_THAT(
    [] { csc(-getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("csc(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (sin(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument overflow))")
    )
  );
  EXPECT_THAT(
    [] { csc(1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("csc(6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (sin(6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow))")
    )
  );
  EXPECT_THAT(
    [] { csc(-1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("csc(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (sin(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow))")
    )
  );
  EXPECT_EQ(csc(1 + 1 / getTop()).toString(), "1.1883951057781212162615994523745510035278298340979626252652536663591843673571904879136635680308530232472479285607355300046767997261054621744411787730114762446028425233143142004017226704681329668496699454726395217600143376991057765233165669093621429979755229705180663841364565078822602575834843221309765112529134018803701291196253064696269055657610587513727537585232559260303432589997118789357728292536966170276437169716491704026280178391400624291988181131298891953546837005862558906922729413477101736");
  EXPECT_EQ(csc(1 - 1 / getTop()).toString(), "1.1883951057781212162615994523745510035278298340979626252652536663591843673571904879136635680308530232472479285607355300046767997261054621744411787730114762446028425233143142004017226704681329668496699454726395217600143376991057765233165669093621429979755229705180663841364565078822602575834843221309765112529134018803701291196253064696269055657610587513727537585232559260303432589997118789357728292536966170276437169716491704026280178391400624291988181131298891953546837005862558906922729413477101737");
  EXPECT_EQ(csc(-1 + 1 / getTop()).toString(), "-1.1883951057781212162615994523745510035278298340979626252652536663591843673571904879136635680308530232472479285607355300046767997261054621744411787730114762446028425233143142004017226704681329668496699454726395217600143376991057765233165669093621429979755229705180663841364565078822602575834843221309765112529134018803701291196253064696269055657610587513727537585232559260303432589997118789357728292536966170276437169716491704026280178391400624291988181131298891953546837005862558906922729413477101737");
  EXPECT_EQ(csc(-1 - 1 / getTop()).toString(), "-1.1883951057781212162615994523745510035278298340979626252652536663591843673571904879136635680308530232472479285607355300046767997261054621744411787730114762446028425233143142004017226704681329668496699454726395217600143376991057765233165669093621429979755229705180663841364565078822602575834843221309765112529134018803701291196253064696269055657610587513727537585232559260303432589997118789357728292536966170276437169716491704026280178391400624291988181131298891953546837005862558906922729413477101736");
}

TEST(RealFunctionsTests, asinTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(asin(Real("0")).toString(), "0.0");
  EXPECT_EQ(asin(Real("-0")).toString(), "-0.0");
  EXPECT_EQ(asin(Real("1")).toString(), "1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059746");
  EXPECT_EQ(asin(Real("-1")).toString(), "-1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059746");
  EXPECT_EQ(asin(Real("0.84")).toString(), "0.99728322237179986604941509532521395934714998516818417157450478882243040040739064902926893714026459287035064571130233073211754382793258492775437715855004671674889185623000769840763429304713098716629852727968827073908276636401276048204827877385901902774150173708596546031159844406856310972438478179578175951803710882156311730333179191202945257138910105504820794989813222587723991409775037600465013785958465561810434613925198365489052649647827967461192622015741352528579453326828887043801608108051477269");
  EXPECT_EQ(asin(Real("-0.84")).toString(), "-0.99728322237179986604941509532521395934714998516818417157450478882243040040739064902926893714026459287035064571130233073211754382793258492775437715855004671674889185623000769840763429304713098716629852727968827073908276636401276048204827877385901902774150173708596546031159844406856310972438478179578175951803710882156311730333179191202945257138910105504820794989813222587723991409775037600465013785958465561810434613925198365489052649647827967461192622015741352528579453326828887043801608108051477269");

  EXPECT_THAT(
    [] { asin(Real("10")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asin(10.0) is undefined (argument out of range)")
    )
  );
  EXPECT_THAT(
    [] { asin(Real("-10")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asin(-10.0) is undefined (argument out of range)")
    )
  );

  EXPECT_THAT(
    [] { asin(getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asin(60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (argument out of range)")
    )
  );
  EXPECT_THAT(
    [] { asin(-getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asin(-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (argument out of range)")
    )
  );
  EXPECT_EQ(asin(1 / getBottom()).toString(), "1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500");
  EXPECT_EQ(asin(-1 / getBottom()).toString(), "-1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500");
  EXPECT_THAT(
    [] { asin(1 + 1 / getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asin(1.0) is undefined (argument out of range)")
    )
  );
  EXPECT_EQ(asin(1 - 1 / getBottom()).toString(), "1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009543912129524492324911746294869466144351334645739492814493392173080120000958159852068569162071237110901347121303126022389964745087204086224350396918759598758653434173964159689735465688654414318032072936064099095247650063335973521689401338531070936559496");
  EXPECT_EQ(asin(-1 + 1 / getBottom()).toString(), "-1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009543912129524492324911746294869466144351334645739492814493392173080120000958159852068569162071237110901347121303126022389964745087204086224350396918759598758653434173964159689735465688654414318032072936064099095247650063335973521689401338531070936559496");
  EXPECT_THAT(
    [] { asin(-1 - 1 / getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asin(-1.0) is undefined (argument out of range)")
    )
  );

  EXPECT_THAT(
    [] { asin(getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asin(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument out of range)")
    )
  );
  EXPECT_THAT(
    [] { asin(-getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asin(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument out of range)")
    )
  );
  EXPECT_THAT(
    [] { asin(1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asin(6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow)")
    )
  );
  EXPECT_THAT(
    [] { asin(-1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asin(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow)")
    )
  );
  EXPECT_THAT(
    [] { asin(1 + 1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asin(1.0) is undefined (argument out of range)")
    )
  );
  EXPECT_EQ(asin(1 - 1 / getTop()).toString(), "1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009544626714614102467331749140037017778707281343108720908767252437637606686704112448519217753623331070673065952614115246421127884387262543844228820964934513815710803478219109453922658176229218505271474546070789591352895215538283417829914082233990617199866");
  EXPECT_EQ(asin(-1 + 1 / getTop()).toString(), "-1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009544626714614102467331749140037017778707281343108720908767252437637606686704112448519217753623331070673065952614115246421127884387262543844228820964934513815710803478219109453922658176229218505271474546070789591352895215538283417829914082233990617199866");
  EXPECT_THAT(
    [] { asin(-1 - 1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asin(-1.0) is undefined (argument out of range)")
    )
  );
}

TEST(RealFunctionsTests, acosTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(acos(Real("0")).toString(), "1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059746");
  EXPECT_EQ(acos(Real("-0")).toString(), "1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059746");
  EXPECT_EQ(acos(Real("1")).toString(), "0.0");
  EXPECT_EQ(acos(Real("-1")).toString(), "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491");
  EXPECT_EQ(acos(Real("0.54")).toString(), "1.0003592173949747118791376298435469512885913377969497906049204887187423921567895177976022221907050335650845132822965716649845600735516029413986139650461173550128803998067400065310353542792427835105916184592623138459755250330281624455815464611629996440114260012860252020183567009333702645210375334263809552895280288326212717942179665352569519572762060481581698696284766538229040683728130641302999291849537143100925393941523072142724992850232516181797925495768215872066743637596358371283895797058420554");

  EXPECT_THAT(
    [] { acos(Real("10")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acos(10.0) is undefined (argument out of range)")
    )
  );
  EXPECT_THAT(
    [] { acos(Real("-10")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acos(-10.0) is undefined (argument out of range)")
    )
  );

  EXPECT_THAT(
    [] { acos(getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acos(60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (argument out of range)")
    )
  );
  EXPECT_THAT(
    [] { acos(-getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acos(-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (argument out of range)")
    )
  );
  EXPECT_EQ(acos(1 / getBottom()).toString(), "1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059745");
  EXPECT_EQ(acos(-1 / getBottom()).toString(), "1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059746");
  EXPECT_THAT(
    [] { acos(1 + 1 / getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acos(1.0) is undefined (argument out of range)")
    )
  );
  EXPECT_EQ(acos(1 - 1 / getBottom()).toString(), "1.8161133101249768313059767637749226167016555062135541295428599514579399162477525362449841992214659204923416486740342626879990151285206963843627887984484066329176548338000757254648982552487409334526566762732166521636845007859070742231176086199785002494824233671741808993871471604475449814991979005026904466371335432200684754360612792364909810664574323876073450385968843689808751624105899580384533574694605556028984635741348186918197680661361994642285426418712562403143105149802614347742290494321962424*10^-250");
  EXPECT_EQ(acos(-1 + 1 / getBottom()).toString(), "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019089640372359109626654798566502707211319370946985199183116327206111697941832567456673383308341695687723186584254926079042617489189536693145085156626317645923939786002762119455196396275564077376997598528804471407147463811172732950453025794670761851619242");
  EXPECT_THAT(
    [] { acos(-1 - 1 / getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acos(-1.0) is undefined (argument out of range)")
    )
  );

  EXPECT_THAT(
    [] { acos(getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acos(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument out of range)")
    )
  );
  EXPECT_THAT(
    [] { acos(-getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acos(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument out of range)")
    )
  );
  EXPECT_EQ(acos(1 / getTop()).toString(), "1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059746");
  EXPECT_EQ(acos(-1 / getTop()).toString(), "1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059746");
  EXPECT_THAT(
    [] { acos(1 + 1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acos(1.0) is undefined (argument out of range)")
    )
  );
  EXPECT_EQ(acos(1 - 1 / getTop()).toString(), "1.1015282205148344113031315962232882607549581369854598556825953939712541702951560855963926471275061487735103376848102315248597150700630765059387426235333495755483505788503115382724106804445536940510466695827205469185322984760109337103739057002978598795971390260446685983828095271655143299592980169999703367652156688155730814358165398832394569722569002490431507814481217842691057439436763109599092031344149400752025936592695703741466909450253591955614422574626565454002410396637850800605126854091903233*10^-250");
  EXPECT_EQ(acos(-1 + 1 / getTop()).toString(), "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019090354957448719769074801411670258845675317644354427277390187470669184627578520053124031899893789647494905415565915303073780628489595150764963580672492560980997155307017069219383588763138881564237000138811161903252708963375042846593538538373681532259612");
  EXPECT_THAT(
    [] { acos(-1 - 1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acos(-1.0) is undefined (argument out of range)")
    )
  );
}

TEST(RealFunctionsTests, atanTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(atan(Real("0")).toString(), "0.0");
  EXPECT_EQ(atan(Real("-0")).toString(), "-0.0");
  EXPECT_EQ(atan(Real("1")).toString(), "0.78539816339744830961566084581987572104929234984377645524373614807695410157155224965700870633552926699553702162832057666177346115238764555793133985203212027936257102567548463027638991115573723873259549110720274391648336153211891205844669579131780047728641214173086508715261358166205334840181506228531843114675165157889704372038023024070731352292884109197314759000283263263720511663034603673798537790235826431759143989798827304652934548315294827627963701861559499068739183797143818122280698454575298728");
  EXPECT_EQ(atan(Real("-1")).toString(), "-0.78539816339744830961566084581987572104929234984377645524373614807695410157155224965700870633552926699553702162832057666177346115238764555793133985203212027936257102567548463027638991115573723873259549110720274391648336153211891205844669579131780047728641214173086508715261358166205334840181506228531843114675165157889704372038023024070731352292884109197314759000283263263720511663034603673798537790235826431759143989798827304652934548315294827627963701861559499068739183797143818122280698454575298728");
  EXPECT_EQ(atan(Real("14.101419947171719387646083651987756445659543577235861866123267586089696270414155")).toString(), "1.4999999999999999999999999999999999999999999999999999999999999999999999999999999986557485960895199125387043907542032801136829232958046907115124578097639341530485021618692919413868147394671838598734881735885773972918552984731919752053253231253315465725537708536001345140870093737528215974550433984916148591853059984658651385865500161526429293734649866629271250527621483972031469401349267647155678663320895436053043953039159231443788199005744104871304685292815911594688201423702826364719784004235324669");

  EXPECT_EQ(atan(getBottom()).toString(), "1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059745");
  EXPECT_EQ(atan(-getBottom()).toString(), "-1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059745");
  EXPECT_EQ(atan(1 / getBottom()).toString(), "1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500");
  EXPECT_EQ(atan(-1 / getBottom()).toString(), "-1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500");
  EXPECT_EQ(atan(1 + 1 / getBottom()).toString(), "0.78539816339744830961566084581987572104929234984377645524373614807695410157155224965700870633552926699553702162832057666177346115238764555793133985203212027936257102567548463027638991115573723873259549110720274391648336153211891205844669579131780047728641214173086508715261358166205334840181506228531843114675165157889704372038023024070731352292884109197314759000283263263720511663034603673798537790235826431759143989798827304652934548315294827627963701861559499068739183797143818122280698454575298729");
  EXPECT_EQ(atan(1 - 1 / getBottom()).toString(), "0.78539816339744830961566084581987572104929234984377645524373614807695410157155224965700870633552926699553702162832057666177346115238764555793133985203212027936257102567548463027638991115573723873259549110720274391648336153211891205844669579131780047728641214173086508715261358166205334840181506228531843114675165157889704372038023024070731352292884109197314759000283263263720511663034603673798537790235826431759143989798827304652934548315294827627963701861559499068739183797143818122280698454575298727");
  EXPECT_EQ(atan(-1 + 1 / getBottom()).toString(), "-0.78539816339744830961566084581987572104929234984377645524373614807695410157155224965700870633552926699553702162832057666177346115238764555793133985203212027936257102567548463027638991115573723873259549110720274391648336153211891205844669579131780047728641214173086508715261358166205334840181506228531843114675165157889704372038023024070731352292884109197314759000283263263720511663034603673798537790235826431759143989798827304652934548315294827627963701861559499068739183797143818122280698454575298727");
  EXPECT_EQ(atan(-1 - 1 / getBottom()).toString(), "-0.78539816339744830961566084581987572104929234984377645524373614807695410157155224965700870633552926699553702162832057666177346115238764555793133985203212027936257102567548463027638991115573723873259549110720274391648336153211891205844669579131780047728641214173086508715261358166205334840181506228531843114675165157889704372038023024070731352292884109197314759000283263263720511663034603673798537790235826431759143989798827304652934548315294827627963701861559499068739183797143818122280698454575298729");

  EXPECT_EQ(atan(getTop()).toString(), "1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059746");
  EXPECT_EQ(atan(-getTop()).toString(), "-1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059746");
  EXPECT_THAT(
    [] { atan(1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("atan(6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow)")
    )
  );
  EXPECT_THAT(
    [] { atan(-1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("atan(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow)")
    )
  );
  EXPECT_EQ(atan(1 + 1 / getTop()).toString(), "0.78539816339744830961566084581987572104929234984377645524373614807695410157155224965700870633552926699553702162832057666177346115238764555793133985203212027936257102567548463027638991115573723873259549110720274391648336153211891205844669579131780047728641214173086508715261358166205334840181506228531843114675165157889704372038023024070731352292884109197314759000283263263720511663034603673798537790235826431759143989798827304652934548315294827627963701861559499068739183797143818122280698454575298729");
  EXPECT_EQ(atan(1 - 1 / getTop()).toString(), "0.78539816339744830961566084581987572104929234984377645524373614807695410157155224965700870633552926699553702162832057666177346115238764555793133985203212027936257102567548463027638991115573723873259549110720274391648336153211891205844669579131780047728641214173086508715261358166205334840181506228531843114675165157889704372038023024070731352292884109197314759000283263263720511663034603673798537790235826431759143989798827304652934548315294827627963701861559499068739183797143818122280698454575298728");
  EXPECT_EQ(atan(-1 + 1 / getTop()).toString(), "-0.78539816339744830961566084581987572104929234984377645524373614807695410157155224965700870633552926699553702162832057666177346115238764555793133985203212027936257102567548463027638991115573723873259549110720274391648336153211891205844669579131780047728641214173086508715261358166205334840181506228531843114675165157889704372038023024070731352292884109197314759000283263263720511663034603673798537790235826431759143989798827304652934548315294827627963701861559499068739183797143818122280698454575298728");
  EXPECT_EQ(atan(-1 - 1 / getTop()).toString(), "-0.78539816339744830961566084581987572104929234984377645524373614807695410157155224965700870633552926699553702162832057666177346115238764555793133985203212027936257102567548463027638991115573723873259549110720274391648336153211891205844669579131780047728641214173086508715261358166205334840181506228531843114675165157889704372038023024070731352292884109197314759000283263263720511663034603673798537790235826431759143989798827304652934548315294827627963701861559499068739183797143818122280698454575298729");
}

TEST(RealFunctionsTests, acotTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(acot(Real("1")).toString(), "0.78539816339744830961566084581987572104929234984377645524373614807695410157155224965700870633552926699553702162832057666177346115238764555793133985203212027936257102567548463027638991115573723873259549110720274391648336153211891205844669579131780047728641214173086508715261358166205334840181506228531843114675165157889704372038023024070731352292884109197314759000283263263720511663034603673798537790235826431759143989798827304652934548315294827627963701861559499068739183797143818122280698454575298728");
  EXPECT_EQ(acot(Real("-1")).toString(), "-0.78539816339744830961566084581987572104929234984377645524373614807695410157155224965700870633552926699553702162832057666177346115238764555793133985203212027936257102567548463027638991115573723873259549110720274391648336153211891205844669579131780047728641214173086508715261358166205334840181506228531843114675165157889704372038023024070731352292884109197314759000283263263720511663034603673798537790235826431759143989798827304652934548315294827627963701861559499068739183797143818122280698454575298728");
  EXPECT_EQ(acot(Real("999.9996666666444444423280421164020950243150821349686957930420507767438195464464")).toString(), "0.00099999999999999999999999999999999999999999999999999999999999999999999999999999999520634568183674040783970331582554073275320346626391287599441844855329139555995768197166058821093605951741769596479352976180441333074229850093543964493443860640600490586849713950251489092715413226533897754456153271726325985194450173733913611757889318251097033681593161211552378778014959359303764665491769639631227095346657170959640829846817771528191249797072531699834783539726035526166348364413613552480681028846378824925");

  EXPECT_THAT(
    [] { acot(Real("0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acot(0.0) is undefined (div(1.0, 0.0) is undefined (division by zero))")
    )
  );
  EXPECT_THAT(
    [] { acot(Real("-0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acot(-0.0) is undefined (div(1.0, -0.0) is undefined (division by zero))")
    )
  );

  EXPECT_EQ(acot(getBottom()).toString(), "1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500");
  EXPECT_EQ(acot(-getBottom()).toString(), "-1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500");
  EXPECT_EQ(acot(1 / getBottom()).toString(), "1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059745");
  EXPECT_EQ(acot(-1 / getBottom()).toString(), "-1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059745");
  EXPECT_EQ(acot(1 + 1 / getBottom()).toString(), "0.78539816339744830961566084581987572104929234984377645524373614807695410157155224965700870633552926699553702162832057666177346115238764555793133985203212027936257102567548463027638991115573723873259549110720274391648336153211891205844669579131780047728641214173086508715261358166205334840181506228531843114675165157889704372038023024070731352292884109197314759000283263263720511663034603673798537790235826431759143989798827304652934548315294827627963701861559499068739183797143818122280698454575298727");
  EXPECT_EQ(acot(1 - 1 / getBottom()).toString(), "0.78539816339744830961566084581987572104929234984377645524373614807695410157155224965700870633552926699553702162832057666177346115238764555793133985203212027936257102567548463027638991115573723873259549110720274391648336153211891205844669579131780047728641214173086508715261358166205334840181506228531843114675165157889704372038023024070731352292884109197314759000283263263720511663034603673798537790235826431759143989798827304652934548315294827627963701861559499068739183797143818122280698454575298729");
  EXPECT_EQ(acot(-1 + 1 / getBottom()).toString(), "-0.78539816339744830961566084581987572104929234984377645524373614807695410157155224965700870633552926699553702162832057666177346115238764555793133985203212027936257102567548463027638991115573723873259549110720274391648336153211891205844669579131780047728641214173086508715261358166205334840181506228531843114675165157889704372038023024070731352292884109197314759000283263263720511663034603673798537790235826431759143989798827304652934548315294827627963701861559499068739183797143818122280698454575298729");
  EXPECT_EQ(acot(-1 - 1 / getBottom()).toString(), "-0.78539816339744830961566084581987572104929234984377645524373614807695410157155224965700870633552926699553702162832057666177346115238764555793133985203212027936257102567548463027638991115573723873259549110720274391648336153211891205844669579131780047728641214173086508715261358166205334840181506228531843114675165157889704372038023024070731352292884109197314759000283263263720511663034603673798537790235826431759143989798827304652934548315294827627963701861559499068739183797143818122280698454575298727");

  EXPECT_THAT(
    [] { acot(getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acot(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (atan(6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow))")
    )
  );
  EXPECT_THAT(
    [] { acot(-getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acot(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (atan(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow))")
    )
  );
  EXPECT_EQ(acot(1 / getTop()).toString(), "1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059746");
  EXPECT_EQ(acot(-1 / getTop()).toString(), "-1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059746");
  EXPECT_EQ(acot(1 + 1 / getTop()).toString(), "0.78539816339744830961566084581987572104929234984377645524373614807695410157155224965700870633552926699553702162832057666177346115238764555793133985203212027936257102567548463027638991115573723873259549110720274391648336153211891205844669579131780047728641214173086508715261358166205334840181506228531843114675165157889704372038023024070731352292884109197314759000283263263720511663034603673798537790235826431759143989798827304652934548315294827627963701861559499068739183797143818122280698454575298728");
  EXPECT_EQ(acot(1 - 1 / getTop()).toString(), "0.78539816339744830961566084581987572104929234984377645524373614807695410157155224965700870633552926699553702162832057666177346115238764555793133985203212027936257102567548463027638991115573723873259549110720274391648336153211891205844669579131780047728641214173086508715261358166205334840181506228531843114675165157889704372038023024070731352292884109197314759000283263263720511663034603673798537790235826431759143989798827304652934548315294827627963701861559499068739183797143818122280698454575298729");
  EXPECT_EQ(acot(-1 + 1 / getTop()).toString(), "-0.78539816339744830961566084581987572104929234984377645524373614807695410157155224965700870633552926699553702162832057666177346115238764555793133985203212027936257102567548463027638991115573723873259549110720274391648336153211891205844669579131780047728641214173086508715261358166205334840181506228531843114675165157889704372038023024070731352292884109197314759000283263263720511663034603673798537790235826431759143989798827304652934548315294827627963701861559499068739183797143818122280698454575298729");
  EXPECT_EQ(acot(-1 - 1 / getTop()).toString(), "-0.78539816339744830961566084581987572104929234984377645524373614807695410157155224965700870633552926699553702162832057666177346115238764555793133985203212027936257102567548463027638991115573723873259549110720274391648336153211891205844669579131780047728641214173086508715261358166205334840181506228531843114675165157889704372038023024070731352292884109197314759000283263263720511663034603673798537790235826431759143989798827304652934548315294827627963701861559499068739183797143818122280698454575298728");
}

TEST(RealFunctionsTests, asecTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(asec(Real("1")).toString(), "0.0");
  EXPECT_EQ(asec(Real("-1")).toString(), "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491");
  EXPECT_EQ(asec(Real("10")).toString(), "1.4706289056333368228857985121870581235299087274579233690964484411175055294922419476600795483115540790354139523365445673552638537317168230955847715295934245933913273961251744327831394252885495329911892499587550164005381463914995532449150831130595422903562451075432852164075675492409300957134191398921963555860131780733948338794456781847945590245320828639079428623293050680318781426214169668104934082060094067210621573745719103079204399886370944891456272623132457064796150016835215040991855108847914131");
  EXPECT_EQ(asec(Real("-10")).toString(), "1.670963747956456415576844871092444760667260671917182451878496151190310876793967050967955277030562988946734134176737739291829990877833759136140587878535056524058956706576764088322420219334399421939192714470055959265395299736976094988871700052211659618789403459380175132202886777407283297893841109249077369000993428242193341002075242778034695067183281503984647497682025462516942323899967180141448103403423650549303602217381181878196941943974698615972920812149134256269952350202231220792042427298220536");

  EXPECT_THAT(
    [] { asec(Real("0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asec(0.0) is undefined (div(1.0, 0.0) is undefined (division by zero))")
    )
  );
  EXPECT_THAT(
    [] { asec(Real("-0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asec(-0.0) is undefined (div(1.0, -0.0) is undefined (division by zero))")
    )
  );
  EXPECT_THAT(
    [] { asec(Real("0.54")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asec(0.54) is undefined (acosis undefined (argument out of range))")
    )
  );
  EXPECT_THAT(
    [] { asec(Real("-0.54")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asec(-0.54) is undefined (acosis undefined (argument out of range))")
    )
  );

  EXPECT_EQ(asec(getBottom()).toString(), "1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059745");
  EXPECT_EQ(asec(-getBottom()).toString(), "1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059746");
  EXPECT_THAT(
    [] { asec(1 / getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asec(1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500) is undefined (acos(60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (argument out of range))")
    )
  );
  EXPECT_THAT(
    [] { asec(-1 / getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asec(-1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500) is undefined (acos(-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (argument out of range))")
    )
  );
  EXPECT_EQ(asec(1 + 1 / getBottom()).toString(), "1.8161133101249768313059767637749226167016555062135541295428599514579399162477525362449841992214659204923416486740342626879990151285206963843627887984484066329176548338000757254648982552487409334526566762732166521636845007859070742231176086199785002494824233671741808993871471604475449814991979005026904466371335432200684754360612792364909810664574323876073450385968843689808751624105899580384533574694605556028984635741348186918197680661361994642285426418712562403143105149802614347742290494321962424*10^-250");
  EXPECT_THAT(
    [] { asec(1 - 1 / getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asecis undefined (acos(1.0) is undefined (argument out of range))")
    )
  );
  EXPECT_THAT(
    [] { asec(-1 + 1 / getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asecis undefined (acos(-1.0) is undefined (argument out of range))")
    )
  );
  EXPECT_EQ(asec(-1 - 1 / getBottom()).toString(), "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019089640372359109626654798566502707211319370946985199183116327206111697941832567456673383308341695687723186584254926079042617489189536693145085156626317645923939786002762119455196396275564077376997598528804471407147463811172732950453025794670761851619242");

  EXPECT_EQ(asec(getTop()).toString(), "1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059746");
  EXPECT_EQ(asec(-getTop()).toString(), "1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059746");
  EXPECT_THAT(
    [] { asec(1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asec(6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (acos(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument out of range))")
    )
  );
  EXPECT_THAT(
    [] { asec(-1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asec(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (acos(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument out of range))")
    )
  );
  EXPECT_EQ(asec(1 + 1 / getTop()).toString(), "1.1015282205148344113031315962232882607549581369854598556825953939712541702951560855963926471275061487735103376848102315248597150700630765059387426235333495755483505788503115382724106804445536940510466695827205469185322984760109337103739057002978598795971390260446685983828095271655143299592980169999703367652156688155730814358165398832394569722569002490431507814481217842691057439436763109599092031344149400752025936592695703741466909450253591955614422574626565454002410396637850800605126854091903233*10^-250");
  EXPECT_THAT(
    [] { asec(1 - 1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asecis undefined (acos(1.0) is undefined (argument out of range))")
    )
  );
  EXPECT_THAT(
    [] { asec(-1 + 1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asecis undefined (acos(-1.0) is undefined (argument out of range))")
    )
  );
  EXPECT_EQ(asec(-1 - 1 / getTop()).toString(), "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019090354957448719769074801411670258845675317644354427277390187470669184627578520053124031899893789647494905415565915303073780628489595150764963580672492560980997155307017069219383588763138881564237000138811161903252708963375042846593538538373681532259612");
}

TEST(RealFunctionsTests, acscTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(acsc(Real("1")).toString(), "1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059746");
  EXPECT_EQ(acsc(Real("-1")).toString(), "-1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059746");
  EXPECT_EQ(acsc(Real("2")).toString(), "0.52359877559829887307710723054658381403286156656251763682915743205130273438103483310467247089035284466369134775221371777451564076825843037195422656802141351957504735045032308685092660743715815915506366073813516261098890768807927470563113052754520031819094142782057672476840905444136889893454337485687895409783443438593136248025348682713820901528589406131543172666855508842480341108689735782532358526823884287839429326532551536435289698876863218418642467907706332712492789198095878748187132303050199152");
  EXPECT_EQ(acsc(Real("10")).toString(), "0.10016742116155979634552317945269331856867597222962954139102385503640267365086255165393786435950445495566009092009658596828306857305846802027790817447081596533381465522579482776964039702292494447400173225565047143242857667273827087197830846957605866421657917591844495789765961408317660109021098467844050670749012508439925356131478229662006802132559932003835231767636019724253209063927510666547734759870712191412072242140463578513825097766880206341364677491794427489516867425935485834642845820671456144");
  EXPECT_EQ(acsc(Real("-10")).toString(), "-0.10016742116155979634552317945269331856867597222962954139102385503640267365086255165393786435950445495566009092009658596828306857305846802027790817447081596533381465522579482776964039702292494447400173225565047143242857667273827087197830846957605866421657917591844495789765961408317660109021098467844050670749012508439925356131478229662006802132559932003835231767636019724253209063927510666547734759870712191412072242140463578513825097766880206341364677491794427489516867425935485834642845820671456144");

  EXPECT_THAT(
    [] { acsc(Real("0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acsc(0.0) is undefined (div(1.0, 0.0) is undefined (division by zero))")
    )
  );
  EXPECT_THAT(
    [] { acsc(Real("-0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acsc(-0.0) is undefined (div(1.0, -0.0) is undefined (division by zero))")
    )
  );
  EXPECT_THAT(
    [] { acsc(Real("0.54")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acsc(0.54) is undefined (asinis undefined (argument out of range))")
    )
  );
  EXPECT_THAT(
    [] { acsc(Real("-0.54")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acsc(-0.54) is undefined (asinis undefined (argument out of range))")
    )
  );

  EXPECT_EQ(acsc(getBottom()).toString(), "1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500");
  EXPECT_EQ(acsc(-getBottom()).toString(), "-1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500");
  EXPECT_THAT(
    [] { acsc(1 / getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acsc(1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500) is undefined (asin(60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (argument out of range))")
    )
  );
  EXPECT_THAT(
    [] { acsc(-1 / getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acsc(-1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500) is undefined (asin(-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (argument out of range))")
    )
  );
  EXPECT_EQ(acsc(1 + 1 / getBottom()).toString(), "1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009543912129524492324911746294869466144351334645739492814493392173080120000958159852068569162071237110901347121303126022389964745087204086224350396918759598758653434173964159689735465688654414318032072936064099095247650063335973521689401338531070936559496");
  EXPECT_THAT(
    [] { acsc(1 - 1 / getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acscis undefined (asin(1.0) is undefined (argument out of range))")
    )
  );
  EXPECT_THAT(
    [] { acsc(-1 + 1 / getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acscis undefined (asin(-1.0) is undefined (argument out of range))")
    )
  );
  EXPECT_EQ(acsc(-1 - 1 / getBottom()).toString(), "-1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009543912129524492324911746294869466144351334645739492814493392173080120000958159852068569162071237110901347121303126022389964745087204086224350396918759598758653434173964159689735465688654414318032072936064099095247650063335973521689401338531070936559496");

  EXPECT_THAT(
    [] { acsc(getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acsc(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (asin(6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow))")
    )
  );
  EXPECT_THAT(
    [] { acsc(-getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acsc(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (asin(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow))")
    )
  );
  EXPECT_THAT(
    [] { acsc(1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acsc(6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (asin(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument out of range))")
    )
  );
  EXPECT_THAT(
    [] { acsc(-1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acsc(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (asin(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument out of range))")
    )
  );
  EXPECT_EQ(acsc(1 + 1 / getTop()).toString(), "1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009544626714614102467331749140037017778707281343108720908767252437637606686704112448519217753623331070673065952614115246421127884387262543844228820964934513815710803478219109453922658176229218505271474546070789591352895215538283417829914082233990617199866");
  EXPECT_THAT(
    [] { acsc(1 - 1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acscis undefined (asin(1.0) is undefined (argument out of range))")
    )
  );
  EXPECT_THAT(
    [] { acsc(-1 + 1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acsc(-0.99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999) is undefined (asin(-1.0) is undefined (argument out of range))")
    )
  );
  EXPECT_EQ(acsc(-1 - 1 / getTop()).toString(), "-1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009544626714614102467331749140037017778707281343108720908767252437637606686704112448519217753623331070673065952614115246421127884387262543844228820964934513815710803478219109453922658176229218505271474546070789591352895215538283417829914082233990617199866");
}

TEST(RealFunctionsTests, sinhTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(sinh(Real("0")).toString(), "0.0");
  EXPECT_EQ(sinh(Real("-0")).toString(), "-0.0");
  EXPECT_EQ(sinh(Real("1")).toString(), "1.1752011936438014568823818505956008151557179813340958702295654130133075673043238956071174520896233918404195333275795323567852189019194572821368403528832484238229689806253026878572974193778037894530156457975748559863812033933000211943571349392767479287838086397780915943822887094379183712322502306432683489821868659007368597138765536487737915436208491950598400985696957504601707347646045559914877642254885845736315892502135438245978143162874775249565935186798861968577094170390099113872716177152780262");
  EXPECT_EQ(sinh(Real("-1")).toString(), "-1.1752011936438014568823818505956008151557179813340958702295654130133075673043238956071174520896233918404195333275795323567852189019194572821368403528832484238229689806253026878572974193778037894530156457975748559863812033933000211943571349392767479287838086397780915943822887094379183712322502306432683489821868659007368597138765536487737915436208491950598400985696957504601707347646045559914877642254885845736315892502135438245978143162874775249565935186798861968577094170390099113872716177152780262");
  EXPECT_EQ(sinh(Real("360")).toString(), "1109132648769277699994832951779334959572708277708353570726045868205344177119690594588131746049580652728185317433434728299662326745010242929866979740785668334.9369930931945296295585489677849719995780307375177864620603810216778944498417730244884075816447558390018965037731947414439832396164138967666157382569681877669037975855593072277274753560410593052652613283568803324928535988392249507967662940803864786943951899720538017858364240981304455315325988152122269310390141654913689036232994901821575183366");
  EXPECT_EQ(sinh(Real("1000000")).toString(), "1.5166076984010437725432010707090571635419868974067387048030974998931132315932118262378896014238733712231453572791977727160648924261330240557869860774850358098312131563768360829761690407034195827198088986937033466934046726913218958947601036565089018349581925436647068674894225777805207965238477572592464354499304442433954381395399968367300979907629021482576602691540020197706252822827022193134154228496566284261501675246544829778210486724753160797320622498901320808395701922250790368495099757883193218*10^434294");
  EXPECT_EQ(sinh(Real("-1000000")).toString(), "-1.5166076984010437725432010707090571635419868974067387048030974998931132315932118262378896014238733712231453572791977727160648924261330240557869860774850358098312131563768360829761690407034195827198088986937033466934046726913218958947601036565089018349581925436647068674894225777805207965238477572592464354499304442433954381395399968367300979907629021482576602691540020197706252822827022193134154228496566284261501675246544829778210486724753160797320622498901320808395701922250790368495099757883193218*10^434294");

  EXPECT_THAT(
    [] { sinh(getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sinh(60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (result overflow)")
    )
  );
  EXPECT_THAT(
    [] { sinh(-getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sinh(-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (result overflow)")
    )
  );
  EXPECT_EQ(sinh(1 / getBottom()).toString(), "1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500");
  EXPECT_EQ(sinh(-1 / getBottom()).toString(), "-1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500");
  EXPECT_EQ(sinh(1 + 1 / getBottom()).toString(), "1.1752011936438014568823818505956008151557179813340958702295654130133075673043238956071174520896233918404195333275795323567852189019194572821368403528832484238229689806253026878572974193778037894530156457975748559863812033933000211943571349392767479287838086397780915943822887094379183712322502306432683489821868659007368597138765536487737915436208491950598400985696957504601707347646045559914877642254885845736315892502135438245978143162874775249565935186798861968577094170390099113872716177152780263");
  EXPECT_EQ(sinh(1 - 1 / getBottom()).toString(), "1.1752011936438014568823818505956008151557179813340958702295654130133075673043238956071174520896233918404195333275795323567852189019194572821368403528832484238229689806253026878572974193778037894530156457975748559863812033933000211943571349392767479287838086397780915943822887094379183712322502306432683489821868659007368597138765536487737915436208491950598400985696957504601707347646045559914877642254885845736315892502135438245978143162874775249565935186798861968577094170390099113872716177152780262");
  EXPECT_EQ(sinh(-1 + 1 / getBottom()).toString(), "-1.1752011936438014568823818505956008151557179813340958702295654130133075673043238956071174520896233918404195333275795323567852189019194572821368403528832484238229689806253026878572974193778037894530156457975748559863812033933000211943571349392767479287838086397780915943822887094379183712322502306432683489821868659007368597138765536487737915436208491950598400985696957504601707347646045559914877642254885845736315892502135438245978143162874775249565935186798861968577094170390099113872716177152780262");
  EXPECT_EQ(sinh(-1 - 1 / getBottom()).toString(), "-1.1752011936438014568823818505956008151557179813340958702295654130133075673043238956071174520896233918404195333275795323567852189019194572821368403528832484238229689806253026878572974193778037894530156457975748559863812033933000211943571349392767479287838086397780915943822887094379183712322502306432683489821868659007368597138765536487737915436208491950598400985696957504601707347646045559914877642254885845736315892502135438245978143162874775249565935186798861968577094170390099113872716177152780263");

  EXPECT_THAT(
    [] { sinh(getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sinh(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (result overflow)")
    )
  );
  EXPECT_THAT(
    [] { sinh(-getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sinh(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (result overflow)")
    )
  );
  EXPECT_THAT(
    [] { sinh(1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sinh(6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow)")
    )
  );
  EXPECT_THAT(
    [] { sinh(-1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sinh(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow)")
    )
  );
  EXPECT_EQ(sinh(1 + 1 / getTop()).toString(), "1.1752011936438014568823818505956008151557179813340958702295654130133075673043238956071174520896233918404195333275795323567852189019194572821368403528832484238229689806253026878572974193778037894530156457975748559863812033933000211943571349392767479287838086397780915943822887094379183712322502306432683489821868659007368597138765536487737915436208491950598400985696957504601707347646045559914877642254885845736315892502135438245978143162874775249565935186798861968577094170390099113872716177152780263");
  EXPECT_EQ(sinh(1 - 1 / getTop()).toString(), "1.1752011936438014568823818505956008151557179813340958702295654130133075673043238956071174520896233918404195333275795323567852189019194572821368403528832484238229689806253026878572974193778037894530156457975748559863812033933000211943571349392767479287838086397780915943822887094379183712322502306432683489821868659007368597138765536487737915436208491950598400985696957504601707347646045559914877642254885845736315892502135438245978143162874775249565935186798861968577094170390099113872716177152780262");
  EXPECT_EQ(sinh(-1 + 1 / getTop()).toString(), "-1.1752011936438014568823818505956008151557179813340958702295654130133075673043238956071174520896233918404195333275795323567852189019194572821368403528832484238229689806253026878572974193778037894530156457975748559863812033933000211943571349392767479287838086397780915943822887094379183712322502306432683489821868659007368597138765536487737915436208491950598400985696957504601707347646045559914877642254885845736315892502135438245978143162874775249565935186798861968577094170390099113872716177152780262");
  EXPECT_EQ(sinh(-1 - 1 / getTop()).toString(), "-1.1752011936438014568823818505956008151557179813340958702295654130133075673043238956071174520896233918404195333275795323567852189019194572821368403528832484238229689806253026878572974193778037894530156457975748559863812033933000211943571349392767479287838086397780915943822887094379183712322502306432683489821868659007368597138765536487737915436208491950598400985696957504601707347646045559914877642254885845736315892502135438245978143162874775249565935186798861968577094170390099113872716177152780263");
}

TEST(RealFunctionsTests, coshTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(cosh(Real("0")).toString(), "1.0");
  EXPECT_EQ(cosh(Real("-0")).toString(), "1.0");
  EXPECT_EQ(cosh(Real("1")).toString(), "1.5430806348152437784779056207570616826015291123658637047374022147107690630492236989642647264355430355870468586044235275650321946947095862907634939423773472069151633480026408029059364105029494057980033657762593319443209506958499136898103743054847127392984561603903858174714536360045187363068275143488012027205749727055244716707064471032711422829394484116772731021396329586672730122826261409857215459162042522453939258584439199475134380734969475319971032521055637731102374474158960765443652715148207669");
  EXPECT_EQ(cosh(Real("-1")).toString(), "1.5430806348152437784779056207570616826015291123658637047374022147107690630492236989642647264355430355870468586044235275650321946947095862907634939423773472069151633480026408029059364105029494057980033657762593319443209506958499136898103743054847127392984561603903858174714536360045187363068275143488012027205749727055244716707064471032711422829394484116772731021396329586672730122826261409857215459162042522453939258584439199475134380734969475319971032521055637731102374474158960765443652715148207669");
  EXPECT_EQ(cosh(Real("125")).toString(), "967788021017861284360312245263743609428141503861911628.64033144120749560890919682980085560050488085395212512026558310267449706617759172826635347506504267878288393972548683072688439459866997986011447684535615219301778692196684742834562718938301353094423455793969187886409230354763153693439885288025503613794244881555555702720690834846404138079225231434323388617953772771564781077546600594506118915603773124658746748177543832367820875787516380230311817562929218294096243813165231014238938523739493229521");
  EXPECT_EQ(cosh(Real("1000000")).toString(), "1.5166076984010437725432010707090571635419868974067387048030974998931132315932118262378896014238733712231453572791977727160648924261330240557869860774850358098312131563768360829761690407034195827198088986937033466934046726913218958947601036565089018349581925436647068674894225777805207965238477572592464354499304442433954381395399968367300979907629021482576602691540020197706252822827022193134154228496566284261501675246544829778210486724753160797320622498901320808395701922250790368495099757883193218*10^434294");
  EXPECT_EQ(cosh(Real("-1000000")).toString(), "1.5166076984010437725432010707090571635419868974067387048030974998931132315932118262378896014238733712231453572791977727160648924261330240557869860774850358098312131563768360829761690407034195827198088986937033466934046726913218958947601036565089018349581925436647068674894225777805207965238477572592464354499304442433954381395399968367300979907629021482576602691540020197706252822827022193134154228496566284261501675246544829778210486724753160797320622498901320808395701922250790368495099757883193218*10^434294");

  EXPECT_THAT(
    [] { cosh(getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("cosh(60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (result overflow)")
    )
  );
  EXPECT_THAT(
    [] { cosh(-getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("cosh(-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (result overflow)")
    )
  );
  EXPECT_EQ(cosh(1 / getBottom()).toString(), "1.0");
  EXPECT_EQ(cosh(-1 / getBottom()).toString(), "1.0");
  EXPECT_EQ(cosh(1 + 1 / getBottom()).toString(), "1.5430806348152437784779056207570616826015291123658637047374022147107690630492236989642647264355430355870468586044235275650321946947095862907634939423773472069151633480026408029059364105029494057980033657762593319443209506958499136898103743054847127392984561603903858174714536360045187363068275143488012027205749727055244716707064471032711422829394484116772731021396329586672730122826261409857215459162042522453939258584439199475134380734969475319971032521055637731102374474158960765443652715148207669");
  EXPECT_EQ(cosh(1 - 1 / getBottom()).toString(), "1.5430806348152437784779056207570616826015291123658637047374022147107690630492236989642647264355430355870468586044235275650321946947095862907634939423773472069151633480026408029059364105029494057980033657762593319443209506958499136898103743054847127392984561603903858174714536360045187363068275143488012027205749727055244716707064471032711422829394484116772731021396329586672730122826261409857215459162042522453939258584439199475134380734969475319971032521055637731102374474158960765443652715148207669");
  EXPECT_EQ(cosh(-1 + 1 / getBottom()).toString(), "1.5430806348152437784779056207570616826015291123658637047374022147107690630492236989642647264355430355870468586044235275650321946947095862907634939423773472069151633480026408029059364105029494057980033657762593319443209506958499136898103743054847127392984561603903858174714536360045187363068275143488012027205749727055244716707064471032711422829394484116772731021396329586672730122826261409857215459162042522453939258584439199475134380734969475319971032521055637731102374474158960765443652715148207669");
  EXPECT_EQ(cosh(-1 - 1 / getBottom()).toString(), "1.5430806348152437784779056207570616826015291123658637047374022147107690630492236989642647264355430355870468586044235275650321946947095862907634939423773472069151633480026408029059364105029494057980033657762593319443209506958499136898103743054847127392984561603903858174714536360045187363068275143488012027205749727055244716707064471032711422829394484116772731021396329586672730122826261409857215459162042522453939258584439199475134380734969475319971032521055637731102374474158960765443652715148207669");

  EXPECT_THAT(
    [] { cosh(getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("cosh(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (result overflow)")
    )
  );
  EXPECT_THAT(
    [] { cosh(-getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("cosh(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (result overflow)")
    )
  );
  EXPECT_EQ(cosh(1 / getTop()).toString(), "1.0");
  EXPECT_EQ(cosh(-1 / getTop()).toString(), "1.0");
  EXPECT_EQ(cosh(1 + 1 / getTop()).toString(), "1.5430806348152437784779056207570616826015291123658637047374022147107690630492236989642647264355430355870468586044235275650321946947095862907634939423773472069151633480026408029059364105029494057980033657762593319443209506958499136898103743054847127392984561603903858174714536360045187363068275143488012027205749727055244716707064471032711422829394484116772731021396329586672730122826261409857215459162042522453939258584439199475134380734969475319971032521055637731102374474158960765443652715148207669");
  EXPECT_EQ(cosh(1 - 1 / getTop()).toString(), "1.5430806348152437784779056207570616826015291123658637047374022147107690630492236989642647264355430355870468586044235275650321946947095862907634939423773472069151633480026408029059364105029494057980033657762593319443209506958499136898103743054847127392984561603903858174714536360045187363068275143488012027205749727055244716707064471032711422829394484116772731021396329586672730122826261409857215459162042522453939258584439199475134380734969475319971032521055637731102374474158960765443652715148207669");
  EXPECT_EQ(cosh(-1 + 1 / getTop()).toString(), "1.5430806348152437784779056207570616826015291123658637047374022147107690630492236989642647264355430355870468586044235275650321946947095862907634939423773472069151633480026408029059364105029494057980033657762593319443209506958499136898103743054847127392984561603903858174714536360045187363068275143488012027205749727055244716707064471032711422829394484116772731021396329586672730122826261409857215459162042522453939258584439199475134380734969475319971032521055637731102374474158960765443652715148207669");
  EXPECT_EQ(cosh(-1 - 1 / getTop()).toString(), "1.5430806348152437784779056207570616826015291123658637047374022147107690630492236989642647264355430355870468586044235275650321946947095862907634939423773472069151633480026408029059364105029494057980033657762593319443209506958499136898103743054847127392984561603903858174714536360045187363068275143488012027205749727055244716707064471032711422829394484116772731021396329586672730122826261409857215459162042522453939258584439199475134380734969475319971032521055637731102374474158960765443652715148207669");
}

TEST(RealFunctionsTests, tanhTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(tanh(Real("0")).toString(), "0.0");
  EXPECT_EQ(tanh(Real("-0")).toString(), "-0.0");
  EXPECT_EQ(tanh(Real("1")).toString(), "0.76159415595576488811945828260479359041276859725793655159681050012195324457663848345894752167367671442190275970155407753236830911476248541329700666961132112539651013760808777643934099260420667955311747580113059006625778319752451237997591796119707757354591410814335043351567518059703276048802963895774140411055528274345747412887011673202243366614182042652138531498400801780942494059716650201970771112780762115100557417027786836013212010823078830175221024750850545493659202265152413525903793814306804484");
  EXPECT_EQ(tanh(Real("-1")).toString(), "-0.76159415595576488811945828260479359041276859725793655159681050012195324457663848345894752167367671442190275970155407753236830911476248541329700666961132112539651013760808777643934099260420667955311747580113059006625778319752451237997591796119707757354591410814335043351567518059703276048802963895774140411055528274345747412887011673202243366614182042652138531498400801780942494059716650201970771112780762115100557417027786836013212010823078830175221024750850545493659202265152413525903793814306804484");
  EXPECT_EQ(tanh(Real("-10")).toString(), "-0.99999999587769276361959283713827574105081461849501996226140069543680188089876682610651332495069023186972594195440363277723624598935122112440069080032115324852030221370176075706784328596681042097167304971561185014681914071046105155116929711575041632291885682046344687578127127378663128356531074774188950457761545651571845725123775892342065718865628066593586139144590877440112159808017122001606191995699617317633908518383704737642531119106680691544131671862104511838933336178182094978245610587892680611");
  EXPECT_EQ(tanh(Real("1.5")).toString(), "0.90514825364486643824230369645649559722764113515878179856422398245110257699457953222843269101787992198816384606649913310622603564592634684340525624846730061861687883119099234115393484765923872777837195630862043546376347603797951539605486739277429280113414587707105343910689582734795135162623708843908897111414918276778575826105640243378448095138635623465280403620875453278721442624467678545763846839133816738080129681138567975955106015534793342340598634645685414817360153396968748805911380462289187205");
  EXPECT_EQ(tanh(Real("1000000")).toString(), "1.0");
  EXPECT_EQ(tanh(Real("-1000000")).toString(), "-1.0");

  EXPECT_EQ(tanh(getBottom()).toString(), "1.0");
  EXPECT_EQ(tanh(-getBottom()).toString(), "-1.0");
  EXPECT_EQ(tanh(1 / getBottom()).toString(), "1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500");
  EXPECT_EQ(tanh(-1 / getBottom()).toString(), "-1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500");
  EXPECT_EQ(tanh(1 + 1 / getBottom()).toString(), "0.76159415595576488811945828260479359041276859725793655159681050012195324457663848345894752167367671442190275970155407753236830911476248541329700666961132112539651013760808777643934099260420667955311747580113059006625778319752451237997591796119707757354591410814335043351567518059703276048802963895774140411055528274345747412887011673202243366614182042652138531498400801780942494059716650201970771112780762115100557417027786836013212010823078830175221024750850545493659202265152413525903793814306804485");
  EXPECT_EQ(tanh(1 - 1 / getBottom()).toString(), "0.76159415595576488811945828260479359041276859725793655159681050012195324457663848345894752167367671442190275970155407753236830911476248541329700666961132112539651013760808777643934099260420667955311747580113059006625778319752451237997591796119707757354591410814335043351567518059703276048802963895774140411055528274345747412887011673202243366614182042652138531498400801780942494059716650201970771112780762115100557417027786836013212010823078830175221024750850545493659202265152413525903793814306804483");
  EXPECT_EQ(tanh(-1 + 1 / getBottom()).toString(), "-0.76159415595576488811945828260479359041276859725793655159681050012195324457663848345894752167367671442190275970155407753236830911476248541329700666961132112539651013760808777643934099260420667955311747580113059006625778319752451237997591796119707757354591410814335043351567518059703276048802963895774140411055528274345747412887011673202243366614182042652138531498400801780942494059716650201970771112780762115100557417027786836013212010823078830175221024750850545493659202265152413525903793814306804483");
  EXPECT_EQ(tanh(-1 - 1 / getBottom()).toString(), "-0.76159415595576488811945828260479359041276859725793655159681050012195324457663848345894752167367671442190275970155407753236830911476248541329700666961132112539651013760808777643934099260420667955311747580113059006625778319752451237997591796119707757354591410814335043351567518059703276048802963895774140411055528274345747412887011673202243366614182042652138531498400801780942494059716650201970771112780762115100557417027786836013212010823078830175221024750850545493659202265152413525903793814306804485");

  EXPECT_EQ(tanh(getTop()).toString(), "1.0");
  EXPECT_EQ(tanh(-getTop()).toString(), "-1.0");
  EXPECT_THAT(
    [] { tanh(1 / getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("tanh(6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow)")
    )
  );
  EXPECT_THAT(
    [] { tanh(-1 / getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("tanh(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow)")
    )
  );
  EXPECT_EQ(tanh(1 + 1 / getTop()).toString(), "0.76159415595576488811945828260479359041276859725793655159681050012195324457663848345894752167367671442190275970155407753236830911476248541329700666961132112539651013760808777643934099260420667955311747580113059006625778319752451237997591796119707757354591410814335043351567518059703276048802963895774140411055528274345747412887011673202243366614182042652138531498400801780942494059716650201970771112780762115100557417027786836013212010823078830175221024750850545493659202265152413525903793814306804484");
  EXPECT_EQ(tanh(1 - 1 / getTop()).toString(), "0.76159415595576488811945828260479359041276859725793655159681050012195324457663848345894752167367671442190275970155407753236830911476248541329700666961132112539651013760808777643934099260420667955311747580113059006625778319752451237997591796119707757354591410814335043351567518059703276048802963895774140411055528274345747412887011673202243366614182042652138531498400801780942494059716650201970771112780762115100557417027786836013212010823078830175221024750850545493659202265152413525903793814306804484");
  EXPECT_EQ(tanh(-1 + 1 / getTop()).toString(), "-0.76159415595576488811945828260479359041276859725793655159681050012195324457663848345894752167367671442190275970155407753236830911476248541329700666961132112539651013760808777643934099260420667955311747580113059006625778319752451237997591796119707757354591410814335043351567518059703276048802963895774140411055528274345747412887011673202243366614182042652138531498400801780942494059716650201970771112780762115100557417027786836013212010823078830175221024750850545493659202265152413525903793814306804484");
  EXPECT_EQ(tanh(-1 - 1 / getTop()).toString(), "-0.76159415595576488811945828260479359041276859725793655159681050012195324457663848345894752167367671442190275970155407753236830911476248541329700666961132112539651013760808777643934099260420667955311747580113059006625778319752451237997591796119707757354591410814335043351567518059703276048802963895774140411055528274345747412887011673202243366614182042652138531498400801780942494059716650201970771112780762115100557417027786836013212010823078830175221024750850545493659202265152413525903793814306804484");
}

TEST(RealFunctionsTests, cothTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(coth(Real("1")).toString(), "1.3130352854993313036361612469308478329120139412404526555431529675670842704618743826746792414808563029467947050738448204197703961861267108989696017535496187432786603952677415430193164214901222207116902698721736279449551078863534426431459421512705491545530284902291249287850149672463612993918572556026640725698026338831716611079696232602874932353108307435238960892539297808523447222896268792900584895961848078828348145997881467167886864925710322604873807663078752942123708924231550111748471298599194883");
  EXPECT_EQ(coth(Real("-1")).toString(), "-1.3130352854993313036361612469308478329120139412404526555431529675670842704618743826746792414808563029467947050738448204197703961861267108989696017535496187432786603952677415430193164214901222207116902698721736279449551078863534426431459421512705491545530284902291249287850149672463612993918572556026640725698026338831716611079696232602874932353108307435238960892539297808523447222896268792900584895961848078828348145997881467167886864925710322604873807663078752942123708924231550111748471298599194883");
  EXPECT_EQ(coth(Real("200")).toString(), "1.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000038303391934280113900396795573085287014841855524448953631021607422417646473573760059507801414331691466209937002832713535194020115091227231599793300253123583380378786696229319672772120386416997445670439552281318152281668340867503976012400453575958901885856116905302318946467013430357677968237169269573544570155512584968141826895");
  EXPECT_EQ(coth(Real("0.001")).toString(), "1000.0003333333111111132275130158730372508128641887448236432439795543114729807153254114482587616590903727706298998985853351209233276211395607849063256242229428450694565780626672470531710727943388092505107386416560257427382464277011318403943334868282617859483860836013434754673344838329233034140082802259546514283321520764948797860429100584080842871729723162311625968708950842631100447087303126022291471917210087667595609631298555089952496586378122482454668445694499448905241095228274357354349242116424");
  EXPECT_EQ(coth(Real("1000000")).toString(), "1.0");
  EXPECT_EQ(coth(Real("-1000000")).toString(), "-1.0");

  EXPECT_THAT(
    [] { coth(Real("0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("coth(0.0) is undefined (div(1.0, 0.0) is undefined (division by zero))")
    )
  );
  EXPECT_THAT(
    [] { coth(Real("-0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("coth(-0.0) is undefined (div(1.0, -0.0) is undefined (division by zero))")
    )
  );

  EXPECT_EQ(coth(getBottom()).toString(), "1.0");
  EXPECT_EQ(coth(-getBottom()).toString(), "-1.0");
  EXPECT_EQ(coth(1 / getBottom()).toString(), "60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0");
  EXPECT_EQ(coth(-1 / getBottom()).toString(), "-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0");
  EXPECT_EQ(coth(1 + 1 / getBottom()).toString(), "1.3130352854993313036361612469308478329120139412404526555431529675670842704618743826746792414808563029467947050738448204197703961861267108989696017535496187432786603952677415430193164214901222207116902698721736279449551078863534426431459421512705491545530284902291249287850149672463612993918572556026640725698026338831716611079696232602874932353108307435238960892539297808523447222896268792900584895961848078828348145997881467167886864925710322604873807663078752942123708924231550111748471298599194883");
  EXPECT_EQ(coth(1 - 1 / getBottom()).toString(), "1.3130352854993313036361612469308478329120139412404526555431529675670842704618743826746792414808563029467947050738448204197703961861267108989696017535496187432786603952677415430193164214901222207116902698721736279449551078863534426431459421512705491545530284902291249287850149672463612993918572556026640725698026338831716611079696232602874932353108307435238960892539297808523447222896268792900584895961848078828348145997881467167886864925710322604873807663078752942123708924231550111748471298599194883");
  EXPECT_EQ(coth(-1 + 1 / getBottom()).toString(), "-1.3130352854993313036361612469308478329120139412404526555431529675670842704618743826746792414808563029467947050738448204197703961861267108989696017535496187432786603952677415430193164214901222207116902698721736279449551078863534426431459421512705491545530284902291249287850149672463612993918572556026640725698026338831716611079696232602874932353108307435238960892539297808523447222896268792900584895961848078828348145997881467167886864925710322604873807663078752942123708924231550111748471298599194883");
  EXPECT_EQ(coth(-1 - 1 / getBottom()).toString(), "-1.3130352854993313036361612469308478329120139412404526555431529675670842704618743826746792414808563029467947050738448204197703961861267108989696017535496187432786603952677415430193164214901222207116902698721736279449551078863534426431459421512705491545530284902291249287850149672463612993918572556026640725698026338831716611079696232602874932353108307435238960892539297808523447222896268792900584895961848078828348145997881467167886864925710322604873807663078752942123708924231550111748471298599194883");

  EXPECT_EQ(coth(getTop()).toString(), "1.0");
  EXPECT_EQ(coth(-getTop()).toString(), "-1.0");
  EXPECT_THAT(
    [] { coth(1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("coth(6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (tanh(6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow))")
    )
  );
  EXPECT_THAT(
    [] { coth(-1 / getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("coth(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (tanh(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow))")
    )
  );
  EXPECT_EQ(coth(1 + 1 / getTop()).toString(), "1.3130352854993313036361612469308478329120139412404526555431529675670842704618743826746792414808563029467947050738448204197703961861267108989696017535496187432786603952677415430193164214901222207116902698721736279449551078863534426431459421512705491545530284902291249287850149672463612993918572556026640725698026338831716611079696232602874932353108307435238960892539297808523447222896268792900584895961848078828348145997881467167886864925710322604873807663078752942123708924231550111748471298599194883");
  EXPECT_EQ(coth(1 - 1 / getTop()).toString(), "1.3130352854993313036361612469308478329120139412404526555431529675670842704618743826746792414808563029467947050738448204197703961861267108989696017535496187432786603952677415430193164214901222207116902698721736279449551078863534426431459421512705491545530284902291249287850149672463612993918572556026640725698026338831716611079696232602874932353108307435238960892539297808523447222896268792900584895961848078828348145997881467167886864925710322604873807663078752942123708924231550111748471298599194883");
  EXPECT_EQ(coth(-1 + 1 / getTop()).toString(), "-1.3130352854993313036361612469308478329120139412404526555431529675670842704618743826746792414808563029467947050738448204197703961861267108989696017535496187432786603952677415430193164214901222207116902698721736279449551078863534426431459421512705491545530284902291249287850149672463612993918572556026640725698026338831716611079696232602874932353108307435238960892539297808523447222896268792900584895961848078828348145997881467167886864925710322604873807663078752942123708924231550111748471298599194883");
  EXPECT_EQ(coth(-1 - 1 / getTop()).toString(), "-1.3130352854993313036361612469308478329120139412404526555431529675670842704618743826746792414808563029467947050738448204197703961861267108989696017535496187432786603952677415430193164214901222207116902698721736279449551078863534426431459421512705491545530284902291249287850149672463612993918572556026640725698026338831716611079696232602874932353108307435238960892539297808523447222896268792900584895961848078828348145997881467167886864925710322604873807663078752942123708924231550111748471298599194883");
}

TEST(RealFunctionsTests, sechTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(sech(Real("0")).toString(), "1.0");
  EXPECT_EQ(sech(Real("-0")).toString(), "1.0");
  EXPECT_EQ(sech(Real("1")).toString(), "0.64805427366388539957497735322615032310848931207194202303786533731871759564671283028085478530789289238484741080920067693803371342199608047328527095053204320637710138926219751549816225165048045954767037456642342841785116074316762362109780982148957951547955724736187053107831495505487985321572485483727544183904287647250786507031934414748522969445640178730087299069355083406660792094751146726395612000124233338654264471442651311028781015766133420886738838930728215565261724863512460842165916753490629436");
  EXPECT_EQ(sech(Real("-1")).toString(), "0.64805427366388539957497735322615032310848931207194202303786533731871759564671283028085478530789289238484741080920067693803371342199608047328527095053204320637710138926219751549816225165048045954767037456642342841785116074316762362109780982148957951547955724736187053107831495505487985321572485483727544183904287647250786507031934414748522969445640178730087299069355083406660792094751146726395612000124233338654264471442651311028781015766133420886738838930728215565261724863512460842165916753490629436");
  EXPECT_EQ(sech(Real("360")).toString(), "9.0160541312134836868594093056048781135886063264031045543166320171424640100585882750111676606707679687798370808229846475098013788288893479045365187439243562588172707510472221597293237365990886510719036721249726917243026017147558624482756185584536093876579417138589896111836329466097327949593815608999431443286434895483252097658897022968306978939693485674151172251112364819206851109443108256063175917164862533282035464946491027808962419554350193283228593523189612433017700351671212631029111311660331076*10^-157");
  EXPECT_EQ(sech(Real("1000000")).toString(), "6.5936629561771171579378159382154484171228030133167403192941769797906985007591094541101544505266576590003136623166279624437072289948914410518596660796372850144818311771718689218961756235736614332305572015788134843142823987619684063908579723392812450600316769828831818379538015455924132128248931752957164658625567427893359723762484980284103878781196254875345414062804199987764098081657081303453035863381229295149281777943984386777373544544747833870835791847918279021119342276015780078343555344003180895*10^-434295");
  EXPECT_EQ(sech(Real("-1000000")).toString(), "6.5936629561771171579378159382154484171228030133167403192941769797906985007591094541101544505266576590003136623166279624437072289948914410518596660796372850144818311771718689218961756235736614332305572015788134843142823987619684063908579723392812450600316769828831818379538015455924132128248931752957164658625567427893359723762484980284103878781196254875345414062804199987764098081657081303453035863381229295149281777943984386777373544544747833870835791847918279021119342276015780078343555344003180895*10^-434295");

  EXPECT_THAT(
    [] { sech(getBottom()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sech(60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (cosh(60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (result overflow))")
    )
  );
  EXPECT_THAT(
    [] { sech(-getBottom()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sech(-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (cosh(-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (result overflow))")
    )
  );
  EXPECT_EQ(sech(1 / getBottom()).toString(), "1.0");
  EXPECT_EQ(sech(-1 / getBottom()).toString(), "1.0");
  EXPECT_EQ(sech(1 + 1 / getBottom()).toString(), "0.64805427366388539957497735322615032310848931207194202303786533731871759564671283028085478530789289238484741080920067693803371342199608047328527095053204320637710138926219751549816225165048045954767037456642342841785116074316762362109780982148957951547955724736187053107831495505487985321572485483727544183904287647250786507031934414748522969445640178730087299069355083406660792094751146726395612000124233338654264471442651311028781015766133420886738838930728215565261724863512460842165916753490629435");
  EXPECT_EQ(sech(1 - 1 / getBottom()).toString(), "0.64805427366388539957497735322615032310848931207194202303786533731871759564671283028085478530789289238484741080920067693803371342199608047328527095053204320637710138926219751549816225165048045954767037456642342841785116074316762362109780982148957951547955724736187053107831495505487985321572485483727544183904287647250786507031934414748522969445640178730087299069355083406660792094751146726395612000124233338654264471442651311028781015766133420886738838930728215565261724863512460842165916753490629437");
  EXPECT_EQ(sech(-1 + 1 / getBottom()).toString(), "0.64805427366388539957497735322615032310848931207194202303786533731871759564671283028085478530789289238484741080920067693803371342199608047328527095053204320637710138926219751549816225165048045954767037456642342841785116074316762362109780982148957951547955724736187053107831495505487985321572485483727544183904287647250786507031934414748522969445640178730087299069355083406660792094751146726395612000124233338654264471442651311028781015766133420886738838930728215565261724863512460842165916753490629437");
  EXPECT_EQ(sech(-1 - 1 / getBottom()).toString(), "0.64805427366388539957497735322615032310848931207194202303786533731871759564671283028085478530789289238484741080920067693803371342199608047328527095053204320637710138926219751549816225165048045954767037456642342841785116074316762362109780982148957951547955724736187053107831495505487985321572485483727544183904287647250786507031934414748522969445640178730087299069355083406660792094751146726395612000124233338654264471442651311028781015766133420886738838930728215565261724863512460842165916753490629435");

  EXPECT_THAT(
    [] { sech(getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sech(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (cosh(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (result overflow))")
    )
  );
  EXPECT_THAT(
    [] { sech(-getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("sech(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (cosh(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (result overflow))")
    )
  );
  EXPECT_EQ(sech(1 / getTop()).toString(), "1.0");
  EXPECT_EQ(sech(-1 / getTop()).toString(), "1.0");
  EXPECT_EQ(sech(1 + 1 / getTop()).toString(), "0.64805427366388539957497735322615032310848931207194202303786533731871759564671283028085478530789289238484741080920067693803371342199608047328527095053204320637710138926219751549816225165048045954767037456642342841785116074316762362109780982148957951547955724736187053107831495505487985321572485483727544183904287647250786507031934414748522969445640178730087299069355083406660792094751146726395612000124233338654264471442651311028781015766133420886738838930728215565261724863512460842165916753490629435");
  EXPECT_EQ(sech(1 - 1 / getTop()).toString(), "0.64805427366388539957497735322615032310848931207194202303786533731871759564671283028085478530789289238484741080920067693803371342199608047328527095053204320637710138926219751549816225165048045954767037456642342841785116074316762362109780982148957951547955724736187053107831495505487985321572485483727544183904287647250786507031934414748522969445640178730087299069355083406660792094751146726395612000124233338654264471442651311028781015766133420886738838930728215565261724863512460842165916753490629436");
  EXPECT_EQ(sech(-1 + 1 / getTop()).toString(), "0.64805427366388539957497735322615032310848931207194202303786533731871759564671283028085478530789289238484741080920067693803371342199608047328527095053204320637710138926219751549816225165048045954767037456642342841785116074316762362109780982148957951547955724736187053107831495505487985321572485483727544183904287647250786507031934414748522969445640178730087299069355083406660792094751146726395612000124233338654264471442651311028781015766133420886738838930728215565261724863512460842165916753490629436");
  EXPECT_EQ(sech(-1 - 1 / getTop()).toString(), "0.64805427366388539957497735322615032310848931207194202303786533731871759564671283028085478530789289238484741080920067693803371342199608047328527095053204320637710138926219751549816225165048045954767037456642342841785116074316762362109780982148957951547955724736187053107831495505487985321572485483727544183904287647250786507031934414748522969445640178730087299069355083406660792094751146726395612000124233338654264471442651311028781015766133420886738838930728215565261724863512460842165916753490629435");
}

TEST(RealFunctionsTests, cschTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(csch(Real("1")).toString(), "0.85091812823932154513384276328717528418172466091033961699042115172900336432146510389973017732889381236244577208756327128688813072425711300301245714193374017994952769110096460382194385355935195067438882126357436553537332427446054349644213938204921347277018075690693498752022695416702001165378305540256814299412503544882032859324691046068505985960347029085439306176440022553590441722160679621286381402767940097301844636744314043849892045810662300858561471713244460798164774405712623774000961019889161075");
  EXPECT_EQ(csch(Real("-1")).toString(), "-0.85091812823932154513384276328717528418172466091033961699042115172900336432146510389973017732889381236244577208756327128688813072425711300301245714193374017994952769110096460382194385355935195067438882126357436553537332427446054349644213938204921347277018075690693498752022695416702001165378305540256814299412503544882032859324691046068505985960347029085439306176440022553590441722160679621286381402767940097301844636744314043849892045810662300858561471713244460798164774405712623774000961019889161075");
  EXPECT_EQ(csch(Real("125")).toString(), "1.0332841265675721960505437214715115728551601889626861910405726604708228332416092881854306944989230030460236167836137359397081822921002801470512203174228780621055856609786688437579101831007292377825499274878287336648478287736672235107826213641009163027328639052382154566248395104535246559872642789556752337532973174231774610727790703071181803845915514461183667677762535606054101393902850089254396725865399242781044473195976260786636003301855557383763585055800394487043155974556701151211812188176233042*10^-54");
  EXPECT_EQ(csch(Real("1000000")).toString(), "6.5936629561771171579378159382154484171228030133167403192941769797906985007591094541101544505266576590003136623166279624437072289948914410518596660796372850144818311771718689218961756235736614332305572015788134843142823987619684063908579723392812450600316769828831818379538015455924132128248931752957164658625567427893359723762484980284103878781196254875345414062804199987764098081657081303453035863381229295149281777943984386777373544544747833870835791847918279021119342276015780078343555344003180895*10^-434295");
  EXPECT_EQ(csch(Real("-1000000")).toString(), "-6.5936629561771171579378159382154484171228030133167403192941769797906985007591094541101544505266576590003136623166279624437072289948914410518596660796372850144818311771718689218961756235736614332305572015788134843142823987619684063908579723392812450600316769828831818379538015455924132128248931752957164658625567427893359723762484980284103878781196254875345414062804199987764098081657081303453035863381229295149281777943984386777373544544747833870835791847918279021119342276015780078343555344003180895*10^-434295");

  EXPECT_THAT(
    [] { csch(Real("0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("csch(0.0) is undefined (div(1.0, 0.0) is undefined (division by zero))")
    )
  );
  EXPECT_THAT(
    [] { csch(Real("-0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("csch(-0.0) is undefined (div(1.0, -0.0) is undefined (division by zero))")
    )
  );

  EXPECT_THAT(
    [] { csch(getBottom()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("csch(60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (sinh(60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (result overflow))")
    )
  );
  EXPECT_THAT(
    [] { csch(-getBottom()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("csch(-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (sinh(-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (result overflow))")
    )
  );
  EXPECT_EQ(csch(1 / getBottom()).toString(), "60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0");
  EXPECT_EQ(csch(-1 / getBottom()).toString(), "-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0");
  EXPECT_EQ(csch(1 + 1 / getBottom()).toString(), "0.85091812823932154513384276328717528418172466091033961699042115172900336432146510389973017732889381236244577208756327128688813072425711300301245714193374017994952769110096460382194385355935195067438882126357436553537332427446054349644213938204921347277018075690693498752022695416702001165378305540256814299412503544882032859324691046068505985960347029085439306176440022553590441722160679621286381402767940097301844636744314043849892045810662300858561471713244460798164774405712623774000961019889161073");
  EXPECT_EQ(csch(1 - 1 / getBottom()).toString(), "0.85091812823932154513384276328717528418172466091033961699042115172900336432146510389973017732889381236244577208756327128688813072425711300301245714193374017994952769110096460382194385355935195067438882126357436553537332427446054349644213938204921347277018075690693498752022695416702001165378305540256814299412503544882032859324691046068505985960347029085439306176440022553590441722160679621286381402767940097301844636744314043849892045810662300858561471713244460798164774405712623774000961019889161077");
  EXPECT_EQ(csch(-1 + 1 / getBottom()).toString(), "-0.85091812823932154513384276328717528418172466091033961699042115172900336432146510389973017732889381236244577208756327128688813072425711300301245714193374017994952769110096460382194385355935195067438882126357436553537332427446054349644213938204921347277018075690693498752022695416702001165378305540256814299412503544882032859324691046068505985960347029085439306176440022553590441722160679621286381402767940097301844636744314043849892045810662300858561471713244460798164774405712623774000961019889161077");
  EXPECT_EQ(csch(-1 - 1 / getBottom()).toString(), "-0.85091812823932154513384276328717528418172466091033961699042115172900336432146510389973017732889381236244577208756327128688813072425711300301245714193374017994952769110096460382194385355935195067438882126357436553537332427446054349644213938204921347277018075690693498752022695416702001165378305540256814299412503544882032859324691046068505985960347029085439306176440022553590441722160679621286381402767940097301844636744314043849892045810662300858561471713244460798164774405712623774000961019889161073");

  EXPECT_THAT(
    [] { csch(getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("csch(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (sinh(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (result overflow))")
    )
  );
  EXPECT_THAT(
    [] { csch(-getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("csch(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (sinh(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (result overflow))")
    )
  );
  EXPECT_THAT(
    [] { csch(1 / getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("csch(6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (sinh(6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow))")
    )
  );
  EXPECT_THAT(
    [] { csch(-1 / getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("csch(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (sinh(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow))")
    )
  );
  EXPECT_EQ(csch(1 + 1 / getTop()).toString(), "0.85091812823932154513384276328717528418172466091033961699042115172900336432146510389973017732889381236244577208756327128688813072425711300301245714193374017994952769110096460382194385355935195067438882126357436553537332427446054349644213938204921347277018075690693498752022695416702001165378305540256814299412503544882032859324691046068505985960347029085439306176440022553590441722160679621286381402767940097301844636744314043849892045810662300858561471713244460798164774405712623774000961019889161074");
  EXPECT_EQ(csch(1 - 1 / getTop()).toString(), "0.85091812823932154513384276328717528418172466091033961699042115172900336432146510389973017732889381236244577208756327128688813072425711300301245714193374017994952769110096460382194385355935195067438882126357436553537332427446054349644213938204921347277018075690693498752022695416702001165378305540256814299412503544882032859324691046068505985960347029085439306176440022553590441722160679621286381402767940097301844636744314043849892045810662300858561471713244460798164774405712623774000961019889161075");
  EXPECT_EQ(csch(-1 + 1 / getTop()).toString(), "-0.85091812823932154513384276328717528418172466091033961699042115172900336432146510389973017732889381236244577208756327128688813072425711300301245714193374017994952769110096460382194385355935195067438882126357436553537332427446054349644213938204921347277018075690693498752022695416702001165378305540256814299412503544882032859324691046068505985960347029085439306176440022553590441722160679621286381402767940097301844636744314043849892045810662300858561471713244460798164774405712623774000961019889161075");
  EXPECT_EQ(csch(-1 - 1 / getTop()).toString(), "-0.85091812823932154513384276328717528418172466091033961699042115172900336432146510389973017732889381236244577208756327128688813072425711300301245714193374017994952769110096460382194385355935195067438882126357436553537332427446054349644213938204921347277018075690693498752022695416702001165378305540256814299412503544882032859324691046068505985960347029085439306176440022553590441722160679621286381402767940097301844636744314043849892045810662300858561471713244460798164774405712623774000961019889161074");
}

TEST(RealFunctionsTests, asinhTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(asinh(Real("0")).toString(), "0.0");
  EXPECT_EQ(asinh(Real("-0")).toString(), "-0.0");
  EXPECT_EQ(asinh(Real("1")).toString(), "0.88137358701954302523260932497979230902816032826163541075329560865337718422202608783370689191025604285673981619210649218876207251197659193752725546276579040922157868036289719624030735740962554897787156326236780650676303289540416355819005952730435167974467341511551586178006392610631334097262572894915748472288200076465594693049140628994381122451738158467277126319460884455255316858936825946495242451691598886050671829540158959591479483197050095772634225707401729190593428412086592318144508722640957213");
  EXPECT_EQ(asinh(Real("-1")).toString(), "-0.88137358701954302523260932497979230902816032826163541075329560865337718422202608783370689191025604285673981619210649218876207251197659193752725546276579040922157868036289719624030735740962554897787156326236780650676303289540416355819005952730435167974467341511551586178006392610631334097262572894915748472288200076465594693049140628994381122451738158467277126319460884455255316858936825946495242451691598886050671829540158959591479483197050095772634225707401729190593428412086592318144508722640957213");
  EXPECT_EQ(asinh(Real("10")).toString(), "2.9982229502979697388465955375964534766070580548773036557344592627530896573521660892245927552391289301685117204184544564003090787358329069604562491320816046506888907288930668063296761113122383771954824827065559549640163465985690170583729712790695028450456699468948151999289646051193291789113485811264166666053093984787849861532060758619536759668386184899755910040265307557384499220067058993213963242831577379376488161983397507367322474941945745330687632550535052193222795026609536297093497594878553644");
  EXPECT_EQ(asinh(Real("-10")).toString(), "-2.9982229502979697388465955375964534766070580548773036557344592627530896573521660892245927552391289301685117204184544564003090787358329069604562491320816046506888907288930668063296761113122383771954824827065559549640163465985690170583729712790695028450456699468948151999289646051193291789113485811264166666053093984787849861532060758619536759668386184899755910040265307557384499220067058993213963242831577379376488161983397507367322474941945745330687632550535052193222795026609536297093497594878553644");

  EXPECT_EQ(asinh(getBottom()).toString(), "1151.4854435107910205683414683366061078882486418235295386452906200946570972677111974895430572940805839184337371831189543587669560432707084787250541422492825598828384841024609317116054220602947216863597395091146246462156623856213461435584473683581161438305136955387987153590331605537885531891816764680447313482115276519127727666401719754440407634104220773569083968491814130462368341894306482997790282028573331750635353457104910553592436200842481954236838942173940623748983936341728324549070070575813421");
  EXPECT_EQ(asinh(-getBottom()).toString(), "-1151.4854435107910205683414683366061078882486418235295386452906200946570972677111974895430572940805839184337371831189543587669560432707084787250541422492825598828384841024609317116054220602947216863597395091146246462156623856213461435584473683581161438305136955387987153590331605537885531891816764680447313482115276519127727666401719754440407634104220773569083968491814130462368341894306482997790282028573331750635353457104910553592436200842481954236838942173940623748983936341728324549070070575813421");
  EXPECT_EQ(asinh(1 / getBottom()).toString(), "1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500");
  EXPECT_EQ(asinh(-1 / getBottom()).toString(), "-1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500");
  EXPECT_EQ(asinh(1 + 1 / getBottom()).toString(), "0.88137358701954302523260932497979230902816032826163541075329560865337718422202608783370689191025604285673981619210649218876207251197659193752725546276579040922157868036289719624030735740962554897787156326236780650676303289540416355819005952730435167974467341511551586178006392610631334097262572894915748472288200076465594693049140628994381122451738158467277126319460884455255316858936825946495242451691598886050671829540158959591479483197050095772634225707401729190593428412086592318144508722640957214");
  EXPECT_EQ(asinh(1 - 1 / getBottom()).toString(), "0.88137358701954302523260932497979230902816032826163541075329560865337718422202608783370689191025604285673981619210649218876207251197659193752725546276579040922157868036289719624030735740962554897787156326236780650676303289540416355819005952730435167974467341511551586178006392610631334097262572894915748472288200076465594693049140628994381122451738158467277126319460884455255316858936825946495242451691598886050671829540158959591479483197050095772634225707401729190593428412086592318144508722640957212");
  EXPECT_EQ(asinh(-1 + 1 / getBottom()).toString(), "-0.88137358701954302523260932497979230902816032826163541075329560865337718422202608783370689191025604285673981619210649218876207251197659193752725546276579040922157868036289719624030735740962554897787156326236780650676303289540416355819005952730435167974467341511551586178006392610631334097262572894915748472288200076465594693049140628994381122451738158467277126319460884455255316858936825946495242451691598886050671829540158959591479483197050095772634225707401729190593428412086592318144508722640957212");
  EXPECT_EQ(asinh(-1 - 1 / getBottom()).toString(), "-0.88137358701954302523260932497979230902816032826163541075329560865337718422202608783370689191025604285673981619210649218876207251197659193752725546276579040922157868036289719624030735740962554897787156326236780650676303289540416355819005952730435167974467341511551586178006392610631334097262572894915748472288200076465594693049140628994381122451738158467277126319460884455255316858936825946495242451691598886050671829540158959591479483197050095772634225707401729190593428412086592318144508722640957214");

  EXPECT_EQ(asinh(getTop()).toString(), "1152.4854438441245539018176589239077860990037756453300192692944639077298609394752946107525932528960239340920235321102525850798980092830320000555096031215066828506052468765296526295333712752885008572272341663841581776375690972457542070930899079323308648685613749345214020341581518739796542753060280950574892886732978215978223220554397586621190650226114565343493816622827928325467853708568759742433820344125690295321140284116420724299741831747169440212977865955687122877079873810781098497093732339145146");
  EXPECT_EQ(asinh(-getTop()).toString(), "-1152.4854438441245539018176589239077860990037756453300192692944639077298609394752946107525932528960239340920235321102525850798980092830320000555096031215066828506052468765296526295333712752885008572272341663841581776375690972457542070930899079323308648685613749345214020341581518739796542753060280950574892886732978215978223220554397586621190650226114565343493816622827928325467853708568759742433820344125690295321140284116420724299741831747169440212977865955687122877079873810781098497093732339145146");
  EXPECT_THAT(
    [] { asinh(1 / getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asinh(6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow)")
    )
  );
  EXPECT_THAT(
    [] { asinh(-1 / getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asinh(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow)")
    )
  );
  EXPECT_EQ(asinh(1 + 1 / getTop()).toString(), "0.88137358701954302523260932497979230902816032826163541075329560865337718422202608783370689191025604285673981619210649218876207251197659193752725546276579040922157868036289719624030735740962554897787156326236780650676303289540416355819005952730435167974467341511551586178006392610631334097262572894915748472288200076465594693049140628994381122451738158467277126319460884455255316858936825946495242451691598886050671829540158959591479483197050095772634225707401729190593428412086592318144508722640957213");
  EXPECT_EQ(asinh(1 - 1 / getTop()).toString(), "0.88137358701954302523260932497979230902816032826163541075329560865337718422202608783370689191025604285673981619210649218876207251197659193752725546276579040922157868036289719624030735740962554897787156326236780650676303289540416355819005952730435167974467341511551586178006392610631334097262572894915748472288200076465594693049140628994381122451738158467277126319460884455255316858936825946495242451691598886050671829540158959591479483197050095772634225707401729190593428412086592318144508722640957212");
  EXPECT_EQ(asinh(-1 + 1 / getTop()).toString(), "-0.88137358701954302523260932497979230902816032826163541075329560865337718422202608783370689191025604285673981619210649218876207251197659193752725546276579040922157868036289719624030735740962554897787156326236780650676303289540416355819005952730435167974467341511551586178006392610631334097262572894915748472288200076465594693049140628994381122451738158467277126319460884455255316858936825946495242451691598886050671829540158959591479483197050095772634225707401729190593428412086592318144508722640957212");
  EXPECT_EQ(asinh(-1 - 1 / getTop()).toString(), "-0.88137358701954302523260932497979230902816032826163541075329560865337718422202608783370689191025604285673981619210649218876207251197659193752725546276579040922157868036289719624030735740962554897787156326236780650676303289540416355819005952730435167974467341511551586178006392610631334097262572894915748472288200076465594693049140628994381122451738158467277126319460884455255316858936825946495242451691598886050671829540158959591479483197050095772634225707401729190593428412086592318144508722640957213");
}

TEST(RealFunctionsTests, acoshTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(acosh(Real("1")).toString(), "0.0");
  EXPECT_EQ(acosh(Real("1.5")).toString(), "0.9624236501192068949955178268487368462703686687713210393220363376803277352164435488240188582454469499944636799165873128225451366474534752455061184837288195083648340144236743004476478749383745504865583860375941580071234535938890915046106908683775305710651298041479938699323751126020424799273586164127199559770199603136515957052986573333022324834276165451855769580521930662264944550298628129970177864352732005133323906421359363515323694614703197207969691509082411264682714009560127897444863052357936009");
  EXPECT_EQ(acosh(Real("2")).toString(), "1.3169578969248167086250463473079684440269819714675164797684722569204601854164439760742190134501017835564654365656049793198098168621063715327267633457099206769058311287762569581704704373368637119409556504467967320008259374753779128904267720926333444215608442411897668706630346965128936149937499537698028627808731599409811428097663442379476682307349961925278153630369708948389904496288710224816511828830572848189519734408731840366524342889795548865144199047686542941645741789506721185816445558831470023");
  EXPECT_EQ(acosh(Real("10")).toString(), "2.9932228461263808979126677137741829130836604511809806426851456009774992267097398782806309627071306286046865176881901887028554896814935413690847474111985922493471912906011650028941172974869633641092903806482028247303316780128983728332606064702198928422287172145728944626745052216234707627773357746661996601495403999428221091494818161863753089238550874102387216275936737844716325739316027641823891247889708324367169731889324984924290373939321197822760725086953493673905982459240183481006562811521855309");
  EXPECT_EQ(acosh(Real("10000")).toString(), "9.9034875500361280361141978881122997233496952946044950260923836567032304913473953953515725690020423830616528288365523258767489061828343586434808328114258581397841702325146629897292350467756349150430346767665607862477177574083345392634284879969502968285783359747240559839678639708801405512480837902804708295990543604809597201948371269987208380244777001464587545463324020220343935621295486955507859950839246805950189125008128131560856033583621613460499389134966397916170999800412590099260076143420325062");

  EXPECT_THAT(
    [] { acosh(Real("0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acosh(0.0) is undefined (argument out of range)")
    )
  );
  EXPECT_THAT(
    [] { acosh(Real("-0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acosh(-0.0) is undefined (argument out of range)")
    )
  );
  EXPECT_THAT(
    [] { acosh(Real("-1")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acosh(-1.0) is undefined (argument out of range)")
    )
  );
  EXPECT_THAT(
    [] { acosh(Real("0.5")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acosh(0.5) is undefined (argument out of range)")
    )
  );
  EXPECT_THAT(
    [] { acosh(Real("-0.5")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acosh(-0.5) is undefined (argument out of range)")
    )
  );

  EXPECT_EQ(acosh(getBottom()).toString(), "1151.4854435107910205683414683366061078882486418235295386452906200946570972677111974895430572940805839184337371831189543587669560432707084787250541422492825598828384841024609317116054220602947216863597395091146246462156623856213461435584473683581161438305136955387987153590331605537885531891816764680447313482115276519127727666401719754440407634104220773569083968491814130462368341894306482997790282028573331750635353457104910553592436200842481954236838942173940623748983936341728324549070070575813421");
  EXPECT_THAT(
    [] { acosh(-getBottom()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acosh(-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (argument out of range)")
    )
  );
  EXPECT_THAT(
    [] { acosh(1 / getBottom()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acosh(1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500) is undefined (argument out of range)")
    )
  );
  EXPECT_THAT(
    [] { acosh(-1 / getBottom()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acosh(-1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500) is undefined (argument out of range)")
    )
  );
  EXPECT_EQ(acosh(1 + 1 / getBottom()).toString(), "1.8161133101249768313059767637749226167016555062135541295428599514579399162477525362449841992214659204923416486740342626879990151285206963843627887984484066329176548338000757254648982552487409334526566762732166521636845007859070742231176086199785002494824233671741808993871471604475449814991979005026904466371335432200684754360612792364909810664574323876073450385968843689808751624105899580384533574694605556028984635741348186918197680661361994642285426418712562403143105149802614347742290494321962424*10^-250");
  EXPECT_THAT(
    [] { acosh(1 - 1 / getBottom()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acoshis undefined (argument out of range)")
    )
  );
  EXPECT_THAT(
    [] { acosh(-1 + 1 / getBottom()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acoshis undefined (argument out of range)")
    )
  );
  EXPECT_THAT(
    [] { acosh(-1 - 1 / getBottom()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acosh(-1.0) is undefined (argument out of range)")
    )
  );

  EXPECT_EQ(acosh(getTop()).toString(), "1152.4854438441245539018176589239077860990037756453300192692944639077298609394752946107525932528960239340920235321102525850798980092830320000555096031215066828506052468765296526295333712752885008572272341663841581776375690972457542070930899079323308648685613749345214020341581518739796542753060280950574892886732978215978223220554397586621190650226114565343493816622827928325467853708568759742433820344125690295321140284116420724299741831747169440212977865955687122877079873810781098497093732339145146");
  EXPECT_THAT(
    [] { acosh(-getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acosh(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument out of range)")
    )
  );
  EXPECT_THAT(
    [] { acosh(1 / getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acosh(6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (argument out of range)")
    )
  );
  EXPECT_THAT(
    [] { acosh(-1 / getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acosh(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (argument out of range)")
    )
  );
  EXPECT_EQ(acosh(1 + 1 / getTop()).toString(), "1.1015282205148344113031315962232882607549581369854598556825953939712541702951560855963926471275061487735103376848102315248597150700630765059387426235333495755483505788503115382724106804445536940510466695827205469185322984760109337103739057002978598795971390260446685983828095271655143299592980169999703367652156688155730814358165398832394569722569002490431507814481217842691057439436763109599092031344149400752025936592695703741466909450253591955614422574626565454002410396637850800605126854091903233*10^-250");
  EXPECT_THAT(
    [] { acosh(1 - 1 / getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acoshis undefined (argument out of range)")
    )
  );
  EXPECT_THAT(
    [] { acosh(-1 + 1 / getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acoshis undefined (argument out of range)")
    )
  );
  EXPECT_THAT(
    [] { acosh(-1 - 1 / getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acosh(-1.0) is undefined (argument out of range)")
    )
  );
}

TEST(RealFunctionsTests, atanhTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(atanh(Real("0")).toString(), "0.0");
  EXPECT_EQ(atanh(Real("-0")).toString(), "-0.0");
  EXPECT_EQ(atanh(Real("0.333")).toString(), "0.34619863713154247570599098685804826103609094329948378301404880413603328167394351962984431122461634023514290948031983237010653082502383710411969497037700185034288291947812555415915624018289058114167215829473448898016693296117239767068765288453353874546879688588509527472127797230451642236773965637268386840777259731872792797439722710677660848463210316000632738984571681501515219339944295988966181227125287741569589464016162821348393994703181239553059740942030273093670294694522971556318809608720244053");
  EXPECT_EQ(atanh(Real("0.333")).toString(), "0.34619863713154247570599098685804826103609094329948378301404880413603328167394351962984431122461634023514290948031983237010653082502383710411969497037700185034288291947812555415915624018289058114167215829473448898016693296117239767068765288453353874546879688588509527472127797230451642236773965637268386840777259731872792797439722710677660848463210316000632738984571681501515219339944295988966181227125287741569589464016162821348393994703181239553059740942030273093670294694522971556318809608720244053");
  EXPECT_EQ(atanh(Real("0.5")).toString(), "0.54930614433405484569762261846126285232374527891137472586734716681874714660930448343680787740686604439398501453297893287118400211296525991052640093538363870530158138459169068358968684942218047995187128515839795576057279595887533567352747008338779011110158512647344878034505326075282143406901815868664928889118349582739606590907451001505191181506112432637409911299554872624544822902673350442298254287422205950942854382374743353980654291470580108306059200070491275719597438444683992471511278657676648427");
  EXPECT_EQ(atanh(Real("-0.5")).toString(), "-0.54930614433405484569762261846126285232374527891137472586734716681874714660930448343680787740686604439398501453297893287118400211296525991052640093538363870530158138459169068358968684942218047995187128515839795576057279595887533567352747008338779011110158512647344878034505326075282143406901815868664928889118349582739606590907451001505191181506112432637409911299554872624544822902673350442298254287422205950942854382374743353980654291470580108306059200070491275719597438444683992471511278657676648427");

  EXPECT_THAT(
    [] { atanh(Real("-1")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("atanh(-1.0) is undefined (result overflow)")
    )
  );
  EXPECT_THAT(
    [] { atanh(Real("1")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("atanh(1.0) is undefined (result overflow)")
    )
  );

  EXPECT_THAT(
    [] { atanh(getBottom()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("atanh(60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (argument out of range)")
    )
  );
  EXPECT_THAT(
    [] { atanh(-getBottom()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("atanh(-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (argument out of range)")
    )
  );
  EXPECT_EQ(atanh(1 / getBottom()).toString(), "1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500");
  EXPECT_EQ(atanh(-1 / getBottom()).toString(), "-1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500");
  EXPECT_THAT(
    [] { atanh(1 + 1 / getBottom()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("atanh(1.0) is undefined (argument out of range)")
    )
  );
  EXPECT_EQ(atanh(1 - 1 / getBottom()).toString(), "575.74272175539551028417073416830305394412432091176476932264531004732854863385559874477152864704029195921686859155947717938347802163535423936252707112464127994141924205123046585580271103014736084317986975455731232310783119281067307177922368417905807191525684776939935767951658027689427659459083823402236567410576382595638638332008598772202038170521103867845419842459070652311841709471532414988951410142866658753176767285524552767962181004212409771184194710869703118744919681708641622745350352879067105");
  EXPECT_EQ(atanh(-1 + 1 / getBottom()).toString(), "-575.74272175539551028417073416830305394412432091176476932264531004732854863385559874477152864704029195921686859155947717938347802163535423936252707112464127994141924205123046585580271103014736084317986975455731232310783119281067307177922368417905807191525684776939935767951658027689427659459083823402236567410576382595638638332008598772202038170521103867845419842459070652311841709471532414988951410142866658753176767285524552767962181004212409771184194710869703118744919681708641622745350352879067105");
  EXPECT_THAT(
    [] { atanh(-1 - 1 / getBottom()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("atanh(-1.0) is undefined (argument out of range)")
    )
  );

  EXPECT_THAT(
    [] { atanh(getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("atanh(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument out of range)")
    )
  );
  EXPECT_THAT(
    [] { atanh(-getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("atanh(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument out of range)")
    )
  );
  EXPECT_THAT(
    [] { atanh(1 / getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("atanh(6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow)")
    )
  );
  EXPECT_THAT(
    [] { atanh(-1 / getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("atanh(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow)")
    )
  );
  EXPECT_THAT(
    [] { atanh(1 + 1 / getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("atanh(1.0) is undefined (argument out of range)")
    )
  );
  EXPECT_EQ(atanh(1 - 1 / getTop()).toString(), "576.24272192206227695090882946195389304950188782266500963464723195386493046973764730537629662644801196704601176605512629253994900464151600002775480156075334142530262343826482631476668563764425042861361708319207908881878454862287710354654495396616543243428068746726070101707907593698982713765301404752874464433664891079891116102771987933105953251130572826717469083114139641627339268542843798712169101720628451476605701420582103621498709158735847201064889329778435614385399369053905492485468661695725731");
  EXPECT_EQ(atanh(-1 + 1 / getTop()).toString(), "-576.24272192206227695090882946195389304950188782266500963464723195386493046973764730537629662644801196704601176605512629253994900464151600002775480156075334142530262343826482631476668563764425042861361708319207908881878454862287710354654495396616543243428068746726070101707907593698982713765301404752874464433664891079891116102771987933105953251130572826717469083114139641627339268542843798712169101720628451476605701420582103621498709158735847201064889329778435614385399369053905492485468661695725731");
  EXPECT_THAT(
    [] { atanh(-1 - 1 / getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("atanh(-1.0) is undefined (argument out of range)")
    )
  );
}

TEST(RealFunctionsTests, acothTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(acoth(Real("1.5")).toString(), "0.80471895621705018730037966661309381976280067713425886095632394573708949385382888231506693904658980539998315151085778144986200261466233809981680830873185286377608981874859162282674642810117076252863507759680043988869486284409677035638307736561090476397426064641067902986128383614264362023079472408918233566433699921231887979659471192196717672552548752722709737025068299354393369160656528648602032974269191936183137693827278135908075582996545762160368245583893195033793629288938319579191841197521274398");
  EXPECT_EQ(acoth(Real("10")).toString(), "0.10033534773107558063572655206003894526336286914595913587458952092779251873800938966391159918758530691938783387811113351875978035336737387662484932463327662192265818415695618111535663512460816343078476158604773197655299116256578000302562833475826142160334576231904950939518157606652631377111261024044988605238524378382447243021532641796573671289263060402785620842098304759712947182570962823345398222622071416059967402676280166793797170249061535248316318134853833441271181230470756672448274054859950749");
  EXPECT_EQ(acoth(Real("-10")).toString(), "-0.10033534773107558063572655206003894526336286914595913587458952092779251873800938966391159918758530691938783387811113351875978035336737387662484932463327662192265818415695618111535663512460816343078476158604773197655299116256578000302562833475826142160334576231904950939518157606652631377111261024044988605238524378382447243021532641796573671289263060402785620842098304759712947182570962823345398222622071416059967402676280166793797170249061535248316318134853833441271181230470756672448274054859950749");
  EXPECT_EQ(acoth(Real("1000000")).toString(), "1.0000000000003333333333335333333333334761904761905873015873016782106782107551337551338218004218004806239512122391378831007790169926393271392163571860919690829874095283975828022345212989041356330600528686215480517790976833658290967943214330423945771447901567838740949898923463959982926831592832320699731200327474460887158676102648452426732872099468392344630693121604911565633353193154827823840273775285323654539196982943585718028584123194242214521410447558728089475965531459210710507581093455074511807*10^-6");
  EXPECT_EQ(acoth(Real("-1000000")).toString(), "-1.0000000000003333333333335333333333334761904761905873015873016782106782107551337551338218004218004806239512122391378831007790169926393271392163571860919690829874095283975828022345212989041356330600528686215480517790976833658290967943214330423945771447901567838740949898923463959982926831592832320699731200327474460887158676102648452426732872099468392344630693121604911565633353193154827823840273775285323654539196982943585718028584123194242214521410447558728089475965531459210710507581093455074511807*10^-6");

  EXPECT_THAT(
    [] { acoth(Real("0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acoth(0.0) is undefined (div(1.0, 0.0) is undefined (division by zero))")
    )
  );
  EXPECT_THAT(
    [] { acoth(Real("-0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acoth(-0.0) is undefined (div(1.0, -0.0) is undefined (division by zero))")
    )
  );
  EXPECT_THAT(
    [] { acoth(Real("1")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acoth(1.0) is undefined (atanh(1.0) is undefined (result overflow))")
    )
  );
  EXPECT_THAT(
    [] { acoth(Real("-1")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acoth(-1.0) is undefined (atanh(-1.0) is undefined (result overflow))")
    )
  );

  EXPECT_EQ(acoth(getBottom()).toString(), "1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500");
  EXPECT_EQ(acoth(-getBottom()).toString(), "-1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500");
  EXPECT_THAT(
    [] { acoth(1 / getBottom()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acoth(1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500) is undefined (atanh(60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (argument out of range))")
    )
  );
  EXPECT_THAT(
    [] { acoth(-1 / getBottom()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acoth(-1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500) is undefined (atanh(-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (argument out of range))")
    )
  );
  EXPECT_EQ(acoth(1 + 1 / getBottom()).toString(), "575.74272175539551028417073416830305394412432091176476932264531004732854863385559874477152864704029195921686859155947717938347802163535423936252707112464127994141924205123046585580271103014736084317986975455731232310783119281067307177922368417905807191525684776939935767951658027689427659459083823402236567410576382595638638332008598772202038170521103867845419842459070652311841709471532414988951410142866658753176767285524552767962181004212409771184194710869703118744919681708641622745350352879067105");
  EXPECT_THAT(
    [] { acoth(1 - 1 / getBottom()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acothis undefined (atanh(1.0) is undefined (argument out of range))")
    )
  );
  EXPECT_THAT(
    [] { acoth(-1 + 1 / getBottom()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acothis undefined (atanh(-1.0) is undefined (argument out of range))")
    )
  );
  EXPECT_EQ(acoth(-1 - 1 / getBottom()).toString(), "-575.74272175539551028417073416830305394412432091176476932264531004732854863385559874477152864704029195921686859155947717938347802163535423936252707112464127994141924205123046585580271103014736084317986975455731232310783119281067307177922368417905807191525684776939935767951658027689427659459083823402236567410576382595638638332008598772202038170521103867845419842459070652311841709471532414988951410142866658753176767285524552767962181004212409771184194710869703118744919681708641622745350352879067105");

  EXPECT_THAT(
    [] { acoth(getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acoth(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (atanh(6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow))")
    )
  );
  EXPECT_THAT(
    [] { acoth(-getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acoth(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (atanh(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow))")
    )
  );
  EXPECT_THAT(
    [] { acoth(1 / getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acoth(6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (atanh(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument out of range))")
    )
  );
  EXPECT_THAT(
    [] { acoth(-1 / getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acoth(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (atanh(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument out of range))")
    )
  );
  EXPECT_EQ(acoth(1 + 1 / getTop()).toString(), "576.24272192206227695090882946195389304950188782266500963464723195386493046973764730537629662644801196704601176605512629253994900464151600002775480156075334142530262343826482631476668563764425042861361708319207908881878454862287710354654495396616543243428068746726070101707907593698982713765301404752874464433664891079891116102771987933105953251130572826717469083114139641627339268542843798712169101720628451476605701420582103621498709158735847201064889329778435614385399369053905492485468661695725731");
  EXPECT_THAT(
    [] { acoth(1 - 1 / getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acothis undefined (atanh(1.0) is undefined (argument out of range))")
    )
  );
  EXPECT_THAT(
    [] { acoth(-1 + 1 / getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acothis undefined (atanh(-1.0) is undefined (argument out of range))")
    )
  );
  EXPECT_EQ(acoth(-1 - 1 / getTop()).toString(), "-576.24272192206227695090882946195389304950188782266500963464723195386493046973764730537629662644801196704601176605512629253994900464151600002775480156075334142530262343826482631476668563764425042861361708319207908881878454862287710354654495396616543243428068746726070101707907593698982713765301404752874464433664891079891116102771987933105953251130572826717469083114139641627339268542843798712169101720628451476605701420582103621498709158735847201064889329778435614385399369053905492485468661695725731");
}

TEST(RealFunctionsTests, asechTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(asech(Real("1")).toString(), "0.0");
  EXPECT_EQ(asech(Real("0.3")).toString(), "1.8738202425274144249769979852084091960595966794746295241858217517040005820158278851534411168211145658177843656484413350930215517691180087245903618033257617151356779496656583081325881056102755332268893719527517388687674565532297951023140595434050640501119683029827193523962603090554562844290616786755042820870552306427318016979538853991240878757931048535120391087062472168992069238168546806195419284235553712458438064751489527450865586998030775688278528233955918991340307831663886599765953189366294701");
  EXPECT_EQ(asech(Real("0.5")).toString(), "1.3169578969248167086250463473079684440269819714675164797684722569204601854164439760742190134501017835564654365656049793198098168621063715327267633457099206769058311287762569581704704373368637119409556504467967320008259374753779128904267720926333444215608442411897668706630346965128936149937499537698028627808731599409811428097663442379476682307349961925278153630369708948389904496288710224816511828830572848189519734408731840366524342889795548865144199047686542941645741789506721185816445558831470023");
  EXPECT_EQ(asech(Real("0.8")).toString(), "0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040607");

  EXPECT_THAT(
    [] { asech(Real("0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asech(0.0) is undefined (div(1.0, 0.0) is undefined (division by zero))")
    )
  );
  EXPECT_THAT(
    [] { asech(Real("-0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asech(-0.0) is undefined (div(1.0, -0.0) is undefined (division by zero))")
    )
  );
  EXPECT_THAT(
    [] { asech(Real("-1")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asech(-1.0) is undefined (acosh(-1.0) is undefined (argument out of range))")
    )
  );

  EXPECT_THAT(
    [] { asech(getBottom()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asech(60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (acosh(1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500) is undefined (argument out of range))")
    )
  );
  EXPECT_THAT(
    [] { asech(-getBottom()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asech(-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (acosh(-1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500) is undefined (argument out of range))")
    )
  );
  EXPECT_EQ(asech(1 / getBottom()).toString(), "1151.4854435107910205683414683366061078882486418235295386452906200946570972677111974895430572940805839184337371831189543587669560432707084787250541422492825598828384841024609317116054220602947216863597395091146246462156623856213461435584473683581161438305136955387987153590331605537885531891816764680447313482115276519127727666401719754440407634104220773569083968491814130462368341894306482997790282028573331750635353457104910553592436200842481954236838942173940623748983936341728324549070070575813421");
  EXPECT_THAT(
    [] { asech(-1 / getBottom()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asech(-1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500) is undefined (acosh(-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (argument out of range))")
    )
  );
  EXPECT_THAT(
    [] { asech(1 + 1 / getBottom()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asech(1.0) is undefined (acoshis undefined (argument out of range))")
    )
  );
  EXPECT_EQ(asech(1 - 1 / getBottom()).toString(), "1.8161133101249768313059767637749226167016555062135541295428599514579399162477525362449841992214659204923416486740342626879990151285206963843627887984484066329176548338000757254648982552487409334526566762732166521636845007859070742231176086199785002494824233671741808993871471604475449814991979005026904466371335432200684754360612792364909810664574323876073450385968843689808751624105899580384533574694605556028984635741348186918197680661361994642285426418712562403143105149802614347742290494321962424*10^-250");
  EXPECT_THAT(
    [] { asech(-1 + 1 / getBottom()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asechis undefined (acosh(-1.0) is undefined (argument out of range))")
    )
  );
  EXPECT_THAT(
    [] { asech(-1 - 1 / getBottom()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asech(-1.0) is undefined (acoshis undefined (argument out of range))")
    )
  );

  EXPECT_THAT(
    [] { asech(getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asech(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (acosh(6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (argument out of range))")
    )
  );
  EXPECT_THAT(
    [] { asech(-getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asech(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (acosh(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (argument out of range))")
    )
  );
  EXPECT_EQ(asech(1 / getTop()).toString(), "1152.4854438441245539018176589239077860990037756453300192692944639077298609394752946107525932528960239340920235321102525850798980092830320000555096031215066828506052468765296526295333712752885008572272341663841581776375690972457542070930899079323308648685613749345214020341581518739796542753060280950574892886732978215978223220554397586621190650226114565343493816622827928325467853708568759742433820344125690295321140284116420724299741831747169440212977865955687122877079873810781098497093732339145146");
  EXPECT_THAT(
    [] { asech(-1 / getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asech(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (acosh(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (argument out of range))")
    )
  );
  EXPECT_THAT(
    [] { asech(1 + 1 / getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asech(1.0) is undefined (acosh(0.99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999) is undefined (argument out of range))")
    )
  );
  EXPECT_EQ(asech(1 - 1 / getTop()).toString(), "1.1015282205148344113031315962232882607549581369854598556825953939712541702951560855963926471275061487735103376848102315248597150700630765059387426235333495755483505788503115382724106804445536940510466695827205469185322984760109337103739057002978598795971390260446685983828095271655143299592980169999703367652156688155730814358165398832394569722569002490431507814481217842691057439436763109599092031344149400752025936592695703741466909450253591955614422574626565454002410396637850800605126854091903233*10^-250");
  EXPECT_THAT(
    [] { asech(-1 + 1 / getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asechis undefined (acosh(-1.0) is undefined (argument out of range))")
    )
  );
  EXPECT_THAT(
    [] { asech(-1 - 1 / getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("asech(-1.0) is undefined (acoshis undefined (argument out of range))")
    )
  );
}

TEST(RealFunctionsTests, acschTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(acsch(Real("1")).toString(), "0.88137358701954302523260932497979230902816032826163541075329560865337718422202608783370689191025604285673981619210649218876207251197659193752725546276579040922157868036289719624030735740962554897787156326236780650676303289540416355819005952730435167974467341511551586178006392610631334097262572894915748472288200076465594693049140628994381122451738158467277126319460884455255316858936825946495242451691598886050671829540158959591479483197050095772634225707401729190593428412086592318144508722640957213");
  EXPECT_EQ(acsch(Real("-1")).toString(), "-0.88137358701954302523260932497979230902816032826163541075329560865337718422202608783370689191025604285673981619210649218876207251197659193752725546276579040922157868036289719624030735740962554897787156326236780650676303289540416355819005952730435167974467341511551586178006392610631334097262572894915748472288200076465594693049140628994381122451738158467277126319460884455255316858936825946495242451691598886050671829540158959591479483197050095772634225707401729190593428412086592318144508722640957213");
  EXPECT_EQ(acsch(Real("0.1")).toString(), "2.9982229502979697388465955375964534766070580548773036557344592627530896573521660892245927552391289301685117204184544564003090787358329069604562491320816046506888907288930668063296761113122383771954824827065559549640163465985690170583729712790695028450456699468948151999289646051193291789113485811264166666053093984787849861532060758619536759668386184899755910040265307557384499220067058993213963242831577379376488161983397507367322474941945745330687632550535052193222795026609536297093497594878553644");
  EXPECT_EQ(acsch(Real("-0.1")).toString(), "-2.9982229502979697388465955375964534766070580548773036557344592627530896573521660892245927552391289301685117204184544564003090787358329069604562491320816046506888907288930668063296761113122383771954824827065559549640163465985690170583729712790695028450456699468948151999289646051193291789113485811264166666053093984787849861532060758619536759668386184899755910040265307557384499220067058993213963242831577379376488161983397507367322474941945745330687632550535052193222795026609536297093497594878553644");
  EXPECT_EQ(acsch(Real("10")).toString(), "0.099834078899207563327303124704769443267712911708825010742382695651591768393613465106348449276903206188498406124677873226665835008446207400450999534936293675240929453784224661129186765218330354629955675698152652769815825877645487030185349956435110130012981123752137217672920058387798058093768737175840538375257997368850237548539261911564149546535903638541338513727379764043253416619589358627380617415202311544469434044730284747059064635906989915828599615256664129116822263249491427784753934869133607176");
  EXPECT_EQ(acsch(Real("-10")).toString(), "-0.099834078899207563327303124704769443267712911708825010742382695651591768393613465106348449276903206188498406124677873226665835008446207400450999534936293675240929453784224661129186765218330354629955675698152652769815825877645487030185349956435110130012981123752137217672920058387798058093768737175840538375257997368850237548539261911564149546535903638541338513727379764043253416619589358627380617415202311544469434044730284747059064635906989915828599615256664129116822263249491427784753934869133607176");

  EXPECT_THAT(
    [] { acsch(Real("0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acsch(0.0) is undefined (div(1.0, 0.0) is undefined (division by zero))")
    )
  );
  EXPECT_THAT(
    [] { acsch(Real("-0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acsch(-0.0) is undefined (div(1.0, -0.0) is undefined (division by zero))")
    )
  );

  EXPECT_EQ(acsch(getBottom()).toString(), "1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500");
  EXPECT_EQ(acsch(-getBottom()).toString(), "-1.649133777606550136784218687424004095254941179759911333322637797136168830422634602314115700570892532765885213315763059469571051644237637081484422101463976767747598782769417969433884505005703538555118938103621519633425441890710503685760392630169558339325007093682810777671600073987912657467898712686051207323137042203911162690969426661891984432432828752922861693151232817522147506107429166604238235729862621545138953775084345915962310286003786258852115334834242333756164161942927832989128545815901011*10^-500");
  EXPECT_EQ(acsch(1 / getBottom()).toString(), "1151.4854435107910205683414683366061078882486418235295386452906200946570972677111974895430572940805839184337371831189543587669560432707084787250541422492825598828384841024609317116054220602947216863597395091146246462156623856213461435584473683581161438305136955387987153590331605537885531891816764680447313482115276519127727666401719754440407634104220773569083968491814130462368341894306482997790282028573331750635353457104910553592436200842481954236838942173940623748983936341728324549070070575813421");
  EXPECT_EQ(acsch(-1 / getBottom()).toString(), "-1151.4854435107910205683414683366061078882486418235295386452906200946570972677111974895430572940805839184337371831189543587669560432707084787250541422492825598828384841024609317116054220602947216863597395091146246462156623856213461435584473683581161438305136955387987153590331605537885531891816764680447313482115276519127727666401719754440407634104220773569083968491814130462368341894306482997790282028573331750635353457104910553592436200842481954236838942173940623748983936341728324549070070575813421");
  EXPECT_EQ(acsch(1 + 1 / getBottom()).toString(), "0.88137358701954302523260932497979230902816032826163541075329560865337718422202608783370689191025604285673981619210649218876207251197659193752725546276579040922157868036289719624030735740962554897787156326236780650676303289540416355819005952730435167974467341511551586178006392610631334097262572894915748472288200076465594693049140628994381122451738158467277126319460884455255316858936825946495242451691598886050671829540158959591479483197050095772634225707401729190593428412086592318144508722640957212");
  EXPECT_EQ(acsch(1 - 1 / getBottom()).toString(), "0.88137358701954302523260932497979230902816032826163541075329560865337718422202608783370689191025604285673981619210649218876207251197659193752725546276579040922157868036289719624030735740962554897787156326236780650676303289540416355819005952730435167974467341511551586178006392610631334097262572894915748472288200076465594693049140628994381122451738158467277126319460884455255316858936825946495242451691598886050671829540158959591479483197050095772634225707401729190593428412086592318144508722640957214");
  EXPECT_EQ(acsch(-1 + 1 / getBottom()).toString(), "-0.88137358701954302523260932497979230902816032826163541075329560865337718422202608783370689191025604285673981619210649218876207251197659193752725546276579040922157868036289719624030735740962554897787156326236780650676303289540416355819005952730435167974467341511551586178006392610631334097262572894915748472288200076465594693049140628994381122451738158467277126319460884455255316858936825946495242451691598886050671829540158959591479483197050095772634225707401729190593428412086592318144508722640957214");
  EXPECT_EQ(acsch(-1 - 1 / getBottom()).toString(), "-0.88137358701954302523260932497979230902816032826163541075329560865337718422202608783370689191025604285673981619210649218876207251197659193752725546276579040922157868036289719624030735740962554897787156326236780650676303289540416355819005952730435167974467341511551586178006392610631334097262572894915748472288200076465594693049140628994381122451738158467277126319460884455255316858936825946495242451691598886050671829540158959591479483197050095772634225707401729190593428412086592318144508722640957212");

  EXPECT_THAT(
    [] { acsch(getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acsch(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (asinh(6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow))")
    )
  );
  EXPECT_THAT(
    [] { acsch(-getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("acsch(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (asinh(-6.0668221029528883281001366314451847775935571133154238337171617833892450389160443125661348729414343216076125585969768627866417572939707591975194837504732271906720565461629125208223721770347418712253634983033545337441357369348683484607312730428153166293652348836911624689467579262852324397776485195641635454176050858364773926346141137128601392334738037847620070433795854009788846254290816064680050028109867977104220909303033881251773870034221919630587132642554461027088303513413484297018404111713636352*10^-501) is undefined (result underflow))")
    )
  );
  EXPECT_EQ(acsch(1 / getTop()).toString(), "1152.4854438441245539018176589239077860990037756453300192692944639077298609394752946107525932528960239340920235321102525850798980092830320000555096031215066828506052468765296526295333712752885008572272341663841581776375690972457542070930899079323308648685613749345214020341581518739796542753060280950574892886732978215978223220554397586621190650226114565343493816622827928325467853708568759742433820344125690295321140284116420724299741831747169440212977865955687122877079873810781098497093732339145146");
  EXPECT_EQ(acsch(-1 / getTop()).toString(), "-1152.4854438441245539018176589239077860990037756453300192692944639077298609394752946107525932528960239340920235321102525850798980092830320000555096031215066828506052468765296526295333712752885008572272341663841581776375690972457542070930899079323308648685613749345214020341581518739796542753060280950574892886732978215978223220554397586621190650226114565343493816622827928325467853708568759742433820344125690295321140284116420724299741831747169440212977865955687122877079873810781098497093732339145146");
  EXPECT_EQ(acsch(1 + 1 / getTop()).toString(), "0.88137358701954302523260932497979230902816032826163541075329560865337718422202608783370689191025604285673981619210649218876207251197659193752725546276579040922157868036289719624030735740962554897787156326236780650676303289540416355819005952730435167974467341511551586178006392610631334097262572894915748472288200076465594693049140628994381122451738158467277126319460884455255316858936825946495242451691598886050671829540158959591479483197050095772634225707401729190593428412086592318144508722640957212");
  EXPECT_EQ(acsch(1 - 1 / getTop()).toString(), "0.88137358701954302523260932497979230902816032826163541075329560865337718422202608783370689191025604285673981619210649218876207251197659193752725546276579040922157868036289719624030735740962554897787156326236780650676303289540416355819005952730435167974467341511551586178006392610631334097262572894915748472288200076465594693049140628994381122451738158467277126319460884455255316858936825946495242451691598886050671829540158959591479483197050095772634225707401729190593428412086592318144508722640957213");
  EXPECT_EQ(acsch(-1 + 1 / getTop()).toString(), "-0.88137358701954302523260932497979230902816032826163541075329560865337718422202608783370689191025604285673981619210649218876207251197659193752725546276579040922157868036289719624030735740962554897787156326236780650676303289540416355819005952730435167974467341511551586178006392610631334097262572894915748472288200076465594693049140628994381122451738158467277126319460884455255316858936825946495242451691598886050671829540158959591479483197050095772634225707401729190593428412086592318144508722640957213");
  EXPECT_EQ(acsch(-1 - 1 / getTop()).toString(), "-0.88137358701954302523260932497979230902816032826163541075329560865337718422202608783370689191025604285673981619210649218876207251197659193752725546276579040922157868036289719624030735740962554897787156326236780650676303289540416355819005952730435167974467341511551586178006392610631334097262572894915748472288200076465594693049140628994381122451738158467277126319460884455255316858936825946495242451691598886050671829540158959591479483197050095772634225707401729190593428412086592318144508722640957212");
}

TEST(RealFunctionsTests, tgammaTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(tgamma(Real("1")).toString(), "1.0");
  EXPECT_EQ(tgamma(Real("2")).toString(), "1.0");
  EXPECT_EQ(tgamma(Real("3")).toString(), "2.0");
  EXPECT_EQ(tgamma(Real("4")).toString(), "6.0");
  EXPECT_EQ(tgamma(Real("5")).toString(), "24.0");
  EXPECT_EQ(tgamma(Real("10")).toString(), "362880.0");
  EXPECT_EQ(tgamma(Real("1000000")).toString(), "8.2639316883312400623766461031726662911353479789638730451677758855633796110356450844465305113114639733516068042108785885414647469506478361823012109754232995901156417462491737988838926919341417654578323931987280247219893964365444552161533920583519938798941774206240841593987701818807223169252057737128436859815222389311521255279546829742282164292748493887784712443572285950934362117645254493052265841197629905619012120241419002534128319433065076207004051595915117186613844750900755834037427137686877042*10^5565702");

  EXPECT_EQ(tgamma(Real("0.5")).toString(), "1.7724538509055160272981674833411451827975494561223871282138077898529112845910321813749506567385446654162268236242825706662361528657244226025250937096027870684620376986531051228499251730289508262289320953792679628001746390153514797205167001901852340185854469744949126403139217755259062164054193325009063984076137334774751534336679897893658518364087954511651617387600590673934317913328098548462481849020546548521956132515616474675150427387610561079961271072100603720444836723652966137080943234988316684");
  EXPECT_EQ(tgamma(Real("1.5")).toString(), "0.88622692545275801364908374167057259139877472806119356410690389492645564229551609068747532836927233270811341181214128533311807643286221130126254685480139353423101884932655256142496258651447541311446604768963398140008731950767573986025835009509261700929272348724745632015696088776295310820270966625045319920380686673873757671683399489468292591820439772558258086938002953369671589566640492742312409245102732742609780662578082373375752136938052805399806355360503018602224183618264830685404716174941583421");
  EXPECT_EQ(tgamma(Real("1.23345")).toString(), "0.90997105032312305741807535506003700168381988861711231924267338164564458593112273125696987256899621132303818098137283116421520223319720347086948665785172868831211838452701034020713638268002799809552102939595408319742471656798452664127285521748016037411776449726761460118893057519106421069436424704545012336856748903629746230563710905187654407336803466611082474903581743763894898782277751840392159614983699384269698816070941866389062892918430656836692667152309173180265182848885641358691827669594084204");
  EXPECT_EQ(tgamma(Real("10.888")).toString(), "2790176.174447460354671258080163376360120906017912181133856325386017527337920813441646902459962249753739973127551260150123098945829193226725763790106059834119482308232269368419601296416661166502225116620576358235256445497552002757230157460108522208731732927654599193624763066064505671846738599497816614189411925902232920735160323231051826704397665105182360454257988924354879880878409127512837530661841849644186879142901369497218377746568415712684711567198117424940558645257842106266774290371839534482");
  EXPECT_EQ(tgamma(Real("-0.5")).toString(), "-3.5449077018110320545963349666822903655950989122447742564276155797058225691820643627499013134770893308324536472485651413324723057314488452050501874192055741369240753973062102456998503460579016524578641907585359256003492780307029594410334003803704680371708939489898252806278435510518124328108386650018127968152274669549503068673359795787317036728175909023303234775201181347868635826656197096924963698041093097043912265031232949350300854775221122159922542144201207440889673447305932274161886469976633368");
  EXPECT_EQ(tgamma(Real("-1.5")).toString(), "2.3632718012073547030642233111215269103967326081631828376184103864705483794547095751666008756513928872216357648323767608883148704876325634700334582794703827579493835982041401637999002307052677683052427938390239504002328520204686396273556002535803120247805959659932168537518957007012082885405591100012085312101516446366335379115573197191544691152117272682202156516800787565245757217770798064616642465360728731362608176687488632900200569850147414773281694762800804960593115631537288182774590979984422246");
  EXPECT_EQ(tgamma(Real("-1.23345")).toString(), "4.1813173753338157686838484929306398465161945343856820450249490692138002199035392838734396409338251323026983705566970911924417832860723529581102283391559584847217302210440220504331321929372879804054828756399944297387879287343693136960164420167639066179690489140150100981131828453782058083685070893198152539225428420854912521832597931104574704313662292981686944758759661685704101299550098921387735170683299236505100398281382536288445474025809803119260386126881570866360966281549865406783345514283330934");
  EXPECT_EQ(tgamma(Real("-10.888")).toString(), "-3.0005493180448293721869822512345553711440749496581172835311328514510130843563454159410327449904102534962687933580402601136163144286923729599616329109973278889155036400167226010992532533509025591412102006858233580038908845631422707177405401193989133451023586269917939276976357523808049579203927948328610335908936407429428225823028618009800997924455338572712470543931305206282199854307120672911338853112757794177468305728016425719152016898292004791645737323685134147712344090181049164725937814247506367*10^-7");

  EXPECT_THAT(
    [] { tgamma(Real("0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("tgamma(0.0) is undefined (result overflow)")
    )
  );
  EXPECT_THAT(
    [] { tgamma(Real("-0")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("tgamma(-0.0) is undefined (result overflow)")
    )
  );
  EXPECT_THAT(
    [] { tgamma(Real("-1")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("tgamma(-1.0) is undefined (argument out of range)")
    )
  );
  EXPECT_THAT(
    [] { tgamma(Real("-2")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("tgamma(-2.0) is undefined (argument out of range)")
    )
  );
  EXPECT_THAT(
    [] { tgamma(Real("-3")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("tgamma(-3.0) is undefined (argument out of range)")
    )
  );
  EXPECT_THAT(
    [] { tgamma(Real("-32352")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("tgamma(-32352.0) is undefined (argument out of range)")
    )
  );

  EXPECT_THAT(
    [] { tgamma(Real("1000000000")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("tgamma(1000000000.0) is undefined (result overflow)")
    )
  );
  EXPECT_THAT(
    [] { tgamma(Real("-1000000000")); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("tgamma(-1000000000.0) is undefined (argument out of range)")
    )
  );

  EXPECT_THAT(
    [] { tgamma(getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("tgamma(60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (result overflow)")
    )
  );
  EXPECT_THAT(
    [] { tgamma(-getBottom()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("tgamma(-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0) is undefined (result overflow)")
    )
  );
  EXPECT_EQ(tgamma(1 / getBottom()).toString(), "60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633532.0");
  EXPECT_EQ(tgamma(-1 / getBottom()).toString(), "-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0");
  EXPECT_EQ(tgamma(1 + 1 / getBottom()).toString
  EXPECT_EQ(tgamma(1 - 1 / getBottom()).toString(), "1.0");
  EXPECT_EQ(tgamma(-1 + 1 / getBottom()).toString(), "-60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633533.0");
  EXPECT_EQ(tgamma(-1 - 1 / getBottom()).toString(), "60637894486118500503636099732462364956850790907849127113254769591568608656948985194787389448417544101315522875333719830559375058059221999457285045467709773208236451195138842541700657594134640809985287947796233555965864294685760448475889927065472080334188866294714585098656713287282618832026757995083776993799896864197894811997715757204066567900975498475027932179243797839056728035498370647887472466931408463051355352585045395714991459137805650231442038783923968764653054533405715475155191362599633532.0");

  EXPECT_THAT(
    [] { tgamma(getTop()); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("tgamma(1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (result overflow)")
    )
  );
  EXPECT_THAT(
    [] { tgamma(-getTop()).toString(); },
    testing::ThrowsMessage<UndefinedException>(
      testing::StrEq("tgamma(-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500) is undefined (result overflow)")
    )
  );
  EXPECT_EQ(tgamma(1 / getTop()).toString(), "1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500");
  EXPECT_EQ(tgamma(-1 / getTop()).toString(), "-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500");
  EXPECT_EQ(tgamma(1 + 1 / getTop()).toString(), "1.0");
  EXPECT_EQ(tgamma(1 - 1 / getTop()).toString(), "1.0");
  EXPECT_EQ(tgamma(-1 + 1 / getTop()).toString(), "-1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500");
  EXPECT_EQ(tgamma(-1 - 1 / getTop()).toString(), "1.6483094164130387741510320575015722415830725719070958553581810817964045839732801283320767366433561500407417949917038975822310585763375699419424510422581997424963334554622569199584327881930851555021315633087886023249271483198945434608517539913558850905928096069667671775054328978413933023917511835527377381808000967094899992816840848691527375424965235810613599352178207607112172283212141431574982992000512238522963665692263518204556874384169868120188374052307633082011946880362142902601993503659461819*10^500");
}

TEST(RealFunctionsTests, getETest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(getE().toString(), "2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274274663919320030599218174135966290435729003342952605956307381323286279434907632338298807531952510190115738341879307021540891499348841675092447614606680822648001684774118537423454424371075390777449920695517027618386062613313845830007520449338265602976067371132007093287091274437470472306969772093101416928368190255151086574637721112523897844250569536967707854499699679468644549059879316368892300987931");
}

TEST(RealFunctionsTests, getPiTest) {
  Real::ScopedSetPrecision setPrecision(precision);

  EXPECT_EQ(getPi().toString(), "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491");
}
