#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include "fintamath/numbers/Integer.hpp"

#include <unordered_set>

#include "fintamath/exceptions/InvalidInputException.hpp"
#include "fintamath/exceptions/UndefinedException.hpp"
#include "fintamath/numbers/Rational.hpp"

using namespace fintamath;

TEST(IntegerTests, constructorTest) {
  EXPECT_EQ(Integer(), 0);
}

TEST(IntegerTests, stringConstructorTest) {
  EXPECT_EQ(Integer("10").toString(), "10");
  EXPECT_EQ(Integer("2432432423432432454745").toString(), "2432432423432432454745");
  EXPECT_EQ(Integer("-10"), -10);
  EXPECT_EQ(Integer("01"), 1);
  EXPECT_EQ(Integer("-01"), -1);
  EXPECT_EQ(Integer("00"), 0);
  EXPECT_EQ(Integer("-00"), 0);

  EXPECT_THAT(
      [] { Integer(""); },
      testing::ThrowsMessage<InvalidInputException>(
          testing::StrEq(R"(Unable to parse Integer from "")")));
  EXPECT_THAT(
      [] { Integer("--10"); },
      testing::ThrowsMessage<InvalidInputException>(
          testing::StrEq(R"(Unable to parse Integer from "--10")")));
  EXPECT_THAT(
      [] { Integer("test"); },
      testing::ThrowsMessage<InvalidInputException>(
          testing::StrEq(R"(Unable to parse Integer from "test")")));
  EXPECT_THAT(
      [] { Integer("+"); },
      testing::ThrowsMessage<InvalidInputException>(
          testing::StrEq(R"(Unable to parse Integer from "+")")));
}

TEST(IntegerTests, templateConstructorTest) {
  EXPECT_EQ(Integer(std::numeric_limits<uint64_t>::max()).toString(), "18446744073709551615");
  EXPECT_EQ(Integer(std::numeric_limits<int64_t>::min()).toString(), "-9223372036854775808");
  EXPECT_EQ(Integer(std::numeric_limits<uint8_t>::max()).toString(), "255");
  EXPECT_EQ(Integer(std::numeric_limits<int8_t>::min()).toString(), "-128");
}

TEST(IntegerTests, intConstructorTest) {
  EXPECT_EQ(Integer(10), 10);

  const Integer a = 10;
  EXPECT_EQ(a, 10);
}

TEST(IntegerTests, intAssignmentOperatorTest) {
  Integer a;
  EXPECT_EQ(a = 10, 10);
}

TEST(IntegerTests, plusAssignmentOperatorTest) {
  EXPECT_EQ(Integer(5) += Integer(10), 15);
  EXPECT_EQ(Integer(-5) += Integer(10), 5);
  EXPECT_EQ(Integer(-10) += Integer(10), 0);
  EXPECT_EQ(Integer("-72838928574893245678976545678765457483992") += Integer("-387827392020390239201210"), Integer("-72838928574893246066803937699155696685202"));
}

TEST(IntegerTests, intPlusAssignmentOperatorTest) {
  EXPECT_EQ(Integer(5) += 10, 15);
}

TEST(IntegerTests, plusOperatorTest) {
  EXPECT_EQ(Integer(-100) + Integer("10"), -90);
  EXPECT_EQ(Integer("65784932384756574839238475674839") + Integer("-387827392020390239201210"), Integer("65784931996929182818848236473629"));
}

TEST(IntegerTests, intPlusOperatorTest) {
  EXPECT_EQ(Integer(5) + 10, 15);
}

TEST(IntegerTests, intFriendPlusOperatorTest) {
  EXPECT_EQ(5 + Integer(10), 15);
}

TEST(IntegerTests, minusAssignmentOperatorTest) {
  EXPECT_EQ(Integer(5) -= Integer(10), -5);
  EXPECT_EQ(Integer(-5) -= Integer(-10105), 10100);
  EXPECT_EQ(Integer("520039026478395743890") -= Integer("-1930275483923745483957483983"), Integer("1930276003962771962353227873"));
}

TEST(IntegerTests, intMinusAssignmentOperatorTest) {
  EXPECT_EQ(Integer(5) -= 10, -5);
}

TEST(IntegerTests, minusOperatorTest) {
  EXPECT_EQ(Integer(-100) - Integer("-748"), 648);
  EXPECT_EQ(Integer("65784932384756574839238475674839") - Integer("-387827392020390239201210"), Integer("65784932772583966859628714876049"));
}

TEST(IntegerTests, intMinusOperatorTest) {
  EXPECT_EQ(Integer(5) - 10, -5);
}

TEST(IntegerTests, intFriendMinusOperatorTest) {
  EXPECT_EQ(5 - Integer(10), -5);
}

TEST(IntegerTests, multiplyAssignmentOperatorTest) {
  EXPECT_EQ(Integer(5) *= Integer("-12"), -60);
  EXPECT_EQ(Integer(190) *= Integer(100), 19000);

  EXPECT_EQ(Integer(2) *= Integer(2), 4);
  EXPECT_EQ(Integer(2) *= Integer(-2), -4);
  EXPECT_EQ(Integer(-2) *= Integer(2), -4);
  EXPECT_EQ(Integer(-2) *= Integer(-2), 4);

  EXPECT_EQ(Integer("10000000000000000000000000000000000000000000") *= Integer("10000000000000000000000000000000000000000000"), Integer("100000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
  EXPECT_EQ(Integer("100000000000000000000000000000000000000000000000000000000000000000000000000000000000000") *= Integer("100000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), Integer("10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
  EXPECT_EQ(Integer("1000000000000000000000000000000000000000000000000000000000000000000000") *= Integer("100000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000"), Integer("100000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
  EXPECT_EQ(Integer("100000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000") *= Integer("1000000000000000000000000000000000000000000000000000000000000000000000"), Integer("100000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
  EXPECT_EQ(Integer("123") *= Integer("29837492356328746293432095803247329462387463287462347628437"), Integer("3670011559828435794092147783799421523873657984357868758297751"));
  EXPECT_EQ(Integer("123") *= Integer("3507630615696849555869044818661735064986392883263011691538871248141434862220387449579227548346015035603501276296494442204769872208628882685816583149015034150490829747567986311156822048603845157334656209386816063095043939468216080230001796494390400252142375053346581510773088042280290835395905258970276127578670424725237113115641881479792031434427596080908227551489188776476145554883257759405245297150541759841671819727944845899493678892840111830112509529920517471699237861267263602427655073892668208557712684031475765670957010740054698088570050264362373595571625821629034477445434265168041405756975664327860057312868835959178663661834688407715795207372052181069795781487373087361"),
            Integer("431438565730712495371892512695393412993326324641350438059281163521396488053107656298244988446559849379230656984468816391186694281661352570355439727328849200510372058950862316272289111978272954352162713754578375760690404554590577868290220968810019231013512131561629525825089829200475772753696346853343963692176462241204164913223951422014419866434594317951711988833170219506565903250640704406845171549516636460525633826537216045637722503819333755103838672180223649019006256935873423098601574088798189652598660135871519177527712321026727864894116182516571952255309976060371240725788414615669092908108006712326787049482866822978975630405666674149042810506762418271584881122946889745403"));

  Integer bigNum("3507630615696849555869044818661735064986392883263011691538871248141434862220387449579227548346015035603501276296494442204769872208628882685816583149015034150490829747567986311156822048603845157334656209386816063095043939468216080230001796494390400252142375053346581510773088042280290835395905258970276127578670424725237113115641881479792031434427596080908227551489188776476145554883257759405245297150541759841671819727944845899493678892840111830112509529920517471699237861267263602427655073892668208557712684031475765670957010740054698088570050264362373595571625821629034477445434265168041405756975664327860057312868835959178663661834688407715795207372052181069795781487373087361");
  EXPECT_EQ(
      bigNum *= bigNum,
      Integer("12303472536173859897916428377004935502004782919473057718871885043121781030098281780962637499969740130034456796500497509967452384582718074569004226484838279539257840095803149479101902072107837585131338230734054484921735569952391937234268928563893630777142850988345024717543088307452801811210636637774003502445558735145874342882934545079027970481216212551657139612736189944411920584073797480578668308872637837001226353933695298258623052077243146320976152890046183936959909708081150863318073036043586093209911389700226049811866608298458025084632141823154889542312490211657796070035617193651170851414935349019757621741341581542453267210040771001589520120490625177984198075544187001077934984041073965661299629440392924639719149765304535578896851351796566857314406226110515876882013067166666081619090773839736739801138095581269455420639319475624952362734849224487015130500274462036985670028437301153570145786839237097878094701275317259422555992691652743629535317375185705474463303523391875678091608659985127231205021506089419933399015580274121092988281352642975490569169565260763230292445030602585146983427386833017379443652221654863709315583493223508686729510859720119953570044368557853119295109670212239442035426004278725022502115464382587460494853075114778931717857481993662419358424270675936018796608915343974203803928220416770794160300461016974165792937944321"));
  EXPECT_EQ(
      bigNum *= bigNum,
      Integer("151375436448384432254283307583486066667042190660677620373123854553192330171309426231376077199633148394587309320500780366596644977921667705846188987094209368940524153866159642542317461838630631239213601469094819727267931442110409869192021916471495566770793968771356423244153613116589891384095154889897447129616495361921128483415008013000809960124014824730978336773349172340512505436233122012217784681438531620807943478571185612552450478078388300936606517852653888025048589518914846487741067060341531436357187268537672362009339521911619031150310962055950155717666529133873841751541637455255626595846380131842901830415858642992816729709654251950863750665357762009085810629217917751342352313325984460629046549764303679784381441423865043453230665790947214415711707134874389436507764444241582593434407423309392527966674580478029178887423061253968562091672677599167671594875604798350156550372883311207885282088863879202461885968408041715086679139981263812558960095695476485505356891618587969820162186732250377710432275819830606562398013148854467177307257792538812521105073250276853587043874285676126878294501204134744955080973659170543493289121184558611797400317932087143639362969152630394559727560144885191109167802199267405992294077943816747815152047986153974462696242579776353456270439825236419290517542215340162294579962815285992414141725975115146703976251490225724031898802682695139379699275083967566953749280275248401215696451748644475142038613799290222798072247498886364828935253690749237820783821104282786528804685820847939317976725694662661166127380194678954930597817803996943971279795062385881705273889663480715671471466170947086809281202777180196503031441640466417520512377184927727082258708265839007600152745143501419320905768663557824966355252526518492368909694102745402184718285534458364891811419700240301070527639998721161225798676121766517224180501332030635179372072827350327920970532916699374836128894515290852189101489989500779928531013587309296296610484631205391906273047197136471856730859350878848416701953443562929378684861312928240015961371220036087605180304967215500558598031593601273862799041607646012945892188848304803064939675273843852174253591780671275868647310004309203524619697995493946647868123514739427870390608088912784755244273289213735492487806711200286298562110855389881142350728943050786535546037005625779944656488759175679073720657521788460803169399098915443582503593087698432551216543011752197660404175871840418634933566440380132475375830576077689889610555877165396071750587143416063996020201199751972410003093042374458757966810782966064384827015516919398703986180788431985196032764700920816810628506882704347513628278314226925268661535156504738466810090463408594081517474013296151041"));
  EXPECT_EQ(
      bigNum *= bigNum,
      Integer("22914522759938874057257796193940596423762542563739879819187393716228927674967102320259140971970039681191953521845107003819722577675852648130582896523848489300401618605144122178714963775315121813016233845422666622391967070941222799991295148831604972014921548669988136910550583429196439564836192324208536390075346725270307881101136126066955930813005977004295048633367661493212947906274000463120197390631976069467888760302480674278463114891148564244560291804425558419637288491400563181216459405331910010819918137114169562642686365913909445366408221600536326850870319872641796188460477912754130475845019221244350802397125804616753941677689892186254852238819879711077466594270233275970184207089241959307606452888121946069973473187178429621850923035803698584605004760057193907991428349516173654483188034735443370608424952437287574373625961683858180545459455731113036740803540346295478191137401742626599685108689305122688033625091500192149433471606758187111336623695836324149798109957530488929446237876611701578903632656988704601991170700318699090994443569737006886000456073286856832541755147032007023848544143868344286688174920490227019670357331744186240639434820124532892352495837628204444865768628315003727667059064601350476306019344185835610136999805072162972396533444018543234945705785801821194544795893910083914065380374581906040367797923269828097444359083214426924695826759222422401187030525848439285325590904532357622684759168083883723952528353770651292912353239288710618208932679714147759798496233936162152171905976411257991446004244531243126651514169775566408412416511444811109103899344293964379515901127515320476282176914209630350256334388105277492245601971083748259439326882633122390095262959180743540407733675527295279499991631717528076028720677403681769874412993756416028695509846567879736829425609338122366782343942650249332310100547917756764208734431846361875150022547195730876860679811370074262572557427240358446300607238583697760935031783739309862948733945730295672533557727771537494882239568329563576770570606329684880497260939187425470873867143488273389096394243998495619633686867346743769228160190083712400123848953650078424071169480737580861136715479714127746230384382865950765497480109352661480555006731263945743183034301238410236979626291311032814899739382004792340528714915330712266376650002122663569232455538119647024917892734601362157376909353726319281790738177948929145333250777783978176541297394727906730299383146616448180733889068268599261810017781838919180138662094081385192258174261545871952875801308190538317356227339188486353746330923973530201740072804014657847444988089284144170453189654603578954204626924643099816144886147459088949092784033892978787575062623503061889652707999392292347473952957532795235401047800864405435853399880388715911468503525171819281118283726059420706666552865328266533470636056519420573479139923915043133111864940316152682413241917666115171401791140032628091019109335553629107070620749415293936339348629747315656963987875872250499927462252367512342970015455071101112416923988458694971674401354945910476837308082758970341531436126768614092284352396793570217362532358491921745166515235152898497406958486162902354227108786831372351765343347904984158770895141952588592652299981928710073552216436189302069313410225821322433564703182574388010762810684722915809782551097189131942038189563611436852004587748807950758655280277391196850285491455416185798115505237175677506901602668904618826165911951495633018090606511774557689333941216768544315914736643372744828367204001912510197427409448831552751042000422039004149802611430340871495790858997852479826193964390248251280477764007698046982394341468012728793697828122999388706064260426692774210328226339341379438411206398931797051585521526807317101524009057371016132112545199764943549943326444646235669506956042908664599458497547456749876794859537886281768596029303723720332705455665634858099642014423205143739524386758549220521234830839208965722364098657699818192394699943364222343941223479060118452399061520722297962510624978048981715339309875274789665446635366589494597138864901393177319919152360393110944458711815529566970440379045660106657941905985215623021370512088133019589637861683593525102496937340784575014892786755977183192764911904351528899931278143796813833172083355705686681659522250862553325448682854099048230487915252166521639972564771433268262796140330985771226586402923404606257921403131362992358393518563773523925487734949536127043741829152981325876012232440805450076516225451540372122407892137482317363205677671074187015524609263873584616317672015801549437543267647452011544121490920840199642082230695556813095518035464095432997410772453597587386072115154148107567203457891346737590794597292704435998478167499557259458457163119774832200481730716782158250823789304648687511787714897784958091435912146321482406579658845079719272836892750418667427354580814233072015777425586167263754843785617094707143927179461892972294357012992365104447070705874208671348211245412452116578149929826222475181307607501961730938328115766177264457813780894607079802908527780472438061400951946974872719185935072427958936902748097045969906062446607202359056893700205826243288062391760906322233464801517244406643473041960333113251024605272472620391940968519334443603057579347215930939098326014060418702027599415372606679852539380605614835673895284870410708896194577628004973269175667606960064970207771488716919268551306001746368500505085383681"));
  EXPECT_EQ(
      bigNum *= bigNum,
      Integer(""));
}

TEST(IntegerTests, intMultiplyAssignmentOperatorTest) {
  EXPECT_EQ(Integer(5) *= 10, 50);
}

TEST(IntegerTests, multiplyOperatorTest) {
  EXPECT_EQ(Integer(100) * Integer(-748), -74800);
  EXPECT_EQ(Integer(63275) * Integer(4), 253100);
  EXPECT_EQ(Integer("-46387457368576823782") * Integer("-4837274673279875647746473847384738478378327647387463746372"),
            Integer("224388872686866615413795053083509315281416419176500823292877913926466185818904"));
}

TEST(IntegerTests, intMultiplyOperatorTest) {
  EXPECT_EQ(Integer(5) * 10, 50);
}

TEST(IntegerTests, intFriendMultiplyOperatorTest) {
  EXPECT_EQ(5 * Integer(10), 50);
}

TEST(IntegerTests, divideAssignmentOperatorTest) {
  EXPECT_EQ(Integer(-25) /= Integer(368273929), 0);
  EXPECT_EQ(Integer(2000) /= Integer(-368273929), 0);
  EXPECT_EQ(Integer(-20) /= Integer(-20), 1);
  EXPECT_EQ(Integer(-29829920) /= Integer(1), -29829920);
  EXPECT_EQ(Integer(150067278) /= Integer(100000), 1500);

  EXPECT_EQ(Integer(2) /= Integer(2), 1);
  EXPECT_EQ(Integer(2) /= Integer(-2), -1);
  EXPECT_EQ(Integer(-2) /= Integer(2), -1);
  EXPECT_EQ(Integer(-2) /= Integer(-2), 1);

  EXPECT_EQ(Integer(0) /= Integer("368273929654738476473823743829388329882"), 0);
  EXPECT_EQ(Integer("10000000000000000000000000000000000000000000") /=
            Integer("10000000000000000000000000000000000000000"),
            Integer("1000"));
  EXPECT_EQ(Integer("-4837274673279875647746473847384738478378327647387463746372") /= Integer("-463874573"),
            Integer("10427979792028556925767245809751978965181020274175"));
  EXPECT_EQ(Integer("100000000000000000000000000000000000000000000000000000000000000000000000000000000") /=
            Integer("7182818284590452353602874713526624977572470936999595749669676277240766335354759"),
            13);

  EXPECT_EQ(
      Integer("100000000000000000000000000000000000000000000000000000000000000000000000000000000000000") /=
      Integer("10000000000000000000000000000000000000000000"),
      Integer("10000000000000000000000000000000000000000000"));
  EXPECT_EQ(
      Integer("10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000") /=
      Integer("100000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
      Integer("100000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
  EXPECT_EQ(
      Integer("100000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000") /=
      Integer("100000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000"),
      Integer("1000000000000000000000000000000000000000000000000000000000000000000000"));
  EXPECT_EQ(
      Integer("100000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000") /=
      Integer("1000000000000000000000000000000000000000000000000000000000000000000000"),
      Integer("100000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000"));

  Integer bigA("12303472536173859897916428377004935502004782919473057718871885043121781030098281780962637499969740130034456796500497509967452384582718074569004226484838279539257840095803149479101902072107837585131338230734054484921735569952391937234268928563893630777142850988345024717543088307452801811210636637774003502445558735145874342882934545079027970481216212551657139612736189944411920584073797480578668308872637837001226353933695298258623052077243146320976152890046183936959909708081150863318073036043586093209911389700226049811866608298458025084632141823154889542312490211657796070035617193651170851414935349019757621741341581542453267210040771001589520120490625177984198075544187001077934984041073965661299629440392924639719149765304535578896851351796566857314406226110515876882013067166666081619090773839736739801138095581269455420639319475624952362734849224487015130500274462036985670028437301153570145786839237097878094701275317259422555992691652743629535317375185705474463303523391875678091608659985127231205021506089419933399015580274121092988281352642975490569169565260763230292445030602585146983427386833017379443652221654863709315583493223508686729510859720119953570044368557853119295109670212239442035426004278725022502115464382587460494853075114778931717857481993662419358424270675936018796608915343974203803928220416770794160300461016974165792937944321");
  EXPECT_EQ(bigA /=
            Integer("3507630615696849555869044818661735064986392883263011691538871248141434862220387449579227548346015035603501276296494442204769872208628882685816583149015034150490829747567986311156822048603845157334656209386816063095043939468216080230001796494390400252142375053346581510773088042280290835395905258970276127578670424725237113115641881479792031434427596080908227551489188776476145554883257759405245297150541759841671819727944845899493678892840111830112509529920517471699237861267263602427655073892668208557712684031475765670957010740054698088570050264362373595571625821629034477445434265168041405756975664327860057312868835959178663661834688407715795207372052181069795781487373087361"),
            Integer("3507630615696849555869044818661735064986392883263011691538871248141434862220387449579227548346015035603501276296494442204769872208628882685816583149015034150490829747567986311156822048603845157334656209386816063095043939468216080230001796494390400252142375053346581510773088042280290835395905258970276127578670424725237113115641881479792031434427596080908227551489188776476145554883257759405245297150541759841671819727944845899493678892840111830112509529920517471699237861267263602427655073892668208557712684031475765670957010740054698088570050264362373595571625821629034477445434265168041405756975664327860057312868835959178663661834688407715795207372052181069795781487373087361"));

  EXPECT_THAT(
      [] { Integer(-25) /= Integer(0); },
      testing::ThrowsMessage<UndefinedException>(
          testing::StrEq(R"(div(-25, 0) is undefined (division by zero))")));
}

TEST(IntegerTests, intDivideAssignmentOperatorTest) {
  EXPECT_EQ(Integer(10) /= 5, 2);
}

TEST(IntegerTests, divideOperatorTest) {
  EXPECT_EQ(Integer(-25) / Integer(368273929), 0);
  EXPECT_EQ(Integer("-4837274673279875647746473847384738478378327647387463746372") / Integer("-463874573"),
            Integer("10427979792028556925767245809751978965181020274175"));
}

TEST(IntegerTests, intDivideOperatorTest) {
  EXPECT_EQ(Integer(10) / 5, 2);
}

TEST(IntegerTests, intFriendDivideOperatorTest) {
  EXPECT_EQ(10 / Integer(5), 2);
}

TEST(IntegerTests, moduloAssignmentOperatorTest) {
  EXPECT_EQ(Integer(0) %= Integer(2), Integer(0));
  EXPECT_EQ(Integer(0) %= Integer(-2), Integer(0));

  EXPECT_EQ(Integer(10) %= Integer(1), Integer(0));
  EXPECT_EQ(Integer(10) %= Integer(-1), Integer(0));
  EXPECT_EQ(Integer(-10) %= Integer(1), Integer(0));
  EXPECT_EQ(Integer(-10) %= Integer(-1), Integer(0));

  EXPECT_EQ(Integer(2) %= Integer(3), Integer(2));
  EXPECT_EQ(Integer(2) %= Integer(-3), Integer(2));
  EXPECT_EQ(Integer(-2) %= Integer(3), Integer(-2));
  EXPECT_EQ(Integer(-2) %= Integer(-3), Integer(-2));

  EXPECT_EQ(Integer(19) %= Integer(11), Integer(8));
  EXPECT_EQ(Integer(19) %= Integer(-11), Integer(8));
  EXPECT_EQ(Integer(-19) %= Integer(11), Integer(-8));
  EXPECT_EQ(Integer(-19) %= Integer(-11), Integer(-8));

  EXPECT_EQ(Integer(25) %= Integer(368273929), 25);
  EXPECT_EQ(Integer(25) %= Integer(-368273929), 25);
  EXPECT_EQ(Integer(-25) %= Integer(368273929), -25);
  EXPECT_EQ(Integer(-25) %= Integer(-368273929), -25);

  EXPECT_EQ(Integer(25) %= Integer(3), 1);
  EXPECT_EQ(Integer(25) %= Integer(-3), 1);
  EXPECT_EQ(Integer(-25) %= Integer(3), -1);
  EXPECT_EQ(Integer(-25) %= Integer(-3), -1);

  EXPECT_EQ(Integer(2000) %= Integer(36), Integer(20));
  EXPECT_EQ(Integer(2000) %= Integer(-36), Integer(20));
  EXPECT_EQ(Integer(-2000) %= Integer(36), Integer(-20));
  EXPECT_EQ(Integer(-2000) %= Integer(-36), Integer(-20));

  EXPECT_EQ(Integer(0) %= Integer("368273929654738476473823743829388329882"),
            0);
  EXPECT_EQ(Integer("54732897657873247528747287294738765738746547387476327946763287467387267328724673874") %= Integer("47632837528673287446238746237943"),
            Integer("25193809905191080888100466723580"));
  EXPECT_EQ(Integer("5473289765787324752874728729473876573874654738747632794676328746738849389483948938493848394839849383893847267328724673874") %= Integer("1738383928837528673287446238746237943"),
            Integer("1186817955126284001426922341829394317"));

  EXPECT_THAT(
      [] { Integer(-25) %= Integer(0); },
      testing::ThrowsMessage<UndefinedException>(
          testing::StrEq(R"(mod(-25, 0) is undefined (modulo by zero))")));
}

TEST(IntegerTests, intModuloAssignmentOperatorTest) {
  EXPECT_EQ(Integer(10) %= 4, 2);
}

TEST(IntegerTests, moduloOperatorTest) {
  EXPECT_EQ(Integer(-25) % Integer(3), -1);
  EXPECT_EQ(Integer("54732897657873247528747287294738765738746547387476327946763287467387267328724673874") %
                Integer("47632837528673287446238746237943"),
            Integer("25193809905191080888100466723580"));
}

TEST(IntegerTests, intModuloOperatorTest) {
  EXPECT_EQ(Integer(10) % 4, 2);
}

TEST(IntegerTests, intFriendModuloOperatorTest) {
  EXPECT_EQ(10 % Integer(4), 2);
}

TEST(IntegerTests, bitAndAssignmentOperatorTest) {
  EXPECT_EQ(Integer(192) &= Integer(361), 64);
  EXPECT_EQ(Integer(192) &= Integer(-361), 128);
  EXPECT_EQ(Integer(-192) &= Integer(361), 320);
  EXPECT_EQ(Integer(-192) &= Integer(-361), -512);

  EXPECT_EQ(Integer("12091392839827399999999999999999999992983729837928392800000711") &=
            Integer("239821736218376218710101004349800036128736128451262548126372110293"),
            Integer("1646269354501586035462268928227889963640732025882107625773765"));
}

TEST(IntegerTests, intBitAndAssignmentOperatorTest) {
  EXPECT_EQ(Integer(5) &= 3, 1);
}

TEST(IntegerTests, bitAndOperatorTest) {
  EXPECT_EQ(Integer(5) & Integer(3), 1);
}

TEST(IntegerTests, intBitAndOperatorTest) {
  EXPECT_EQ(Integer(5) & 3, 1);
}

TEST(IntegerTests, intFriendBitAndOperatorTest) {
  EXPECT_EQ(5 & Integer(3), 1);
}

TEST(IntegerTests, bitOrAssignmentOperatorTest) {
  EXPECT_EQ(Integer(192) |= Integer(361), 489);
  EXPECT_EQ(Integer(192) |= Integer(-361), -297);
  EXPECT_EQ(Integer(-192) |= Integer(361), -151);
  EXPECT_EQ(Integer(-192) |= Integer(-361), -41);

  EXPECT_EQ(Integer("12091392839827399999999999999999999992983729837928392800000711") |=
            Integer("239821736218376218710101004349800036128736128451262548126372110293"),
            Integer("239832181341861544524065542080871808238765471449074594411546337239"));
}

TEST(IntegerTests, intBitOrAssignmentOperatorTest) {
  EXPECT_EQ(Integer(5) |= 3, 7);
}

TEST(IntegerTests, bitOrOperatorTest) {
  EXPECT_EQ(Integer(5) | Integer(3), 7);
}

TEST(IntegerTests, intBitOrOperatorTest) {
  EXPECT_EQ(Integer(5) | 3, 7);
}

TEST(IntegerTests, intFriendBitOrOperatorTest) {
  EXPECT_EQ(5 | Integer(3), 7);
}

TEST(IntegerTests, bitXorAssignmentOperatorTest) {
  EXPECT_EQ(Integer(192) ^= Integer(361), 425);
  EXPECT_EQ(Integer(192) ^= Integer(-361), -425);
  EXPECT_EQ(Integer(-192) ^= Integer(361), -471);
  EXPECT_EQ(Integer(-192) ^= Integer(-361), 471);

  EXPECT_EQ(Integer("12091392839827399999999999999999999992983729837928392800000711") ^=
            Integer("239821736218376218710101004349800036128736128451262548126372110293"),
            Integer("239830535072507042938030079811943580348801830717048712303920563474"));
}

TEST(IntegerTests, intBitXorAssignmentOperatorTest) {
  EXPECT_EQ(Integer(5) ^= 3, 6);
}

TEST(IntegerTests, bitXorOperatorTest) {
  EXPECT_EQ(Integer(5) ^ Integer(3), 6);
}

TEST(IntegerTests, intBitXorOperatorTest) {
  EXPECT_EQ(Integer(5) ^ 3, 6);
}

TEST(IntegerTests, intFriendBitXorOperatorTest) {
  EXPECT_EQ(5 ^ Integer(3), 6);
}

TEST(IntegerTests, bitLeftShiftAssignmentOperatorTest) {
  EXPECT_EQ(Integer(192) <<= Integer(5), 6144);
  EXPECT_EQ(Integer(-192) <<= Integer(5), -6144);

  EXPECT_EQ(Integer("12091392839827399999999999999999999992983729837928392800000711") <<= 5,
            Integer("386924570874476799999999999999999999775479354813708569600022752"));

  EXPECT_THAT(
      [] { Integer(192) <<= Integer(-5); },
      testing::ThrowsMessage<UndefinedException>(
          testing::StrEq(R"(bitLeftShift(192, -5) is undefined (negative shift))")));
  EXPECT_THAT(
      [] { Integer(-192) <<= Integer(-5); },
      testing::ThrowsMessage<UndefinedException>(
          testing::StrEq(R"(bitLeftShift(-192, -5) is undefined (negative shift))")));
}

TEST(IntegerTests, intBitLeftShiftAssignmentOperatorTest) {
  EXPECT_EQ(Integer(5) <<= 3, 40);
}

TEST(IntegerTests, bitLeftShiftOperatorTest) {
  EXPECT_EQ(Integer(5) << Integer(3), 40);
}

TEST(IntegerTests, intBitLeftShiftOperatorTest) {
  EXPECT_EQ(Integer(5) << 3, 40);
}

TEST(IntegerTests, intFriendBitLeftShiftOperatorTest) {
  EXPECT_EQ(5 << Integer(3), 40);
}

TEST(IntegerTests, bitRightShiftAssignmentOperatorTest) {
  EXPECT_EQ(Integer(192) >>= Integer(5), 6);
  EXPECT_EQ(Integer(-192) >>= Integer(5), -6);

  EXPECT_EQ(Integer("12091392839827399999999999999999999992983729837928392800000711") >>= 5,
            Integer("377856026244606249999999999999999999780741557435262275000022"));

  EXPECT_THAT(
      [] { Integer(192) >>= Integer(-5); },
      testing::ThrowsMessage<UndefinedException>(
          testing::StrEq(R"(bitRightShift(192, -5) is undefined (negative shift))")));
  EXPECT_THAT(
      [] { Integer(-192) >>= Integer(-5); },
      testing::ThrowsMessage<UndefinedException>(
          testing::StrEq(R"(bitRightShift(-192, -5) is undefined (negative shift))")));
}

TEST(IntegerTests, intBitRightShiftAssignmentOperatorTest) {
  EXPECT_EQ(Integer(5) >>= 3, 0);
}

TEST(IntegerTests, bitRightShiftOperatorTest) {
  EXPECT_EQ(Integer(5) >> Integer(3), 0);
}

TEST(IntegerTests, intBitRightShiftOperatorTest) {
  EXPECT_EQ(Integer(5) >> 3, 0);
}

TEST(IntegerTests, intFriendBitRightShiftOperatorTest) {
  EXPECT_EQ(5 >> Integer(3), 0);
}

TEST(IntegerTests, bitNotOperatorTest) {
  EXPECT_EQ(~Integer(5), -6);
  EXPECT_EQ(~Integer("-6748346738212618723653728362813238128121823281328381262673676266"),
            Integer("6748346738212618723653728362813238128121823281328381262673676265"));
}

TEST(IntegerTests, preIncrementOperatorTest) {
  Integer a = 5;
  EXPECT_EQ(++a, 6);

  Integer b("4632819374289745632874563287263891364238928");
  EXPECT_EQ(++b, Integer("4632819374289745632874563287263891364238929"));
}

TEST(IntegerTests, postIncrementOperatorTest) {
  Integer a = 5;
  EXPECT_EQ(a++, 5);
  EXPECT_EQ(a, 6);

  Integer b("4632819374289745632874563287263891364238928");
  EXPECT_EQ(b++, Integer("4632819374289745632874563287263891364238928"));
  EXPECT_EQ(b, Integer("4632819374289745632874563287263891364238929"));
}

TEST(IntegerTests, preDecrementOperatorTest) {
  EXPECT_EQ(--Integer(5), 4);
  EXPECT_EQ(--Integer("4632819374289745632874563287263891364238928"),
            Integer("4632819374289745632874563287263891364238927"));
}

TEST(IntegerTests, postDecrementOperatorTest) {
  Integer a = 5;
  EXPECT_EQ(a--, 5);
  EXPECT_EQ(a, 4);

  Integer b("4632819374289745632874563287263891364238928");
  EXPECT_EQ(b--, Integer("4632819374289745632874563287263891364238928"));
  EXPECT_EQ(b, Integer("4632819374289745632874563287263891364238927"));
}

TEST(IntegerTests, unaryPlusOperatorTest) {
  EXPECT_EQ(+Integer(5), 5);
  EXPECT_EQ(+Integer("-6748346738212618723653728362813238128121823281328381262673676266"),
            Integer("-6748346738212618723653728362813238128121823281328381262673676266"));
}

TEST(IntegerTests, unaryMinusOperatorTest) {
  EXPECT_EQ(-Integer(5), -5);
  EXPECT_EQ(-Integer(0), 0);
  EXPECT_EQ(-Integer("-6748346738212618723653728362813238128121823281328381262673676266"),
            Integer("6748346738212618723653728362813238128121823281328381262673676266"));
}

TEST(IntegerTests, equalOperatorTest) {
  EXPECT_TRUE(Integer(13663) == Integer(13663));

  EXPECT_FALSE(Integer("5643879274839203876783492873448927") == Integer("-5643879274839203876783492873448927"));
  EXPECT_FALSE(Integer(13663) == Integer(298392));
}

TEST(IntegerTests, intEqualOperatorTest) {
  EXPECT_TRUE(Integer(283746) == 283746);
}

TEST(IntegerTests, intFriendEqualOperatorTest) {
  EXPECT_TRUE(283746 == Integer(283746));
}

TEST(IntegerTests, notEqualOperatorTest) {
  EXPECT_TRUE(Integer(13663) != 298392);
  EXPECT_TRUE(Integer("5643879274839203876783492873448927") != Integer("-5643879274839203876783492873448927"));

  EXPECT_FALSE(Integer(13663) != 13663);
}

TEST(IntegerTests, intNotEqualOperatorTest) {
  EXPECT_TRUE(Integer(283746) != 12121);
}

TEST(IntegerTests, intFriendNotEqualOperatorTest) {
  EXPECT_TRUE(283746 != Integer(12121));
}

TEST(IntegerTests, lessOperatorTest) {
  EXPECT_TRUE(Integer("-724627382732") < Integer("643864837483437378342"));
  EXPECT_TRUE(Integer("7236") < Integer("748274299"));
  EXPECT_TRUE(Integer("1") < Integer("10000000000000000000000000000000000"));

  EXPECT_FALSE(Integer("-7236726372") < Integer("-64283827387283728"));
  EXPECT_FALSE(Integer("7236726372") < Integer("-62736"));
}

TEST(IntegerTests, intLessOperatorTest) {
  EXPECT_TRUE(Integer(283746) < 2379264);
}

TEST(IntegerTests, intFriendLessOperatorTest) {
  EXPECT_TRUE(283746 < Integer(2379264));
}

TEST(IntegerTests, moreOperatorTest) {
  EXPECT_TRUE(Integer("-7236726372") > Integer("-64283827387283728"));
  EXPECT_TRUE(Integer("7236726372") > Integer("-727"));
  EXPECT_TRUE(Integer("7236") > Integer("483"));

  EXPECT_FALSE(Integer("-724627382732") > Integer("643864837483437378342"));
  EXPECT_FALSE(Integer("1") > Integer("10000000000000000000000000000000000"));
}

TEST(IntegerTests, intMoreOperatorTest) {
  EXPECT_TRUE(Integer(283746) > 12121);
}

TEST(IntegerTests, intFriendMoreOperatorTest) {
  EXPECT_TRUE(283746 > Integer(12121));
}

TEST(IntegerTests, lessEqualOperatorTest) {
  EXPECT_TRUE(Integer("-724627382732") <= Integer("643864837483437378342"));
  EXPECT_TRUE(Integer("-7246") <= Integer("-7246"));
  EXPECT_TRUE(Integer("1") <= Integer("10000000000000000000000000000000000"));

  EXPECT_FALSE(Integer("-7236726372") <= Integer("-64283827387283728"));
  EXPECT_FALSE(Integer("7236726372") <= Integer("0"));
  EXPECT_FALSE(Integer("7236") <= Integer("-74827"));
}

TEST(IntegerTests, intLessEqualOperatorTest) {
  EXPECT_TRUE(Integer(12121) <= 283746);
}

TEST(IntegerTests, intFriendLessEqualOperatorTest) {
  EXPECT_TRUE(12121 <= Integer(283746));
}

TEST(IntegerTests, moreEqualOperatorTest) {
  EXPECT_TRUE(Integer("-7246") >= Integer("-7246"));
  EXPECT_TRUE(Integer("-7236726372") >= Integer("-64283827387283728"));
  EXPECT_TRUE(Integer("7236726372") >= Integer("0"));
  EXPECT_TRUE(Integer("7236") >= Integer("-748274299"));

  EXPECT_FALSE(Integer("-724627382732") >= Integer("643864837483437378342"));
  EXPECT_FALSE(Integer("1") >= Integer("10000000000000000000000000000000000"));
}

TEST(IntegerTests, intMoreEqualOperatorTest) {
  EXPECT_TRUE(Integer(283746) >= 12121);
}

TEST(IntegerTests, intFriendMoreEqualOperatorTest) {
  EXPECT_TRUE(283746 >= Integer(12121));
}

TEST(IntegerTests, toStringTest) {
  EXPECT_EQ(Integer("618288").toString(), "618288");
  EXPECT_EQ(Integer("0").toString(), "0");
  EXPECT_EQ(Integer("-738").toString(), "-738");
}

TEST(IntegerTests, signTest) {
  EXPECT_EQ(Integer(-2).sign(), -1);
  EXPECT_EQ(Integer(-1).sign(), -1);
  EXPECT_EQ(Integer(0).sign(), 0);
  EXPECT_EQ(Integer(1).sign(), 1);
  EXPECT_EQ(Integer(2).sign(), 1);
}

TEST(IntegerTests, intOperatorTest) {
  EXPECT_EQ(static_cast<int64_t>(Integer(-2)), -2);
  EXPECT_EQ(static_cast<int64_t>(Integer(10)), 10);
  EXPECT_EQ(static_cast<int64_t>(Integer(0)), 0);
  EXPECT_EQ(static_cast<int64_t>(Integer("100000000000000000000000000000000000000000000000000")), 9223372036854775807);
  EXPECT_EQ(static_cast<int64_t>(Integer("-100000000000000000000000000000000000000000000000000")) + 1, -9223372036854775807);
}

TEST(IntegerTests, getPrecisionTest) {
  EXPECT_FALSE(Integer(1).getPrecision());
}

TEST(IntegerTests, isComplexTest) {
  EXPECT_FALSE(Integer(1).isComplex());
}

TEST(IntegerTests, getClassTest) {
  EXPECT_EQ(Integer().getClass()->getName(), "Integer");
  EXPECT_EQ(Integer().getClass()->getParent(), INumber::getClassStatic());
}

TEST(IntegerTests, hashTest) {
  constexpr std::hash<Integer> hasher;

  EXPECT_EQ(hasher(Integer(0)), hasher(Integer(0)));
  EXPECT_EQ(hasher(Integer(12)), hasher(Integer(12)));
  EXPECT_EQ(hasher(Integer(-12)), hasher(Integer(-12)));
  EXPECT_EQ(hasher(Integer("452734865298734659873246238756987435")), hasher(Integer("452734865298734659873246238756987435")));
  EXPECT_EQ(hasher(Integer("-452734865298734659873246238756987435")), hasher(Integer("-452734865298734659873246238756987435")));

  EXPECT_NE(hasher(Integer(0)), hasher(Integer(1)));
  EXPECT_NE(hasher(Integer(12)), hasher(Integer(13)));
  EXPECT_NE(hasher(Integer(-12)), hasher(Integer(-13)));
  EXPECT_NE(hasher(Integer("452734865298734659873246238756987435")), hasher(Integer("452734865298734659873246238756987436")));
  EXPECT_NE(hasher(Integer("-452734865298734659873246238756987435")), hasher(Integer("-452734865298734659873246238756987436")));
}
